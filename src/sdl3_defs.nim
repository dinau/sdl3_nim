
type
  enum_SDL_DUMMY_ENUM* {.size: sizeof(cuint).} = enum
    DUMMY_ENUM_VALUE = 0
type
  enum_SDL_AssertState* {.size: sizeof(cuint).} = enum
    SDL_ASSERTION_RETRY = 0, SDL_ASSERTION_BREAK = 1, SDL_ASSERTION_ABORT = 2,
    SDL_ASSERTION_IGNORE = 3, SDL_ASSERTION_ALWAYS_IGNORE = 4
type
  enum_SDL_PropertyType* {.size: sizeof(cuint).} = enum
    SDL_PROPERTY_TYPE_INVALID = 0, SDL_PROPERTY_TYPE_POINTER = 1,
    SDL_PROPERTY_TYPE_STRING = 2, SDL_PROPERTY_TYPE_NUMBER = 3,
    SDL_PROPERTY_TYPE_FLOAT = 4, SDL_PROPERTY_TYPE_BOOLEAN = 5
type
  enum_SDL_ThreadPriority* {.size: sizeof(cuint).} = enum
    SDL_THREAD_PRIORITY_LOW = 0, SDL_THREAD_PRIORITY_NORMAL = 1,
    SDL_THREAD_PRIORITY_HIGH = 2, SDL_THREAD_PRIORITY_TIME_CRITICAL = 3
type
  enum_SDL_InitStatus* {.size: sizeof(cuint).} = enum
    SDL_INIT_STATUS_UNINITIALIZED = 0, SDL_INIT_STATUS_INITIALIZING = 1,
    SDL_INIT_STATUS_INITIALIZED = 2, SDL_INIT_STATUS_UNINITIALIZING = 3
type
  enum_SDL_IOStatus* {.size: sizeof(cuint).} = enum
    SDL_IO_STATUS_READY = 0, SDL_IO_STATUS_ERROR = 1, SDL_IO_STATUS_EOF = 2,
    SDL_IO_STATUS_NOT_READY = 3, SDL_IO_STATUS_READONLY = 4,
    SDL_IO_STATUS_WRITEONLY = 5
type
  enum_SDL_IOWhence* {.size: sizeof(cuint).} = enum
    SDL_IO_SEEK_SET = 0, SDL_IO_SEEK_CUR = 1, SDL_IO_SEEK_END = 2
type
  enum_SDL_AudioFormat* {.size: sizeof(cuint).} = enum
    SDL_AUDIO_UNKNOWN = 0, SDL_AUDIO_U8 = 8, SDL_AUDIO_S8 = 32776,
    SDL_AUDIO_S16LE = 32784, SDL_AUDIO_S32LE = 32800, SDL_AUDIO_F32LE = 33056,
    SDL_AUDIO_S16BE = 36880, SDL_AUDIO_S32BE = 36896, SDL_AUDIO_F32BE = 37152
const
  SDL_AUDIO_S16* = enum_SDL_AudioFormat.SDL_AUDIO_S16LE
const
  SDL_AUDIO_S32* = enum_SDL_AudioFormat.SDL_AUDIO_S32LE
const
  SDL_AUDIO_F32* = enum_SDL_AudioFormat.SDL_AUDIO_F32LE
type
  enum_SDL_BlendOperation* {.size: sizeof(cuint).} = enum
    SDL_BLENDOPERATION_ADD = 1, SDL_BLENDOPERATION_SUBTRACT = 2,
    SDL_BLENDOPERATION_REV_SUBTRACT = 3, SDL_BLENDOPERATION_MINIMUM = 4,
    SDL_BLENDOPERATION_MAXIMUM = 5
type
  enum_SDL_BlendFactor* {.size: sizeof(cuint).} = enum
    SDL_BLENDFACTOR_ZERO = 1, SDL_BLENDFACTOR_ONE = 2,
    SDL_BLENDFACTOR_SRC_COLOR = 3, SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
    SDL_BLENDFACTOR_SRC_ALPHA = 5, SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6,
    SDL_BLENDFACTOR_DST_COLOR = 7, SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8,
    SDL_BLENDFACTOR_DST_ALPHA = 9, SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10
type
  enum_SDL_PixelType* {.size: sizeof(cuint).} = enum
    SDL_PIXELTYPE_UNKNOWN = 0, SDL_PIXELTYPE_INDEX1 = 1,
    SDL_PIXELTYPE_INDEX4 = 2, SDL_PIXELTYPE_INDEX8 = 3,
    SDL_PIXELTYPE_PACKED8 = 4, SDL_PIXELTYPE_PACKED16 = 5,
    SDL_PIXELTYPE_PACKED32 = 6, SDL_PIXELTYPE_ARRAYU8 = 7,
    SDL_PIXELTYPE_ARRAYU16 = 8, SDL_PIXELTYPE_ARRAYU32 = 9,
    SDL_PIXELTYPE_ARRAYF16 = 10, SDL_PIXELTYPE_ARRAYF32 = 11,
    SDL_PIXELTYPE_INDEX2 = 12
type
  enum_SDL_BitmapOrder* {.size: sizeof(cuint).} = enum
    SDL_BITMAPORDER_NONE = 0, SDL_BITMAPORDER_4321 = 1, SDL_BITMAPORDER_1234 = 2
type
  enum_SDL_PackedOrder* {.size: sizeof(cuint).} = enum
    SDL_PACKEDORDER_NONE = 0, SDL_PACKEDORDER_XRGB = 1,
    SDL_PACKEDORDER_RGBX = 2, SDL_PACKEDORDER_ARGB = 3,
    SDL_PACKEDORDER_RGBA = 4, SDL_PACKEDORDER_XBGR = 5,
    SDL_PACKEDORDER_BGRX = 6, SDL_PACKEDORDER_ABGR = 7, SDL_PACKEDORDER_BGRA = 8
type
  enum_SDL_ArrayOrder* {.size: sizeof(cuint).} = enum
    SDL_ARRAYORDER_NONE = 0, SDL_ARRAYORDER_RGB = 1, SDL_ARRAYORDER_RGBA = 2,
    SDL_ARRAYORDER_ARGB = 3, SDL_ARRAYORDER_BGR = 4, SDL_ARRAYORDER_BGRA = 5,
    SDL_ARRAYORDER_ABGR = 6
type
  enum_SDL_PackedLayout* {.size: sizeof(cuint).} = enum
    SDL_PACKEDLAYOUT_NONE = 0, SDL_PACKEDLAYOUT_332 = 1,
    SDL_PACKEDLAYOUT_4444 = 2, SDL_PACKEDLAYOUT_1555 = 3,
    SDL_PACKEDLAYOUT_5551 = 4, SDL_PACKEDLAYOUT_565 = 5,
    SDL_PACKEDLAYOUT_8888 = 6, SDL_PACKEDLAYOUT_2101010 = 7,
    SDL_PACKEDLAYOUT_1010102 = 8
type
  enum_SDL_PixelFormat* {.size: sizeof(cuint).} = enum
    SDL_PIXELFORMAT_UNKNOWN = 0, SDL_PIXELFORMAT_INDEX1LSB = 286261504,
    SDL_PIXELFORMAT_INDEX1MSB = 287310080,
    SDL_PIXELFORMAT_INDEX4LSB = 303039488,
    SDL_PIXELFORMAT_INDEX4MSB = 304088064, SDL_PIXELFORMAT_INDEX8 = 318769153,
    SDL_PIXELFORMAT_RGB332 = 336660481, SDL_PIXELFORMAT_XRGB4444 = 353504258,
    SDL_PIXELFORMAT_XRGB1555 = 353570562, SDL_PIXELFORMAT_RGB565 = 353701890,
    SDL_PIXELFORMAT_ARGB4444 = 355602434, SDL_PIXELFORMAT_ARGB1555 = 355667970,
    SDL_PIXELFORMAT_RGBA4444 = 356651010, SDL_PIXELFORMAT_RGBA5551 = 356782082,
    SDL_PIXELFORMAT_XBGR4444 = 357698562, SDL_PIXELFORMAT_XBGR1555 = 357764866,
    SDL_PIXELFORMAT_BGR565 = 357896194, SDL_PIXELFORMAT_ABGR4444 = 359796738,
    SDL_PIXELFORMAT_ABGR1555 = 359862274, SDL_PIXELFORMAT_BGRA4444 = 360845314,
    SDL_PIXELFORMAT_BGRA5551 = 360976386, SDL_PIXELFORMAT_XRGB8888 = 370546692,
    SDL_PIXELFORMAT_XRGB2101010 = 370614276,
    SDL_PIXELFORMAT_RGBX8888 = 371595268, SDL_PIXELFORMAT_ARGB8888 = 372645892,
    SDL_PIXELFORMAT_ARGB2101010 = 372711428,
    SDL_PIXELFORMAT_RGBA8888 = 373694468, SDL_PIXELFORMAT_XBGR8888 = 374740996,
    SDL_PIXELFORMAT_XBGR2101010 = 374808580,
    SDL_PIXELFORMAT_BGRX8888 = 375789572, SDL_PIXELFORMAT_ABGR8888 = 376840196,
    SDL_PIXELFORMAT_ABGR2101010 = 376905732,
    SDL_PIXELFORMAT_BGRA8888 = 377888772, SDL_PIXELFORMAT_RGB24 = 386930691,
    SDL_PIXELFORMAT_BGR24 = 390076419, SDL_PIXELFORMAT_RGB48 = 403714054,
    SDL_PIXELFORMAT_RGBA64 = 404766728, SDL_PIXELFORMAT_ARGB64 = 405815304,
    SDL_PIXELFORMAT_BGR48 = 406859782, SDL_PIXELFORMAT_BGRA64 = 407912456,
    SDL_PIXELFORMAT_ABGR64 = 408961032, SDL_PIXELFORMAT_RGB48_FLOAT = 437268486,
    SDL_PIXELFORMAT_RGBA64_FLOAT = 438321160,
    SDL_PIXELFORMAT_ARGB64_FLOAT = 439369736,
    SDL_PIXELFORMAT_BGR48_FLOAT = 440414214,
    SDL_PIXELFORMAT_BGRA64_FLOAT = 441466888,
    SDL_PIXELFORMAT_ABGR64_FLOAT = 442515464,
    SDL_PIXELFORMAT_RGB96_FLOAT = 454057996,
    SDL_PIXELFORMAT_RGBA128_FLOAT = 455114768,
    SDL_PIXELFORMAT_ARGB128_FLOAT = 456163344,
    SDL_PIXELFORMAT_BGR96_FLOAT = 457203724,
    SDL_PIXELFORMAT_BGRA128_FLOAT = 458260496,
    SDL_PIXELFORMAT_ABGR128_FLOAT = 459309072,
    SDL_PIXELFORMAT_INDEX2LSB = 470811136,
    SDL_PIXELFORMAT_INDEX2MSB = 471859712,
    SDL_PIXELFORMAT_EXTERNAL_OES = 542328143, SDL_PIXELFORMAT_P010 = 808530000,
    SDL_PIXELFORMAT_NV21 = 825382478, SDL_PIXELFORMAT_NV12 = 842094158,
    SDL_PIXELFORMAT_YV12 = 842094169, SDL_PIXELFORMAT_YUY2 = 844715353,
    SDL_PIXELFORMAT_YVYU = 1431918169, SDL_PIXELFORMAT_IYUV = 1448433993,
    SDL_PIXELFORMAT_UYVY = 1498831189
const
  SDL_PIXELFORMAT_RGBA32* = enum_SDL_PixelFormat.SDL_PIXELFORMAT_ABGR8888
const
  SDL_PIXELFORMAT_ARGB32* = enum_SDL_PixelFormat.SDL_PIXELFORMAT_BGRA8888
const
  SDL_PIXELFORMAT_BGRA32* = enum_SDL_PixelFormat.SDL_PIXELFORMAT_ARGB8888
const
  SDL_PIXELFORMAT_ABGR32* = enum_SDL_PixelFormat.SDL_PIXELFORMAT_RGBA8888
const
  SDL_PIXELFORMAT_RGBX32* = enum_SDL_PixelFormat.SDL_PIXELFORMAT_XBGR8888
const
  SDL_PIXELFORMAT_XRGB32* = enum_SDL_PixelFormat.SDL_PIXELFORMAT_BGRX8888
const
  SDL_PIXELFORMAT_BGRX32* = enum_SDL_PixelFormat.SDL_PIXELFORMAT_XRGB8888
const
  SDL_PIXELFORMAT_XBGR32* = enum_SDL_PixelFormat.SDL_PIXELFORMAT_RGBX8888
type
  enum_SDL_ColorType* {.size: sizeof(cuint).} = enum
    SDL_COLOR_TYPE_UNKNOWN = 0, SDL_COLOR_TYPE_RGB = 1, SDL_COLOR_TYPE_YCBCR = 2
type
  enum_SDL_ColorRange* {.size: sizeof(cuint).} = enum
    SDL_COLOR_RANGE_UNKNOWN = 0, SDL_COLOR_RANGE_LIMITED = 1,
    SDL_COLOR_RANGE_FULL = 2
type
  enum_SDL_ColorPrimaries* {.size: sizeof(cuint).} = enum
    SDL_COLOR_PRIMARIES_UNKNOWN = 0, SDL_COLOR_PRIMARIES_BT709 = 1,
    SDL_COLOR_PRIMARIES_UNSPECIFIED = 2, SDL_COLOR_PRIMARIES_BT470M = 4,
    SDL_COLOR_PRIMARIES_BT470BG = 5, SDL_COLOR_PRIMARIES_BT601 = 6,
    SDL_COLOR_PRIMARIES_SMPTE240 = 7, SDL_COLOR_PRIMARIES_GENERIC_FILM = 8,
    SDL_COLOR_PRIMARIES_BT2020 = 9, SDL_COLOR_PRIMARIES_XYZ = 10,
    SDL_COLOR_PRIMARIES_SMPTE431 = 11, SDL_COLOR_PRIMARIES_SMPTE432 = 12,
    SDL_COLOR_PRIMARIES_EBU3213 = 22, SDL_COLOR_PRIMARIES_CUSTOM = 31
type
  enum_SDL_TransferCharacteristics* {.size: sizeof(cuint).} = enum
    SDL_TRANSFER_CHARACTERISTICS_UNKNOWN = 0,
    SDL_TRANSFER_CHARACTERISTICS_BT709 = 1,
    SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2,
    SDL_TRANSFER_CHARACTERISTICS_GAMMA22 = 4,
    SDL_TRANSFER_CHARACTERISTICS_GAMMA28 = 5,
    SDL_TRANSFER_CHARACTERISTICS_BT601 = 6,
    SDL_TRANSFER_CHARACTERISTICS_SMPTE240 = 7,
    SDL_TRANSFER_CHARACTERISTICS_LINEAR = 8,
    SDL_TRANSFER_CHARACTERISTICS_LOG100 = 9,
    SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 = 10,
    SDL_TRANSFER_CHARACTERISTICS_IEC61966 = 11,
    SDL_TRANSFER_CHARACTERISTICS_BT1361 = 12,
    SDL_TRANSFER_CHARACTERISTICS_SRGB = 13,
    SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT = 14,
    SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT = 15,
    SDL_TRANSFER_CHARACTERISTICS_PQ = 16,
    SDL_TRANSFER_CHARACTERISTICS_SMPTE428 = 17,
    SDL_TRANSFER_CHARACTERISTICS_HLG = 18,
    SDL_TRANSFER_CHARACTERISTICS_CUSTOM = 31
type
  enum_SDL_MatrixCoefficients* {.size: sizeof(cuint).} = enum
    SDL_MATRIX_COEFFICIENTS_IDENTITY = 0, SDL_MATRIX_COEFFICIENTS_BT709 = 1,
    SDL_MATRIX_COEFFICIENTS_UNSPECIFIED = 2, SDL_MATRIX_COEFFICIENTS_FCC = 4,
    SDL_MATRIX_COEFFICIENTS_BT470BG = 5, SDL_MATRIX_COEFFICIENTS_BT601 = 6,
    SDL_MATRIX_COEFFICIENTS_SMPTE240 = 7, SDL_MATRIX_COEFFICIENTS_YCGCO = 8,
    SDL_MATRIX_COEFFICIENTS_BT2020_NCL = 9,
    SDL_MATRIX_COEFFICIENTS_BT2020_CL = 10,
    SDL_MATRIX_COEFFICIENTS_SMPTE2085 = 11,
    SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL = 12,
    SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL = 13,
    SDL_MATRIX_COEFFICIENTS_ICTCP = 14, SDL_MATRIX_COEFFICIENTS_CUSTOM = 31
type
  enum_SDL_ChromaLocation* {.size: sizeof(cuint).} = enum
    SDL_CHROMA_LOCATION_NONE = 0, SDL_CHROMA_LOCATION_LEFT = 1,
    SDL_CHROMA_LOCATION_CENTER = 2, SDL_CHROMA_LOCATION_TOPLEFT = 3
type
  enum_SDL_Colorspace* {.size: sizeof(cuint).} = enum
    SDL_COLORSPACE_UNKNOWN = 0, SDL_COLORSPACE_SRGB_LINEAR = 301991168,
    SDL_COLORSPACE_SRGB = 301991328, SDL_COLORSPACE_HDR10 = 301999616,
    SDL_COLORSPACE_BT709_LIMITED = 554697761,
    SDL_COLORSPACE_BT601_LIMITED = 554703046,
    SDL_COLORSPACE_BT2020_LIMITED = 554706441, SDL_COLORSPACE_JPEG = 570426566,
    SDL_COLORSPACE_BT709_FULL = 571474977,
    SDL_COLORSPACE_BT601_FULL = 571480262,
    SDL_COLORSPACE_BT2020_FULL = 571483657
const
  SDL_COLORSPACE_RGB_DEFAULT* = enum_SDL_Colorspace.SDL_COLORSPACE_SRGB
const
  SDL_COLORSPACE_YUV_DEFAULT* = enum_SDL_Colorspace.SDL_COLORSPACE_JPEG
type
  enum_SDL_ScaleMode* {.size: sizeof(cuint).} = enum
    SDL_SCALEMODE_NEAREST_enumval = 0, SDL_SCALEMODE_LINEAR_enumval = 1
type
  enum_SDL_FlipMode* {.size: sizeof(cuint).} = enum
    SDL_FLIP_NONE = 0, SDL_FLIP_HORIZONTAL = 1, SDL_FLIP_VERTICAL = 2
type
  enum_SDL_CameraPosition* {.size: sizeof(cuint).} = enum
    SDL_CAMERA_POSITION_UNKNOWN = 0, SDL_CAMERA_POSITION_FRONT_FACING = 1,
    SDL_CAMERA_POSITION_BACK_FACING = 2
type
  enum_SDL_SystemTheme* {.size: sizeof(cuint).} = enum
    SDL_SYSTEM_THEME_UNKNOWN = 0, SDL_SYSTEM_THEME_LIGHT = 1,
    SDL_SYSTEM_THEME_DARK = 2
type
  enum_SDL_DisplayOrientation* {.size: sizeof(cuint).} = enum
    SDL_ORIENTATION_UNKNOWN = 0, SDL_ORIENTATION_LANDSCAPE = 1,
    SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2, SDL_ORIENTATION_PORTRAIT = 3,
    SDL_ORIENTATION_PORTRAIT_FLIPPED = 4
type
  enum_SDL_FlashOperation* {.size: sizeof(cuint).} = enum
    SDL_FLASH_CANCEL = 0, SDL_FLASH_BRIEFLY = 1, SDL_FLASH_UNTIL_FOCUSED = 2
type
  enum_SDL_GLAttr* {.size: sizeof(cuint).} = enum
    SDL_GL_RED_SIZE = 0, SDL_GL_GREEN_SIZE = 1, SDL_GL_BLUE_SIZE = 2,
    SDL_GL_ALPHA_SIZE = 3, SDL_GL_BUFFER_SIZE = 4, SDL_GL_DOUBLEBUFFER = 5,
    SDL_GL_DEPTH_SIZE = 6, SDL_GL_STENCIL_SIZE = 7, SDL_GL_ACCUM_RED_SIZE = 8,
    SDL_GL_ACCUM_GREEN_SIZE = 9, SDL_GL_ACCUM_BLUE_SIZE = 10,
    SDL_GL_ACCUM_ALPHA_SIZE = 11, SDL_GL_STEREO = 12,
    SDL_GL_MULTISAMPLEBUFFERS = 13, SDL_GL_MULTISAMPLESAMPLES = 14,
    SDL_GL_ACCELERATED_VISUAL = 15, SDL_GL_RETAINED_BACKING = 16,
    SDL_GL_CONTEXT_MAJOR_VERSION = 17, SDL_GL_CONTEXT_MINOR_VERSION = 18,
    SDL_GL_CONTEXT_FLAGS = 19, SDL_GL_CONTEXT_PROFILE_MASK = 20,
    SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 21,
    SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 22, SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 23,
    SDL_GL_CONTEXT_RESET_NOTIFICATION_enumval = 24,
    SDL_GL_CONTEXT_NO_ERROR = 25, SDL_GL_FLOATBUFFERS = 26,
    SDL_GL_EGL_PLATFORM = 27
type
  enum_SDL_HitTestResult* {.size: sizeof(cuint).} = enum
    SDL_HITTEST_NORMAL = 0, SDL_HITTEST_DRAGGABLE = 1,
    SDL_HITTEST_RESIZE_TOPLEFT = 2, SDL_HITTEST_RESIZE_TOP = 3,
    SDL_HITTEST_RESIZE_TOPRIGHT = 4, SDL_HITTEST_RESIZE_RIGHT = 5,
    SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6, SDL_HITTEST_RESIZE_BOTTOM = 7,
    SDL_HITTEST_RESIZE_BOTTOMLEFT = 8, SDL_HITTEST_RESIZE_LEFT = 9
type
  enum_SDL_PowerState* {.size: sizeof(cint).} = enum
    SDL_POWERSTATE_ERROR = -1, SDL_POWERSTATE_UNKNOWN = 0,
    SDL_POWERSTATE_ON_BATTERY = 1, SDL_POWERSTATE_NO_BATTERY = 2,
    SDL_POWERSTATE_CHARGING = 3, SDL_POWERSTATE_CHARGED = 4
type
  enum_SDL_SensorType* {.size: sizeof(cint).} = enum
    SDL_SENSOR_INVALID = -1, SDL_SENSOR_UNKNOWN = 0, SDL_SENSOR_ACCEL = 1,
    SDL_SENSOR_GYRO = 2, SDL_SENSOR_ACCEL_L = 3, SDL_SENSOR_GYRO_L = 4,
    SDL_SENSOR_ACCEL_R = 5, SDL_SENSOR_GYRO_R = 6
type
  enum_SDL_JoystickType* {.size: sizeof(cuint).} = enum
    SDL_JOYSTICK_TYPE_UNKNOWN = 0, SDL_JOYSTICK_TYPE_GAMEPAD = 1,
    SDL_JOYSTICK_TYPE_WHEEL = 2, SDL_JOYSTICK_TYPE_ARCADE_STICK = 3,
    SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4, SDL_JOYSTICK_TYPE_DANCE_PAD = 5,
    SDL_JOYSTICK_TYPE_GUITAR = 6, SDL_JOYSTICK_TYPE_DRUM_KIT = 7,
    SDL_JOYSTICK_TYPE_ARCADE_PAD = 8, SDL_JOYSTICK_TYPE_THROTTLE = 9,
    SDL_JOYSTICK_TYPE_COUNT = 10
type
  enum_SDL_JoystickConnectionState* {.size: sizeof(cint).} = enum
    SDL_JOYSTICK_CONNECTION_INVALID = -1, SDL_JOYSTICK_CONNECTION_UNKNOWN = 0,
    SDL_JOYSTICK_CONNECTION_WIRED = 1, SDL_JOYSTICK_CONNECTION_WIRELESS = 2
type
  enum_SDL_GamepadType* {.size: sizeof(cuint).} = enum
    SDL_GAMEPAD_TYPE_UNKNOWN = 0, SDL_GAMEPAD_TYPE_STANDARD = 1,
    SDL_GAMEPAD_TYPE_XBOX360 = 2, SDL_GAMEPAD_TYPE_XBOXONE = 3,
    SDL_GAMEPAD_TYPE_PS3 = 4, SDL_GAMEPAD_TYPE_PS4 = 5,
    SDL_GAMEPAD_TYPE_PS5 = 6, SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO = 7,
    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = 8,
    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = 9,
    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = 10,
    SDL_GAMEPAD_TYPE_COUNT = 11
type
  enum_SDL_GamepadButton* {.size: sizeof(cint).} = enum
    SDL_GAMEPAD_BUTTON_INVALID = -1, SDL_GAMEPAD_BUTTON_SOUTH = 0,
    SDL_GAMEPAD_BUTTON_EAST = 1, SDL_GAMEPAD_BUTTON_WEST = 2,
    SDL_GAMEPAD_BUTTON_NORTH = 3, SDL_GAMEPAD_BUTTON_BACK = 4,
    SDL_GAMEPAD_BUTTON_GUIDE = 5, SDL_GAMEPAD_BUTTON_START = 6,
    SDL_GAMEPAD_BUTTON_LEFT_STICK = 7, SDL_GAMEPAD_BUTTON_RIGHT_STICK = 8,
    SDL_GAMEPAD_BUTTON_LEFT_SHOULDER = 9,
    SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER = 10, SDL_GAMEPAD_BUTTON_DPAD_UP = 11,
    SDL_GAMEPAD_BUTTON_DPAD_DOWN = 12, SDL_GAMEPAD_BUTTON_DPAD_LEFT = 13,
    SDL_GAMEPAD_BUTTON_DPAD_RIGHT = 14, SDL_GAMEPAD_BUTTON_MISC1 = 15,
    SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 = 16, SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 = 17,
    SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 = 18, SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 = 19,
    SDL_GAMEPAD_BUTTON_TOUCHPAD = 20, SDL_GAMEPAD_BUTTON_MISC2 = 21,
    SDL_GAMEPAD_BUTTON_MISC3 = 22, SDL_GAMEPAD_BUTTON_MISC4 = 23,
    SDL_GAMEPAD_BUTTON_MISC5 = 24, SDL_GAMEPAD_BUTTON_MISC6 = 25,
    SDL_GAMEPAD_BUTTON_COUNT = 26
type
  enum_SDL_GamepadButtonLabel* {.size: sizeof(cuint).} = enum
    SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN = 0, SDL_GAMEPAD_BUTTON_LABEL_A = 1,
    SDL_GAMEPAD_BUTTON_LABEL_B = 2, SDL_GAMEPAD_BUTTON_LABEL_X = 3,
    SDL_GAMEPAD_BUTTON_LABEL_Y = 4, SDL_GAMEPAD_BUTTON_LABEL_CROSS = 5,
    SDL_GAMEPAD_BUTTON_LABEL_CIRCLE = 6, SDL_GAMEPAD_BUTTON_LABEL_SQUARE = 7,
    SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE = 8
type
  enum_SDL_GamepadAxis* {.size: sizeof(cint).} = enum
    SDL_GAMEPAD_AXIS_INVALID = -1, SDL_GAMEPAD_AXIS_LEFTX = 0,
    SDL_GAMEPAD_AXIS_LEFTY = 1, SDL_GAMEPAD_AXIS_RIGHTX = 2,
    SDL_GAMEPAD_AXIS_RIGHTY = 3, SDL_GAMEPAD_AXIS_LEFT_TRIGGER = 4,
    SDL_GAMEPAD_AXIS_RIGHT_TRIGGER = 5, SDL_GAMEPAD_AXIS_COUNT = 6
type
  enum_SDL_GamepadBindingType* {.size: sizeof(cuint).} = enum
    SDL_GAMEPAD_BINDTYPE_NONE = 0, SDL_GAMEPAD_BINDTYPE_BUTTON = 1,
    SDL_GAMEPAD_BINDTYPE_AXIS = 2, SDL_GAMEPAD_BINDTYPE_HAT = 3
type
  enum_SDL_Scancode* {.size: sizeof(cuint).} = enum
    SDL_SCANCODE_UNKNOWN = 0, SDL_SCANCODE_A = 4, SDL_SCANCODE_B = 5,
    SDL_SCANCODE_C = 6, SDL_SCANCODE_D = 7, SDL_SCANCODE_E = 8,
    SDL_SCANCODE_F = 9, SDL_SCANCODE_G = 10, SDL_SCANCODE_H = 11,
    SDL_SCANCODE_I = 12, SDL_SCANCODE_J = 13, SDL_SCANCODE_K = 14,
    SDL_SCANCODE_L = 15, SDL_SCANCODE_M = 16, SDL_SCANCODE_N = 17,
    SDL_SCANCODE_O = 18, SDL_SCANCODE_P = 19, SDL_SCANCODE_Q = 20,
    SDL_SCANCODE_R = 21, SDL_SCANCODE_S = 22, SDL_SCANCODE_T = 23,
    SDL_SCANCODE_U = 24, SDL_SCANCODE_V = 25, SDL_SCANCODE_W = 26,
    SDL_SCANCODE_X = 27, SDL_SCANCODE_Y = 28, SDL_SCANCODE_Z = 29,
    SDL_SCANCODE_1 = 30, SDL_SCANCODE_2 = 31, SDL_SCANCODE_3 = 32,
    SDL_SCANCODE_4 = 33, SDL_SCANCODE_5 = 34, SDL_SCANCODE_6 = 35,
    SDL_SCANCODE_7 = 36, SDL_SCANCODE_8 = 37, SDL_SCANCODE_9 = 38,
    SDL_SCANCODE_0 = 39, SDL_SCANCODE_RETURN = 40, SDL_SCANCODE_ESCAPE = 41,
    SDL_SCANCODE_BACKSPACE = 42, SDL_SCANCODE_TAB = 43, SDL_SCANCODE_SPACE = 44,
    SDL_SCANCODE_MINUS = 45, SDL_SCANCODE_EQUALS = 46,
    SDL_SCANCODE_LEFTBRACKET = 47, SDL_SCANCODE_RIGHTBRACKET = 48,
    SDL_SCANCODE_BACKSLASH = 49, SDL_SCANCODE_NONUSHASH = 50,
    SDL_SCANCODE_SEMICOLON = 51, SDL_SCANCODE_APOSTROPHE = 52,
    SDL_SCANCODE_GRAVE = 53, SDL_SCANCODE_COMMA = 54, SDL_SCANCODE_PERIOD = 55,
    SDL_SCANCODE_SLASH = 56, SDL_SCANCODE_CAPSLOCK = 57, SDL_SCANCODE_F1 = 58,
    SDL_SCANCODE_F2 = 59, SDL_SCANCODE_F3 = 60, SDL_SCANCODE_F4 = 61,
    SDL_SCANCODE_F5 = 62, SDL_SCANCODE_F6 = 63, SDL_SCANCODE_F7 = 64,
    SDL_SCANCODE_F8 = 65, SDL_SCANCODE_F9 = 66, SDL_SCANCODE_F10 = 67,
    SDL_SCANCODE_F11 = 68, SDL_SCANCODE_F12 = 69, SDL_SCANCODE_PRINTSCREEN = 70,
    SDL_SCANCODE_SCROLLLOCK = 71, SDL_SCANCODE_PAUSE = 72,
    SDL_SCANCODE_INSERT = 73, SDL_SCANCODE_HOME = 74, SDL_SCANCODE_PAGEUP = 75,
    SDL_SCANCODE_DELETE = 76, SDL_SCANCODE_END = 77, SDL_SCANCODE_PAGEDOWN = 78,
    SDL_SCANCODE_RIGHT = 79, SDL_SCANCODE_LEFT = 80, SDL_SCANCODE_DOWN = 81,
    SDL_SCANCODE_UP = 82, SDL_SCANCODE_NUMLOCKCLEAR = 83,
    SDL_SCANCODE_KP_DIVIDE = 84, SDL_SCANCODE_KP_MULTIPLY = 85,
    SDL_SCANCODE_KP_MINUS = 86, SDL_SCANCODE_KP_PLUS = 87,
    SDL_SCANCODE_KP_ENTER = 88, SDL_SCANCODE_KP_1 = 89, SDL_SCANCODE_KP_2 = 90,
    SDL_SCANCODE_KP_3 = 91, SDL_SCANCODE_KP_4 = 92, SDL_SCANCODE_KP_5 = 93,
    SDL_SCANCODE_KP_6 = 94, SDL_SCANCODE_KP_7 = 95, SDL_SCANCODE_KP_8 = 96,
    SDL_SCANCODE_KP_9 = 97, SDL_SCANCODE_KP_0 = 98, SDL_SCANCODE_KP_PERIOD = 99,
    SDL_SCANCODE_NONUSBACKSLASH = 100, SDL_SCANCODE_APPLICATION = 101,
    SDL_SCANCODE_POWER = 102, SDL_SCANCODE_KP_EQUALS = 103,
    SDL_SCANCODE_F13 = 104, SDL_SCANCODE_F14 = 105, SDL_SCANCODE_F15 = 106,
    SDL_SCANCODE_F16 = 107, SDL_SCANCODE_F17 = 108, SDL_SCANCODE_F18 = 109,
    SDL_SCANCODE_F19 = 110, SDL_SCANCODE_F20 = 111, SDL_SCANCODE_F21 = 112,
    SDL_SCANCODE_F22 = 113, SDL_SCANCODE_F23 = 114, SDL_SCANCODE_F24 = 115,
    SDL_SCANCODE_EXECUTE = 116, SDL_SCANCODE_HELP = 117,
    SDL_SCANCODE_MENU = 118, SDL_SCANCODE_SELECT = 119, SDL_SCANCODE_STOP = 120,
    SDL_SCANCODE_AGAIN = 121, SDL_SCANCODE_UNDO = 122, SDL_SCANCODE_CUT = 123,
    SDL_SCANCODE_COPY = 124, SDL_SCANCODE_PASTE = 125, SDL_SCANCODE_FIND = 126,
    SDL_SCANCODE_MUTE = 127, SDL_SCANCODE_VOLUMEUP = 128,
    SDL_SCANCODE_VOLUMEDOWN = 129, SDL_SCANCODE_KP_COMMA = 133,
    SDL_SCANCODE_KP_EQUALSAS400 = 134, SDL_SCANCODE_INTERNATIONAL1 = 135,
    SDL_SCANCODE_INTERNATIONAL2 = 136, SDL_SCANCODE_INTERNATIONAL3 = 137,
    SDL_SCANCODE_INTERNATIONAL4 = 138, SDL_SCANCODE_INTERNATIONAL5 = 139,
    SDL_SCANCODE_INTERNATIONAL6 = 140, SDL_SCANCODE_INTERNATIONAL7 = 141,
    SDL_SCANCODE_INTERNATIONAL8 = 142, SDL_SCANCODE_INTERNATIONAL9 = 143,
    SDL_SCANCODE_LANG1 = 144, SDL_SCANCODE_LANG2 = 145,
    SDL_SCANCODE_LANG3 = 146, SDL_SCANCODE_LANG4 = 147,
    SDL_SCANCODE_LANG5 = 148, SDL_SCANCODE_LANG6 = 149,
    SDL_SCANCODE_LANG7 = 150, SDL_SCANCODE_LANG8 = 151,
    SDL_SCANCODE_LANG9 = 152, SDL_SCANCODE_ALTERASE = 153,
    SDL_SCANCODE_SYSREQ = 154, SDL_SCANCODE_CANCEL = 155,
    SDL_SCANCODE_CLEAR = 156, SDL_SCANCODE_PRIOR = 157,
    SDL_SCANCODE_RETURN2 = 158, SDL_SCANCODE_SEPARATOR = 159,
    SDL_SCANCODE_OUT = 160, SDL_SCANCODE_OPER = 161,
    SDL_SCANCODE_CLEARAGAIN = 162, SDL_SCANCODE_CRSEL = 163,
    SDL_SCANCODE_EXSEL = 164, SDL_SCANCODE_KP_00 = 176,
    SDL_SCANCODE_KP_000 = 177, SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
    SDL_SCANCODE_DECIMALSEPARATOR = 179, SDL_SCANCODE_CURRENCYUNIT = 180,
    SDL_SCANCODE_CURRENCYSUBUNIT = 181, SDL_SCANCODE_KP_LEFTPAREN = 182,
    SDL_SCANCODE_KP_RIGHTPAREN = 183, SDL_SCANCODE_KP_LEFTBRACE = 184,
    SDL_SCANCODE_KP_RIGHTBRACE = 185, SDL_SCANCODE_KP_TAB = 186,
    SDL_SCANCODE_KP_BACKSPACE = 187, SDL_SCANCODE_KP_A = 188,
    SDL_SCANCODE_KP_B = 189, SDL_SCANCODE_KP_C = 190, SDL_SCANCODE_KP_D = 191,
    SDL_SCANCODE_KP_E = 192, SDL_SCANCODE_KP_F = 193, SDL_SCANCODE_KP_XOR = 194,
    SDL_SCANCODE_KP_POWER = 195, SDL_SCANCODE_KP_PERCENT = 196,
    SDL_SCANCODE_KP_LESS = 197, SDL_SCANCODE_KP_GREATER = 198,
    SDL_SCANCODE_KP_AMPERSAND = 199, SDL_SCANCODE_KP_DBLAMPERSAND = 200,
    SDL_SCANCODE_KP_VERTICALBAR = 201, SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
    SDL_SCANCODE_KP_COLON = 203, SDL_SCANCODE_KP_HASH = 204,
    SDL_SCANCODE_KP_SPACE = 205, SDL_SCANCODE_KP_AT = 206,
    SDL_SCANCODE_KP_EXCLAM = 207, SDL_SCANCODE_KP_MEMSTORE = 208,
    SDL_SCANCODE_KP_MEMRECALL = 209, SDL_SCANCODE_KP_MEMCLEAR = 210,
    SDL_SCANCODE_KP_MEMADD = 211, SDL_SCANCODE_KP_MEMSUBTRACT = 212,
    SDL_SCANCODE_KP_MEMMULTIPLY = 213, SDL_SCANCODE_KP_MEMDIVIDE = 214,
    SDL_SCANCODE_KP_PLUSMINUS = 215, SDL_SCANCODE_KP_CLEAR = 216,
    SDL_SCANCODE_KP_CLEARENTRY = 217, SDL_SCANCODE_KP_BINARY = 218,
    SDL_SCANCODE_KP_OCTAL = 219, SDL_SCANCODE_KP_DECIMAL = 220,
    SDL_SCANCODE_KP_HEXADECIMAL = 221, SDL_SCANCODE_LCTRL = 224,
    SDL_SCANCODE_LSHIFT = 225, SDL_SCANCODE_LALT = 226, SDL_SCANCODE_LGUI = 227,
    SDL_SCANCODE_RCTRL = 228, SDL_SCANCODE_RSHIFT = 229,
    SDL_SCANCODE_RALT = 230, SDL_SCANCODE_RGUI = 231, SDL_SCANCODE_MODE = 257,
    SDL_SCANCODE_SLEEP = 258, SDL_SCANCODE_WAKE = 259,
    SDL_SCANCODE_CHANNEL_INCREMENT = 260, SDL_SCANCODE_CHANNEL_DECREMENT = 261,
    SDL_SCANCODE_MEDIA_PLAY = 262, SDL_SCANCODE_MEDIA_PAUSE = 263,
    SDL_SCANCODE_MEDIA_RECORD = 264, SDL_SCANCODE_MEDIA_FAST_FORWARD = 265,
    SDL_SCANCODE_MEDIA_REWIND = 266, SDL_SCANCODE_MEDIA_NEXT_TRACK = 267,
    SDL_SCANCODE_MEDIA_PREVIOUS_TRACK = 268, SDL_SCANCODE_MEDIA_STOP = 269,
    SDL_SCANCODE_MEDIA_EJECT = 270, SDL_SCANCODE_MEDIA_PLAY_PAUSE = 271,
    SDL_SCANCODE_MEDIA_SELECT_enumval = 272, SDL_SCANCODE_AC_NEW = 273,
    SDL_SCANCODE_AC_OPEN = 274, SDL_SCANCODE_AC_CLOSE = 275,
    SDL_SCANCODE_AC_EXIT = 276, SDL_SCANCODE_AC_SAVE = 277,
    SDL_SCANCODE_AC_PRINT = 278, SDL_SCANCODE_AC_PROPERTIES = 279,
    SDL_SCANCODE_AC_SEARCH = 280, SDL_SCANCODE_AC_HOME = 281,
    SDL_SCANCODE_AC_BACK = 282, SDL_SCANCODE_AC_FORWARD = 283,
    SDL_SCANCODE_AC_STOP = 284, SDL_SCANCODE_AC_REFRESH = 285,
    SDL_SCANCODE_AC_BOOKMARKS = 286, SDL_SCANCODE_SOFTLEFT = 287,
    SDL_SCANCODE_SOFTRIGHT = 288, SDL_SCANCODE_CALL = 289,
    SDL_SCANCODE_ENDCALL = 290, SDL_SCANCODE_RESERVED = 400,
    SDL_SCANCODE_COUNT = 512
type
  enum_SDL_TextInputType* {.size: sizeof(cuint).} = enum
    SDL_TEXTINPUT_TYPE_TEXT = 0, SDL_TEXTINPUT_TYPE_TEXT_NAME = 1,
    SDL_TEXTINPUT_TYPE_TEXT_EMAIL = 2, SDL_TEXTINPUT_TYPE_TEXT_USERNAME = 3,
    SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN = 4,
    SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE = 5, SDL_TEXTINPUT_TYPE_NUMBER = 6,
    SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN = 7,
    SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE = 8
type
  enum_SDL_Capitalization* {.size: sizeof(cuint).} = enum
    SDL_CAPITALIZE_NONE = 0, SDL_CAPITALIZE_SENTENCES = 1,
    SDL_CAPITALIZE_WORDS = 2, SDL_CAPITALIZE_LETTERS = 3
type
  enum_SDL_SystemCursor* {.size: sizeof(cuint).} = enum
    SDL_SYSTEM_CURSOR_DEFAULT = 0, SDL_SYSTEM_CURSOR_TEXT = 1,
    SDL_SYSTEM_CURSOR_WAIT = 2, SDL_SYSTEM_CURSOR_CROSSHAIR = 3,
    SDL_SYSTEM_CURSOR_PROGRESS = 4, SDL_SYSTEM_CURSOR_NWSE_RESIZE = 5,
    SDL_SYSTEM_CURSOR_NESW_RESIZE = 6, SDL_SYSTEM_CURSOR_EW_RESIZE = 7,
    SDL_SYSTEM_CURSOR_NS_RESIZE = 8, SDL_SYSTEM_CURSOR_MOVE = 9,
    SDL_SYSTEM_CURSOR_NOT_ALLOWED = 10, SDL_SYSTEM_CURSOR_POINTER = 11,
    SDL_SYSTEM_CURSOR_NW_RESIZE = 12, SDL_SYSTEM_CURSOR_N_RESIZE = 13,
    SDL_SYSTEM_CURSOR_NE_RESIZE = 14, SDL_SYSTEM_CURSOR_E_RESIZE = 15,
    SDL_SYSTEM_CURSOR_SE_RESIZE = 16, SDL_SYSTEM_CURSOR_S_RESIZE = 17,
    SDL_SYSTEM_CURSOR_SW_RESIZE = 18, SDL_SYSTEM_CURSOR_W_RESIZE = 19,
    SDL_SYSTEM_CURSOR_COUNT = 20
type
  enum_SDL_MouseWheelDirection* {.size: sizeof(cuint).} = enum
    SDL_MOUSEWHEEL_NORMAL = 0, SDL_MOUSEWHEEL_FLIPPED = 1
type
  enum_SDL_PenAxis* {.size: sizeof(cuint).} = enum
    SDL_PEN_AXIS_PRESSURE = 0, SDL_PEN_AXIS_XTILT = 1, SDL_PEN_AXIS_YTILT = 2,
    SDL_PEN_AXIS_DISTANCE = 3, SDL_PEN_AXIS_ROTATION = 4,
    SDL_PEN_AXIS_SLIDER = 5, SDL_PEN_AXIS_TANGENTIAL_PRESSURE = 6,
    SDL_PEN_AXIS_COUNT = 7
type
  enum_SDL_TouchDeviceType* {.size: sizeof(cint).} = enum
    SDL_TOUCH_DEVICE_INVALID = -1, SDL_TOUCH_DEVICE_DIRECT = 0,
    SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1,
    SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2
type
  enum_SDL_EventType* {.size: sizeof(cuint).} = enum
    SDL_EVENT_FIRST = 0, SDL_EVENT_QUIT = 256, SDL_EVENT_TERMINATING = 257,
    SDL_EVENT_LOW_MEMORY = 258, SDL_EVENT_WILL_ENTER_BACKGROUND = 259,
    SDL_EVENT_DID_ENTER_BACKGROUND = 260, SDL_EVENT_WILL_ENTER_FOREGROUND = 261,
    SDL_EVENT_DID_ENTER_FOREGROUND = 262, SDL_EVENT_LOCALE_CHANGED = 263,
    SDL_EVENT_SYSTEM_THEME_CHANGED = 264, SDL_EVENT_DISPLAY_ORIENTATION = 337,
    SDL_EVENT_DISPLAY_ADDED = 338, SDL_EVENT_DISPLAY_REMOVED = 339,
    SDL_EVENT_DISPLAY_MOVED = 340, SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED = 341,
    SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED = 342,
    SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED = 343, SDL_EVENT_WINDOW_SHOWN = 514,
    SDL_EVENT_WINDOW_HIDDEN = 515, SDL_EVENT_WINDOW_EXPOSED = 516,
    SDL_EVENT_WINDOW_MOVED = 517, SDL_EVENT_WINDOW_RESIZED = 518,
    SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED = 519,
    SDL_EVENT_WINDOW_METAL_VIEW_RESIZED = 520, SDL_EVENT_WINDOW_MINIMIZED = 521,
    SDL_EVENT_WINDOW_MAXIMIZED = 522, SDL_EVENT_WINDOW_RESTORED = 523,
    SDL_EVENT_WINDOW_MOUSE_ENTER = 524, SDL_EVENT_WINDOW_MOUSE_LEAVE = 525,
    SDL_EVENT_WINDOW_FOCUS_GAINED = 526, SDL_EVENT_WINDOW_FOCUS_LOST = 527,
    SDL_EVENT_WINDOW_CLOSE_REQUESTED = 528, SDL_EVENT_WINDOW_HIT_TEST = 529,
    SDL_EVENT_WINDOW_ICCPROF_CHANGED = 530,
    SDL_EVENT_WINDOW_DISPLAY_CHANGED = 531,
    SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED = 532,
    SDL_EVENT_WINDOW_SAFE_AREA_CHANGED = 533, SDL_EVENT_WINDOW_OCCLUDED = 534,
    SDL_EVENT_WINDOW_ENTER_FULLSCREEN = 535,
    SDL_EVENT_WINDOW_LEAVE_FULLSCREEN = 536, SDL_EVENT_WINDOW_DESTROYED = 537,
    SDL_EVENT_WINDOW_HDR_STATE_CHANGED = 538, SDL_EVENT_KEY_DOWN = 768,
    SDL_EVENT_KEY_UP = 769, SDL_EVENT_TEXT_EDITING = 770,
    SDL_EVENT_TEXT_INPUT = 771, SDL_EVENT_KEYMAP_CHANGED = 772,
    SDL_EVENT_KEYBOARD_ADDED = 773, SDL_EVENT_KEYBOARD_REMOVED = 774,
    SDL_EVENT_TEXT_EDITING_CANDIDATES = 775, SDL_EVENT_MOUSE_MOTION = 1024,
    SDL_EVENT_MOUSE_BUTTON_DOWN = 1025, SDL_EVENT_MOUSE_BUTTON_UP = 1026,
    SDL_EVENT_MOUSE_WHEEL = 1027, SDL_EVENT_MOUSE_ADDED = 1028,
    SDL_EVENT_MOUSE_REMOVED = 1029, SDL_EVENT_JOYSTICK_AXIS_MOTION = 1536,
    SDL_EVENT_JOYSTICK_BALL_MOTION = 1537, SDL_EVENT_JOYSTICK_HAT_MOTION = 1538,
    SDL_EVENT_JOYSTICK_BUTTON_DOWN = 1539, SDL_EVENT_JOYSTICK_BUTTON_UP = 1540,
    SDL_EVENT_JOYSTICK_ADDED = 1541, SDL_EVENT_JOYSTICK_REMOVED = 1542,
    SDL_EVENT_JOYSTICK_BATTERY_UPDATED = 1543,
    SDL_EVENT_JOYSTICK_UPDATE_COMPLETE = 1544,
    SDL_EVENT_GAMEPAD_AXIS_MOTION = 1616, SDL_EVENT_GAMEPAD_BUTTON_DOWN = 1617,
    SDL_EVENT_GAMEPAD_BUTTON_UP = 1618, SDL_EVENT_GAMEPAD_ADDED = 1619,
    SDL_EVENT_GAMEPAD_REMOVED = 1620, SDL_EVENT_GAMEPAD_REMAPPED = 1621,
    SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN = 1622,
    SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION = 1623,
    SDL_EVENT_GAMEPAD_TOUCHPAD_UP = 1624,
    SDL_EVENT_GAMEPAD_SENSOR_UPDATE = 1625,
    SDL_EVENT_GAMEPAD_UPDATE_COMPLETE = 1626,
    SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED = 1627, SDL_EVENT_FINGER_DOWN = 1792,
    SDL_EVENT_FINGER_UP = 1793, SDL_EVENT_FINGER_MOTION = 1794,
    SDL_EVENT_CLIPBOARD_UPDATE = 2304, SDL_EVENT_DROP_FILE = 4096,
    SDL_EVENT_DROP_TEXT = 4097, SDL_EVENT_DROP_BEGIN = 4098,
    SDL_EVENT_DROP_COMPLETE = 4099, SDL_EVENT_DROP_POSITION = 4100,
    SDL_EVENT_AUDIO_DEVICE_ADDED = 4352, SDL_EVENT_AUDIO_DEVICE_REMOVED = 4353,
    SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED = 4354,
    SDL_EVENT_SENSOR_UPDATE = 4608, SDL_EVENT_PEN_PROXIMITY_IN = 4864,
    SDL_EVENT_PEN_PROXIMITY_OUT = 4865, SDL_EVENT_PEN_DOWN = 4866,
    SDL_EVENT_PEN_UP = 4867, SDL_EVENT_PEN_BUTTON_DOWN = 4868,
    SDL_EVENT_PEN_BUTTON_UP = 4869, SDL_EVENT_PEN_MOTION = 4870,
    SDL_EVENT_PEN_AXIS = 4871, SDL_EVENT_CAMERA_DEVICE_ADDED = 5120,
    SDL_EVENT_CAMERA_DEVICE_REMOVED = 5121,
    SDL_EVENT_CAMERA_DEVICE_APPROVED = 5122,
    SDL_EVENT_CAMERA_DEVICE_DENIED = 5123,
    SDL_EVENT_RENDER_TARGETS_RESET = 8192, SDL_EVENT_RENDER_DEVICE_RESET = 8193,
    SDL_EVENT_RENDER_DEVICE_LOST = 8194, SDL_EVENT_PRIVATE0 = 16384,
    SDL_EVENT_PRIVATE1 = 16385, SDL_EVENT_PRIVATE2 = 16386,
    SDL_EVENT_PRIVATE3 = 16387, SDL_EVENT_POLL_SENTINEL = 32512,
    SDL_EVENT_USER = 32768, SDL_EVENT_LAST = 65535,
    SDL_EVENT_ENUM_PADDING = 2147483647
const
  SDL_EVENT_DISPLAY_FIRST* = enum_SDL_EventType.SDL_EVENT_DISPLAY_ORIENTATION
const
  SDL_EVENT_DISPLAY_LAST* = enum_SDL_EventType.SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED
const
  SDL_EVENT_WINDOW_FIRST* = enum_SDL_EventType.SDL_EVENT_WINDOW_SHOWN
const
  SDL_EVENT_WINDOW_LAST* = enum_SDL_EventType.SDL_EVENT_WINDOW_HDR_STATE_CHANGED
type
  enum_SDL_EventAction* {.size: sizeof(cuint).} = enum
    SDL_ADDEVENT = 0, SDL_PEEKEVENT = 1, SDL_GETEVENT = 2
type
  enum_SDL_Folder* {.size: sizeof(cuint).} = enum
    SDL_FOLDER_HOME = 0, SDL_FOLDER_DESKTOP = 1, SDL_FOLDER_DOCUMENTS = 2,
    SDL_FOLDER_DOWNLOADS = 3, SDL_FOLDER_MUSIC = 4, SDL_FOLDER_PICTURES = 5,
    SDL_FOLDER_PUBLICSHARE = 6, SDL_FOLDER_SAVEDGAMES = 7,
    SDL_FOLDER_SCREENSHOTS = 8, SDL_FOLDER_TEMPLATES = 9,
    SDL_FOLDER_VIDEOS = 10, SDL_FOLDER_COUNT = 11
type
  enum_SDL_PathType* {.size: sizeof(cuint).} = enum
    SDL_PATHTYPE_NONE = 0, SDL_PATHTYPE_FILE = 1, SDL_PATHTYPE_DIRECTORY = 2,
    SDL_PATHTYPE_OTHER = 3
type
  enum_SDL_EnumerationResult* {.size: sizeof(cuint).} = enum
    SDL_ENUM_CONTINUE = 0, SDL_ENUM_SUCCESS = 1, SDL_ENUM_FAILURE = 2
type
  enum_SDL_GPUPrimitiveType* {.size: sizeof(cuint).} = enum
    SDL_GPU_PRIMITIVETYPE_TRIANGLELIST = 0,
    SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP = 1, SDL_GPU_PRIMITIVETYPE_LINELIST = 2,
    SDL_GPU_PRIMITIVETYPE_LINESTRIP = 3, SDL_GPU_PRIMITIVETYPE_POINTLIST = 4
type
  enum_SDL_GPULoadOp* {.size: sizeof(cuint).} = enum
    SDL_GPU_LOADOP_LOAD = 0, SDL_GPU_LOADOP_CLEAR = 1,
    SDL_GPU_LOADOP_DONT_CARE = 2
type
  enum_SDL_GPUStoreOp* {.size: sizeof(cuint).} = enum
    SDL_GPU_STOREOP_STORE = 0, SDL_GPU_STOREOP_DONT_CARE = 1,
    SDL_GPU_STOREOP_RESOLVE = 2, SDL_GPU_STOREOP_RESOLVE_AND_STORE = 3
type
  enum_SDL_GPUIndexElementSize* {.size: sizeof(cuint).} = enum
    SDL_GPU_INDEXELEMENTSIZE_16BIT = 0, SDL_GPU_INDEXELEMENTSIZE_32BIT = 1
type
  enum_SDL_GPUTextureFormat* {.size: sizeof(cuint).} = enum
    SDL_GPU_TEXTUREFORMAT_INVALID = 0, SDL_GPU_TEXTUREFORMAT_A8_UNORM = 1,
    SDL_GPU_TEXTUREFORMAT_R8_UNORM = 2, SDL_GPU_TEXTUREFORMAT_R8G8_UNORM = 3,
    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM = 4,
    SDL_GPU_TEXTUREFORMAT_R16_UNORM = 5, SDL_GPU_TEXTUREFORMAT_R16G16_UNORM = 6,
    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM = 7,
    SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM = 8,
    SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM = 9,
    SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM = 10,
    SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM = 11,
    SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM = 12,
    SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM = 13,
    SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM = 14,
    SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM = 15,
    SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM = 16,
    SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM = 17,
    SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM = 18,
    SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT = 19,
    SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT = 20,
    SDL_GPU_TEXTUREFORMAT_R8_SNORM = 21, SDL_GPU_TEXTUREFORMAT_R8G8_SNORM = 22,
    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM = 23,
    SDL_GPU_TEXTUREFORMAT_R16_SNORM = 24,
    SDL_GPU_TEXTUREFORMAT_R16G16_SNORM = 25,
    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM = 26,
    SDL_GPU_TEXTUREFORMAT_R16_FLOAT = 27,
    SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT = 28,
    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT = 29,
    SDL_GPU_TEXTUREFORMAT_R32_FLOAT = 30,
    SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT = 31,
    SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT = 32,
    SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT = 33,
    SDL_GPU_TEXTUREFORMAT_R8_UINT = 34, SDL_GPU_TEXTUREFORMAT_R8G8_UINT = 35,
    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT = 36,
    SDL_GPU_TEXTUREFORMAT_R16_UINT = 37, SDL_GPU_TEXTUREFORMAT_R16G16_UINT = 38,
    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT = 39,
    SDL_GPU_TEXTUREFORMAT_R32_UINT = 40, SDL_GPU_TEXTUREFORMAT_R32G32_UINT = 41,
    SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT = 42,
    SDL_GPU_TEXTUREFORMAT_R8_INT = 43, SDL_GPU_TEXTUREFORMAT_R8G8_INT = 44,
    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT = 45, SDL_GPU_TEXTUREFORMAT_R16_INT = 46,
    SDL_GPU_TEXTUREFORMAT_R16G16_INT = 47,
    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT = 48,
    SDL_GPU_TEXTUREFORMAT_R32_INT = 49, SDL_GPU_TEXTUREFORMAT_R32G32_INT = 50,
    SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT = 51,
    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB = 52,
    SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB = 53,
    SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB = 54,
    SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB = 55,
    SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB = 56,
    SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB = 57,
    SDL_GPU_TEXTUREFORMAT_D16_UNORM = 58, SDL_GPU_TEXTUREFORMAT_D24_UNORM = 59,
    SDL_GPU_TEXTUREFORMAT_D32_FLOAT = 60,
    SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT = 61,
    SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT = 62,
    SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM = 63,
    SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM = 64,
    SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM = 65,
    SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM = 66,
    SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM = 67,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM = 68,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM = 69,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM = 70,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM = 71,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM = 72,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM = 73,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM = 74,
    SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM = 75,
    SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM = 76,
    SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB = 77,
    SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB = 78,
    SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB = 79,
    SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB = 80,
    SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB = 81,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB = 82,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB = 83,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB = 84,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB = 85,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB = 86,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB = 87,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB = 88,
    SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB = 89,
    SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB = 90,
    SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT = 91,
    SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT = 92,
    SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT = 93,
    SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT = 94,
    SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT = 95,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT = 96,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT = 97,
    SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT = 98,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT = 99,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT = 100,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT = 101,
    SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT = 102,
    SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT = 103,
    SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT = 104
type
  enum_SDL_GPUTextureType* {.size: sizeof(cuint).} = enum
    SDL_GPU_TEXTURETYPE_2D = 0, SDL_GPU_TEXTURETYPE_2D_ARRAY = 1,
    SDL_GPU_TEXTURETYPE_3D = 2, SDL_GPU_TEXTURETYPE_CUBE = 3,
    SDL_GPU_TEXTURETYPE_CUBE_ARRAY = 4
type
  enum_SDL_GPUSampleCount* {.size: sizeof(cuint).} = enum
    SDL_GPU_SAMPLECOUNT_1 = 0, SDL_GPU_SAMPLECOUNT_2 = 1,
    SDL_GPU_SAMPLECOUNT_4 = 2, SDL_GPU_SAMPLECOUNT_8 = 3
type
  enum_SDL_GPUCubeMapFace* {.size: sizeof(cuint).} = enum
    SDL_GPU_CUBEMAPFACE_POSITIVEX = 0, SDL_GPU_CUBEMAPFACE_NEGATIVEX = 1,
    SDL_GPU_CUBEMAPFACE_POSITIVEY = 2, SDL_GPU_CUBEMAPFACE_NEGATIVEY = 3,
    SDL_GPU_CUBEMAPFACE_POSITIVEZ = 4, SDL_GPU_CUBEMAPFACE_NEGATIVEZ = 5
type
  enum_SDL_GPUTransferBufferUsage* {.size: sizeof(cuint).} = enum
    SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD = 0,
    SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD = 1
type
  enum_SDL_GPUShaderStage* {.size: sizeof(cuint).} = enum
    SDL_GPU_SHADERSTAGE_VERTEX = 0, SDL_GPU_SHADERSTAGE_FRAGMENT = 1
type
  enum_SDL_GPUVertexElementFormat* {.size: sizeof(cuint).} = enum
    SDL_GPU_VERTEXELEMENTFORMAT_INVALID = 0,
    SDL_GPU_VERTEXELEMENTFORMAT_INT = 1, SDL_GPU_VERTEXELEMENTFORMAT_INT2 = 2,
    SDL_GPU_VERTEXELEMENTFORMAT_INT3 = 3, SDL_GPU_VERTEXELEMENTFORMAT_INT4 = 4,
    SDL_GPU_VERTEXELEMENTFORMAT_UINT = 5, SDL_GPU_VERTEXELEMENTFORMAT_UINT2 = 6,
    SDL_GPU_VERTEXELEMENTFORMAT_UINT3 = 7,
    SDL_GPU_VERTEXELEMENTFORMAT_UINT4 = 8,
    SDL_GPU_VERTEXELEMENTFORMAT_FLOAT = 9,
    SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2 = 10,
    SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3 = 11,
    SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4 = 12,
    SDL_GPU_VERTEXELEMENTFORMAT_BYTE2 = 13,
    SDL_GPU_VERTEXELEMENTFORMAT_BYTE4 = 14,
    SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2 = 15,
    SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4 = 16,
    SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM = 17,
    SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM = 18,
    SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM = 19,
    SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM = 20,
    SDL_GPU_VERTEXELEMENTFORMAT_SHORT2 = 21,
    SDL_GPU_VERTEXELEMENTFORMAT_SHORT4 = 22,
    SDL_GPU_VERTEXELEMENTFORMAT_USHORT2 = 23,
    SDL_GPU_VERTEXELEMENTFORMAT_USHORT4 = 24,
    SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM = 25,
    SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM = 26,
    SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM = 27,
    SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM = 28,
    SDL_GPU_VERTEXELEMENTFORMAT_HALF2 = 29,
    SDL_GPU_VERTEXELEMENTFORMAT_HALF4 = 30
type
  enum_SDL_GPUVertexInputRate* {.size: sizeof(cuint).} = enum
    SDL_GPU_VERTEXINPUTRATE_VERTEX = 0, SDL_GPU_VERTEXINPUTRATE_INSTANCE = 1
type
  enum_SDL_GPUFillMode* {.size: sizeof(cuint).} = enum
    SDL_GPU_FILLMODE_FILL = 0, SDL_GPU_FILLMODE_LINE = 1
type
  enum_SDL_GPUCullMode* {.size: sizeof(cuint).} = enum
    SDL_GPU_CULLMODE_NONE = 0, SDL_GPU_CULLMODE_FRONT = 1,
    SDL_GPU_CULLMODE_BACK = 2
type
  enum_SDL_GPUFrontFace* {.size: sizeof(cuint).} = enum
    SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE = 0, SDL_GPU_FRONTFACE_CLOCKWISE = 1
type
  enum_SDL_GPUCompareOp* {.size: sizeof(cuint).} = enum
    SDL_GPU_COMPAREOP_INVALID = 0, SDL_GPU_COMPAREOP_NEVER = 1,
    SDL_GPU_COMPAREOP_LESS = 2, SDL_GPU_COMPAREOP_EQUAL = 3,
    SDL_GPU_COMPAREOP_LESS_OR_EQUAL = 4, SDL_GPU_COMPAREOP_GREATER = 5,
    SDL_GPU_COMPAREOP_NOT_EQUAL = 6, SDL_GPU_COMPAREOP_GREATER_OR_EQUAL = 7,
    SDL_GPU_COMPAREOP_ALWAYS = 8
type
  enum_SDL_GPUStencilOp* {.size: sizeof(cuint).} = enum
    SDL_GPU_STENCILOP_INVALID = 0, SDL_GPU_STENCILOP_KEEP = 1,
    SDL_GPU_STENCILOP_ZERO = 2, SDL_GPU_STENCILOP_REPLACE = 3,
    SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP = 4,
    SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP = 5, SDL_GPU_STENCILOP_INVERT = 6,
    SDL_GPU_STENCILOP_INCREMENT_AND_WRAP = 7,
    SDL_GPU_STENCILOP_DECREMENT_AND_WRAP = 8
type
  enum_SDL_GPUBlendOp* {.size: sizeof(cuint).} = enum
    SDL_GPU_BLENDOP_INVALID = 0, SDL_GPU_BLENDOP_ADD = 1,
    SDL_GPU_BLENDOP_SUBTRACT = 2, SDL_GPU_BLENDOP_REVERSE_SUBTRACT = 3,
    SDL_GPU_BLENDOP_MIN = 4, SDL_GPU_BLENDOP_MAX = 5
type
  enum_SDL_GPUBlendFactor* {.size: sizeof(cuint).} = enum
    SDL_GPU_BLENDFACTOR_INVALID = 0, SDL_GPU_BLENDFACTOR_ZERO = 1,
    SDL_GPU_BLENDFACTOR_ONE = 2, SDL_GPU_BLENDFACTOR_SRC_COLOR = 3,
    SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
    SDL_GPU_BLENDFACTOR_DST_COLOR = 5,
    SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR = 6,
    SDL_GPU_BLENDFACTOR_SRC_ALPHA = 7,
    SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 8,
    SDL_GPU_BLENDFACTOR_DST_ALPHA = 9,
    SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10,
    SDL_GPU_BLENDFACTOR_CONSTANT_COLOR = 11,
    SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR = 12,
    SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE = 13
type
  enum_SDL_GPUFilter* {.size: sizeof(cuint).} = enum
    SDL_GPU_FILTER_NEAREST = 0, SDL_GPU_FILTER_LINEAR = 1
type
  enum_SDL_GPUSamplerMipmapMode* {.size: sizeof(cuint).} = enum
    SDL_GPU_SAMPLERMIPMAPMODE_NEAREST = 0, SDL_GPU_SAMPLERMIPMAPMODE_LINEAR = 1
type
  enum_SDL_GPUSamplerAddressMode* {.size: sizeof(cuint).} = enum
    SDL_GPU_SAMPLERADDRESSMODE_REPEAT = 0,
    SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT = 1,
    SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE = 2
type
  enum_SDL_GPUPresentMode* {.size: sizeof(cuint).} = enum
    SDL_GPU_PRESENTMODE_VSYNC = 0, SDL_GPU_PRESENTMODE_IMMEDIATE = 1,
    SDL_GPU_PRESENTMODE_MAILBOX = 2
type
  enum_SDL_GPUSwapchainComposition* {.size: sizeof(cuint).} = enum
    SDL_GPU_SWAPCHAINCOMPOSITION_SDR = 0,
    SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR = 1,
    SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR = 2,
    SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2048 = 3
type
  enum_SDL_hid_bus_type* {.size: sizeof(cuint).} = enum
    SDL_HID_API_BUS_UNKNOWN = 0, SDL_HID_API_BUS_USB = 1,
    SDL_HID_API_BUS_BLUETOOTH = 2, SDL_HID_API_BUS_I2C = 3,
    SDL_HID_API_BUS_SPI = 4
type
  enum_SDL_HintPriority* {.size: sizeof(cuint).} = enum
    SDL_HINT_DEFAULT = 0, SDL_HINT_NORMAL = 1, SDL_HINT_OVERRIDE = 2
type
  enum_SDL_AppResult* {.size: sizeof(cuint).} = enum
    SDL_APP_CONTINUE = 0, SDL_APP_SUCCESS = 1, SDL_APP_FAILURE = 2
type
  enum_SDL_LogCategory* {.size: sizeof(cuint).} = enum
    SDL_LOG_CATEGORY_APPLICATION = 0, SDL_LOG_CATEGORY_ERROR = 1,
    SDL_LOG_CATEGORY_ASSERT = 2, SDL_LOG_CATEGORY_SYSTEM = 3,
    SDL_LOG_CATEGORY_AUDIO = 4, SDL_LOG_CATEGORY_VIDEO = 5,
    SDL_LOG_CATEGORY_RENDER = 6, SDL_LOG_CATEGORY_INPUT = 7,
    SDL_LOG_CATEGORY_TEST = 8, SDL_LOG_CATEGORY_GPU = 9,
    SDL_LOG_CATEGORY_RESERVED2 = 10, SDL_LOG_CATEGORY_RESERVED3 = 11,
    SDL_LOG_CATEGORY_RESERVED4 = 12, SDL_LOG_CATEGORY_RESERVED5 = 13,
    SDL_LOG_CATEGORY_RESERVED6 = 14, SDL_LOG_CATEGORY_RESERVED7 = 15,
    SDL_LOG_CATEGORY_RESERVED8 = 16, SDL_LOG_CATEGORY_RESERVED9 = 17,
    SDL_LOG_CATEGORY_RESERVED10 = 18, SDL_LOG_CATEGORY_CUSTOM = 19
type
  enum_SDL_LogPriority* {.size: sizeof(cuint).} = enum
    SDL_LOG_PRIORITY_INVALID = 0, SDL_LOG_PRIORITY_TRACE = 1,
    SDL_LOG_PRIORITY_VERBOSE = 2, SDL_LOG_PRIORITY_DEBUG = 3,
    SDL_LOG_PRIORITY_INFO = 4, SDL_LOG_PRIORITY_WARN = 5,
    SDL_LOG_PRIORITY_ERROR = 6, SDL_LOG_PRIORITY_CRITICAL = 7,
    SDL_LOG_PRIORITY_COUNT = 8
type
  enum_SDL_MessageBoxColorType* {.size: sizeof(cuint).} = enum
    SDL_MESSAGEBOX_COLOR_BACKGROUND = 0, SDL_MESSAGEBOX_COLOR_TEXT = 1,
    SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2,
    SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3,
    SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4, SDL_MESSAGEBOX_COLOR_COUNT = 5
type
  enum_SDL_ProcessIO* {.size: sizeof(cuint).} = enum
    SDL_PROCESS_STDIO_INHERITED = 0, SDL_PROCESS_STDIO_NULL = 1,
    SDL_PROCESS_STDIO_APP = 2, SDL_PROCESS_STDIO_REDIRECT = 3
type
  enum_SDL_TextureAccess* {.size: sizeof(cuint).} = enum
    SDL_TEXTUREACCESS_STATIC = 0, SDL_TEXTUREACCESS_STREAMING = 1,
    SDL_TEXTUREACCESS_TARGET = 2
type
  enum_SDL_RendererLogicalPresentation* {.size: sizeof(cuint).} = enum
    SDL_LOGICAL_PRESENTATION_DISABLED = 0, SDL_LOGICAL_PRESENTATION_STRETCH = 1,
    SDL_LOGICAL_PRESENTATION_LETTERBOX = 2,
    SDL_LOGICAL_PRESENTATION_OVERSCAN = 3,
    SDL_LOGICAL_PRESENTATION_INTEGER_SCALE = 4
type
  enum_SDL_Sandbox* {.size: sizeof(cuint).} = enum
    SDL_SANDBOX_NONE = 0, SDL_SANDBOX_UNKNOWN_CONTAINER = 1,
    SDL_SANDBOX_FLATPAK = 2, SDL_SANDBOX_SNAP = 3, SDL_SANDBOX_MACOS = 4
type
  enum_SDL_DateFormat* {.size: sizeof(cuint).} = enum
    SDL_DATE_FORMAT_YYYYMMDD = 0, SDL_DATE_FORMAT_DDMMYYYY = 1,
    SDL_DATE_FORMAT_MMDDYYYY = 2
type
  enum_SDL_TimeFormat* {.size: sizeof(cuint).} = enum
    SDL_TIME_FORMAT_24HR = 0, SDL_TIME_FORMAT_12HR = 1
type
  SDL_WriteLE64_renamed_SDL_WriteU64LE* = object
type
  SDL_SwapLE16_renamed_SDL_Swap16LE* = object
type
  SDL_TEXTEDITING_renamed_SDL_EVENT_TEXT_EDITING* = object
type
  SDL_CONTROLLER_BUTTON_PADDLE3_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2* = object
type
  SDL_CONTROLLERDEVICEADDED_renamed_SDL_EVENT_GAMEPAD_ADDED* = object
type
  SDL_RenderGetWindow_renamed_SDL_GetRenderWindow* = object
type
  AUDIO_S32_renamed_SDL_AUDIO_S32LE* = object
type
  SDL_HINT_DIRECTINPUT_ENABLED_renamed_SDL_HINT_JOYSTICK_DIRECTINPUT* = object
type
  SDL_RenderDrawRect_renamed_SDL_RenderRect* = object
type
  SDL_CLIPBOARDUPDATE_renamed_SDL_EVENT_CLIPBOARD_UPDATE* = object
type
  SDL_GameControllerGetTouchpadFinger_renamed_SDL_GetGamepadTouchpadFinger* = object
type
  SDL_GameControllerHasAxis_renamed_SDL_GamepadHasAxis* = object
type
  SDL_PIXELFORMAT_BGR444_renamed_SDL_PIXELFORMAT_XBGR4444* = object
type
  AUDIO_F32SYS_renamed_SDL_AUDIO_F32* = object
type
  SDL_GetPointDisplayIndex_renamed_SDL_GetDisplayForPoint* = object
type
  SDL_GetTicks64_renamed_SDL_GetTicks* = object
type
  SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT* = object
type
  SDL_CONTROLLER_TYPE_PS4_renamed_SDL_GAMEPAD_TYPE_PS4* = object
type
  SDL_SENSORUPDATE_renamed_SDL_EVENT_SENSOR_UPDATE* = object
type
  struct_SDL_Storage* = object
type
  SDL_CONTROLLER_TYPE_PS5_renamed_SDL_GAMEPAD_TYPE_PS5* = object
type
  SDL_UnionRect_renamed_SDL_GetRectUnion* = object
type
  SDL_GameControllerAddMappingsFromRW_renamed_SDL_AddGamepadMappingsFromIO* = object
type
  AUDIO_S16LSB_renamed_SDL_AUDIO_S16LE* = object
type
  SDL_SIMDGetAlignment_renamed_SDL_GetSIMDAlignment* = object
type
  SDL_sem_renamed_SDL_Semaphore* = object
type
  SDL_ReadLE32_renamed_SDL_ReadU32LE* = object
type
  SDL_SensorUpdate_renamed_SDL_UpdateSensors* = object
type
  SDL_GameControllerMappingForDeviceIndex_renamed_SDL_GetGamepadMappingForDeviceIndex* = object
type
  struct_SDL_GPUSampler* = object
type
  SDL_HasIntersection_renamed_SDL_HasRectIntersection* = object
type
  SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT* = object
type
  SDL_HapticRunEffect_renamed_SDL_RunHapticEffect* = object
type
  SDLK_z_renamed_SDLK_Z* = object
type
  SDL_SYSTEM_CURSOR_WINDOW_BOTTOM_renamed_SDL_SYSTEM_CURSOR_S_RESIZE* = object
type
  SDLK_QUOTE_renamed_SDLK_APOSTROPHE* = object
type
  SDL_RenderSetScale_renamed_SDL_SetRenderScale* = object
type
  SDL_HapticQuery_renamed_SDL_GetHapticFeatures* = object
type
  SDL_PATCHLEVEL_renamed_SDL_MICRO_VERSION* = object
type
  SDL_SYSTEM_CURSOR_SIZEWE_renamed_SDL_SYSTEM_CURSOR_EW_RESIZE* = object
type
  SDL_FRectEmpty_renamed_SDL_RectEmptyFloat* = object
type
  SDL_GameControllerGetProductVersion_renamed_SDL_GetGamepadProductVersion* = object
type
  SDL_GameControllerSetSensorEnabled_renamed_SDL_SetGamepadSensorEnabled* = object
type
  KMOD_LSHIFT_renamed_SDL_KMOD_LSHIFT* = object
type
  SDL_GameControllerSetPlayerIndex_renamed_SDL_SetGamepadPlayerIndex* = object
type
  SDL_MESSAGEBOX_COLOR_MAX_renamed_SDL_MESSAGEBOX_COLOR_COUNT* = object
type
  SDL_AtomicSet_renamed_SDL_SetAtomicInt* = object
type
  SDLK_t_renamed_SDLK_T* = object
type
  SDL_AudioStreamGet_renamed_SDL_GetAudioStreamData* = object
type
  SDLK_n_renamed_SDLK_N* = object
type
  struct_SDL_GPUCopyPass* = object
type
  SDL_HapticSetAutocenter_renamed_SDL_SetHapticAutocenter* = object
type
  SDL_GameControllerSendEffect_renamed_SDL_SendGamepadEffect* = object
type
  SDL_CONTROLLER_BINDTYPE_HAT_renamed_SDL_GAMEPAD_BINDTYPE_HAT* = object
type
  SDL_cond_renamed_SDL_Condition* = object
type
  SDL_RWFromFile_renamed_SDL_IOFromFile* = object
type
  SDL_SCANCODE_MEDIASELECT_renamed_SDL_SCANCODE_MEDIA_SELECT* = object
type
  SDL_GLcontextFlag_renamed_SDL_GLContextFlag* = object
type
  struct_SDL_hid_device* = object
type
  SDL_HapticStopAll_renamed_SDL_StopHapticEffects* = object
type
  SDL_RendererFlip_renamed_SDL_FlipMode* = object
type
  SDL_SCANCODE_AUDIOREWIND_renamed_SDL_SCANCODE_MEDIA_REWIND* = object
type
  SDL_CondWait_renamed_SDL_WaitCondition* = object
type
  SDL_JoystickIsVirtual_renamed_SDL_IsJoystickVirtual* = object
type
  SDL_SensorGetType_renamed_SDL_GetSensorType* = object
type
  SDL_CONTROLLER_BUTTON_PADDLE4_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE2* = object
type
  SDL_GameControllerGetPlayerIndex_renamed_SDL_GetGamepadPlayerIndex* = object
type
  SDL_APP_DIDENTERBACKGROUND_renamed_SDL_EVENT_DID_ENTER_BACKGROUND* = object
type
  SDL_CONTROLLER_BUTTON_PADDLE2_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE1* = object
type
  SDL_CONTROLLER_AXIS_LEFTX_renamed_SDL_GAMEPAD_AXIS_LEFTX* = object
type
  struct_SDL_DisplayModeData* = object
type
  compiler_inline_private* = object
type
  SDL_TEXTEDITING_EXT_renamed_SDL_EVENT_TEXT_EDITING_EXT* = object
type
  struct_SDL_GLContextState* = object
type
  KMOD_MODE_renamed_SDL_KMOD_MODE* = object
type
  SDL_CONTROLLER_TYPE_XBOXONE_renamed_SDL_GAMEPAD_TYPE_XBOXONE* = object
type
  SDL_SensorOpen_renamed_SDL_OpenSensor* = object
type
  SDL_GameControllerButton_renamed_SDL_GamepadButton* = object
type
  SDL_GameControllerGetAxisFromString_renamed_SDL_GetGamepadAxisFromString* = object
type
  KMOD_CAPS_renamed_SDL_KMOD_CAPS* = object
type
  SDL_JoystickGetBall_renamed_SDL_GetJoystickBall* = object
type
  SDL_AndroidGetExternalStoragePath_renamed_SDL_GetAndroidExternalStoragePath* = object
type
  SDL_GameControllerMapping_renamed_SDL_GetGamepadMapping* = object
type
  SDL_HINT_LINUX_HAT_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES* = object
type
  SDL_RenderDrawPointF_renamed_SDL_RenderPoint* = object
type
  SDL_OnApplicationWillResignActive_renamed_SDL_OnApplicationWillEnterBackground* = object
type
  SDL_RenderDrawLinesF_renamed_SDL_RenderLines* = object
type
  SDLK_MEDIASELECT_renamed_SDLK_MEDIA_SELECT* = object
type
  SDL_ScaleModeNearest_renamed_SDL_SCALEMODE_NEAREST* = object
type
  SDL_APP_WILLENTERFOREGROUND_renamed_SDL_EVENT_WILL_ENTER_FOREGROUND* = object
type
  SDL_JOYDEVICEREMOVED_renamed_SDL_EVENT_JOYSTICK_REMOVED* = object
type
  SDL_AndroidSendMessage_renamed_SDL_SendAndroidMessage* = object
type
  SDLK_i_renamed_SDLK_I* = object
type
  SDL_GDKGetDefaultUser_renamed_SDL_GetGDKDefaultUser* = object
type
  SDL_WINDOW_SKIP_TASKBAR_renamed_SDL_WINDOW_UTILITY* = object
type
  struct_SDL_GPUFence* = object
type
  SDL_GameControllerGetAppleSFSymbolsNameForAxis_renamed_SDL_GetGamepadAppleSFSymbolsNameForAxis* = object
type
  SDL_LogGetOutputFunction_renamed_SDL_GetLogOutputFunction* = object
type
  SDL_GetClosestDisplayMode_renamed_SDL_GetClosestFullscreenDisplayMode* = object
type
  SDL_AndroidShowToast_renamed_SDL_ShowAndroidToast* = object
type
  SDL_USEREVENT_renamed_SDL_EVENT_USER* = object
type
  SDL_PIXELFORMAT_RGB555_renamed_SDL_PIXELFORMAT_XRGB1555* = object
type
  SDL_CONTROLLER_TYPE_VIRTUAL_renamed_SDL_GAMEPAD_TYPE_VIRTUAL* = object
type
  SDL_GameControllerGetFirmwareVersion_renamed_SDL_GetGamepadFirmwareVersion* = object
type
  SDL_GameControllerClose_renamed_SDL_CloseGamepad* = object
type
  SDL_GameControllerMappingForGUID_renamed_SDL_GetGamepadMappingForGUID* = object
type
  SDL_MIN_SINT64* = object
type
  SDL_DestroyCond_renamed_SDL_DestroyCondition* = object
type
  SDL_RenderDrawLineF_renamed_SDL_RenderLine* = object
type
  SDLK_w_renamed_SDLK_W* = object
type
  SDL_GameControllerAxis_renamed_SDL_GamepadAxis* = object
type
  SDL_RWclose_renamed_SDL_CloseIO* = object
type
  SDL_KEYUP_renamed_SDL_EVENT_KEY_UP* = object
type
  SDL_WriteLE32_renamed_SDL_WriteU32LE* = object
type
  SDL_MasksToPixelFormatEnum_renamed_SDL_GetPixelFormatForMasks* = object
type
  SDL_RENDER_DEVICE_RESET_renamed_SDL_EVENT_RENDER_DEVICE_RESET* = object
type
  SDL_JoystickGetType_renamed_SDL_GetJoystickType* = object
type
  SDL_SensorGetData_renamed_SDL_GetSensorData* = object
type
  SDL_RenderDrawRects_renamed_SDL_RenderRects* = object
type
  SDL_WINDOWEVENT_MAXIMIZED_renamed_SDL_EVENT_WINDOW_MAXIMIZED* = object
type
  SDL_JOYAXISMOTION_renamed_SDL_EVENT_JOYSTICK_AXIS_MOTION* = object
type
  SDL_LASTEVENT_renamed_SDL_EVENT_LAST* = object
type
  SDL_SYSTEM_CURSOR_SIZENESW_renamed_SDL_SYSTEM_CURSOR_NESW_RESIZE* = object
type
  SDLK_b_renamed_SDLK_B* = object
type
  SDL_HasSurfaceRLE_renamed_SDL_SurfaceHasRLE* = object
type
  SDL_TLSSet_renamed_SDL_SetTLS* = object
type
  SDL_JoystickGetAxisInitialState_renamed_SDL_GetJoystickAxisInitialState* = object
type
  SDLK_AUDIOREWIND_renamed_SDLK_MEDIA_REWIND* = object
type
  SDL_HapticClose_renamed_SDL_CloseHaptic* = object
type
  compiler_builtin_alloca* = object
type
  SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR* = object
type
  SDL_GUIDFromString_renamed_SDL_StringToGUID* = object
type
  SDLK_AUDIOFASTFORWARD_renamed_SDLK_MEDIA_FAST_FORWARD* = object
type
  SDL_AtomicAdd_renamed_SDL_AddAtomicInt* = object
type
  SDL_CONTROLLER_BUTTON_MAX_renamed_SDL_GAMEPAD_BUTTON_COUNT* = object
type
  SDL_RenderCopyExF_renamed_SDL_RenderTextureRotated* = object
type
  SDL_RenderDrawPoints_renamed_SDL_RenderPoints* = object
type
  struct_SDL_GPUTexture* = object
type
  SDLK_k_renamed_SDLK_K* = object
type
  SDL_WINDOWEVENT_RESIZED_renamed_SDL_EVENT_WINDOW_RESIZED* = object
type
  SDL_CONTROLLER_BUTTON_RIGHTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER* = object
type
  SDL_CONTROLLER_BUTTON_TOUCHPAD_renamed_SDL_GAMEPAD_BUTTON_TOUCHPAD* = object
type
  KMOD_CTRL_renamed_SDL_KMOD_CTRL* = object
type
  SDL_CONTROLLERAXISMOTION_renamed_SDL_EVENT_GAMEPAD_AXIS_MOTION* = object
type
  SDL_CONTROLLERDEVICEREMOVED_renamed_SDL_EVENT_GAMEPAD_REMOVED* = object
type
  RW_SEEK_END_renamed_SDL_IO_SEEK_END* = object
type
  SDL_ReadLE16_renamed_SDL_ReadU16LE* = object
type
  SDL_RenderDrawLines_renamed_SDL_RenderLines* = object
type
  SDL_RWread_renamed_SDL_ReadIO* = object
type
  SDLK_h_renamed_SDLK_H* = object
type
  SDL_DISPLAYEVENT_DISCONNECTED_renamed_SDL_EVENT_DISPLAY_REMOVED* = object
type
  SDL_AndroidGetJNIEnv_renamed_SDL_GetAndroidJNIEnv* = object
type
  SDL_CONTROLLER_BINDTYPE_AXIS_renamed_SDL_GAMEPAD_BINDTYPE_AXIS* = object
type
  SDL_DROPFILE_renamed_SDL_EVENT_DROP_FILE* = object
type
  SDL_SYSTEM_CURSOR_ARROW_renamed_SDL_SYSTEM_CURSOR_DEFAULT* = object
type
  SDL_SwapBE32_renamed_SDL_Swap32BE* = object
type
  SDLK_o_renamed_SDLK_O* = object
type
  SDLK_v_renamed_SDLK_V* = object
type
  SDL_AtomicLock_renamed_SDL_LockSpinlock* = object
type
  SDL_ControllerAxisEvent_renamed_SDL_GamepadAxisEvent* = object
type
  SDL_SCANCODE_AUDIOSTOP_renamed_SDL_SCANCODE_MEDIA_STOP* = object
type
  SDL_iOSSetAnimationCallback_renamed_SDL_SetiOSAnimationCallback* = object
type
  SDL_GameControllerGetStringForAxis_renamed_SDL_GetGamepadStringForAxis* = object
type
  SDL_GetRectDisplayIndex_renamed_SDL_GetDisplayForRect* = object
type
  SDLK_a_renamed_SDLK_A* = object
type
  SDL_GetDisplayOrientation_renamed_SDL_GetCurrentDisplayOrientation* = object
type
  SDL_CONTROLLERBUTTONUP_renamed_SDL_EVENT_GAMEPAD_BUTTON_UP* = object
type
  SDL_FINGERDOWN_renamed_SDL_EVENT_FINGER_DOWN* = object
type
  SDL_ControllerDeviceEvent_renamed_SDL_GamepadDeviceEvent* = object
type
  SDL_DROPTEXT_renamed_SDL_EVENT_DROP_TEXT* = object
type
  SDLK_AUDIONEXT_renamed_SDLK_MEDIA_NEXT_TRACK* = object
type
  SDL_JoystickNumHats_renamed_SDL_GetNumJoystickHats* = object
type
  SDL_ReadBE32_renamed_SDL_ReadU32BE* = object
type
  SDLK_y_renamed_SDLK_Y* = object
type
  SDL_SYSTEM_CURSOR_WINDOW_LEFT_renamed_SDL_SYSTEM_CURSOR_W_RESIZE* = object
type
  SDL_SensorClose_renamed_SDL_CloseSensor* = object
type
  SDL_GameControllerUpdate_renamed_SDL_UpdateGamepads* = object
type
  SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO* = object
type
  SDL_AudioStreamPut_renamed_SDL_PutAudioStreamData* = object
type
  SDL_WINDOWEVENT_SIZE_CHANGED_renamed_SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED* = object
type
  SDL_IsGameController_renamed_SDL_IsGamepad* = object
type
  SDL_NUM_LOG_PRIORITIES_renamed_SDL_LOG_PRIORITY_COUNT* = object
type
  SDL_HasColorKey_renamed_SDL_SurfaceHasColorKey* = object
type
  SDL_RENDER_TARGETS_RESET_renamed_SDL_EVENT_RENDER_TARGETS_RESET* = object
type
  SDL_HapticNumEffectsPlaying_renamed_SDL_GetMaxHapticEffectsPlaying* = object
type
  SDL_CONTROLLER_BINDTYPE_NONE_renamed_SDL_GAMEPAD_BINDTYPE_NONE* = object
type
  SDL_HasWindowSurface_renamed_SDL_WindowHasSurface* = object
type
  SDL_JoystickGetAttached_renamed_SDL_JoystickConnected* = object
type
  SDL_RenderDrawLine_renamed_SDL_RenderLine* = object
type
  SDLK_m_renamed_SDLK_M* = object
type
  SDL_RenderSetLogicalSize_renamed_SDL_SetRenderLogicalPresentation* = object
type
  SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE_renamed_SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE* = object
type
  struct_SDL_RWLock* = object
type
  SDL_HINT_ALLOW_TOPMOST_renamed_SDL_HINT_WINDOW_ALLOW_TOPMOST* = object
type
  SDL_JoystickName_renamed_SDL_GetJoystickName* = object
type
  SDL_RectEquals_renamed_SDL_RectsEqual* = object
type
  SDL_RenderIsClipEnabled_renamed_SDL_RenderClipEnabled* = object
type
  SDL_GameControllerGetButtonFromString_renamed_SDL_GetGamepadButtonFromString* = object
type
  SDL_IsTextInputActive_renamed_SDL_TextInputActive* = object
type
  SDL_GameControllerGetStringForButton_renamed_SDL_GetGamepadStringForButton* = object
type
  SDL_JoystickGetSerial_renamed_SDL_GetJoystickSerial* = object
type
  compiler_FILE_private* = object
type
  SDL_CreateCond_renamed_SDL_CreateCondition* = object
type
  SDLK_c_renamed_SDLK_C* = object
type
  SDL_MouseIsHaptic_renamed_SDL_IsMouseHaptic* = object
type
  SDLK_f_renamed_SDLK_F* = object
type
  SDL_JoystickGetVendor_renamed_SDL_GetJoystickVendor* = object
type
  SDL_JoystickNumBalls_renamed_SDL_GetNumJoystickBalls* = object
type
  SDL_WINDOWEVENT_LEAVE_renamed_SDL_EVENT_WINDOW_MOUSE_LEAVE* = object
type
  SDL_threadID_renamed_SDL_ThreadID* = object
type
  struct_SDL_Process* = object
type
  SDL_LoadBMP_RW_renamed_SDL_LoadBMP_IO* = object
type
  SDL_RenderFillRectF_renamed_SDL_RenderFillRect* = object
type
  SDL_JOYBUTTONUP_renamed_SDL_EVENT_JOYSTICK_BUTTON_UP* = object
type
  SDL_RWFromMem_renamed_SDL_IOFromMem* = object
type
  SDL_KEYMAPCHANGED_renamed_SDL_EVENT_KEYMAP_CHANGED* = object
type
  SDL_INIT_GAMECONTROLLER_renamed_SDL_INIT_GAMEPAD* = object
type
  KMOD_LCTRL_renamed_SDL_KMOD_LCTRL* = object
type
  KMOD_RSHIFT_renamed_SDL_KMOD_RSHIFT* = object
type
  SDLK_AUDIOPLAY_renamed_SDLK_MEDIA_PLAY* = object
type
  SDL_PREALLOC_renamed_SDL_SURFACE_PREALLOCATED* = object
type
  SDL_iPhoneSetAnimationCallback_renamed_SDL_iOSSetAnimationCallback* = object
type
  struct_SDL_Joystick* = object
type
  SDL_CONTROLLER_BUTTON_INVALID_renamed_SDL_GAMEPAD_BUTTON_INVALID* = object
type
  SDL_RenderCopyF_renamed_SDL_RenderTexture* = object
type
  SDL_HapticOpenFromJoystick_renamed_SDL_OpenHapticFromJoystick* = object
type
  SDL_TLSCleanup_renamed_SDL_CleanupTLS* = object
type
  SDL_MOUSEWHEEL_renamed_SDL_EVENT_MOUSE_WHEEL* = object
type
  AUDIO_S16_renamed_SDL_AUDIO_S16LE* = object
type
  SDL_JOYDEVICEADDED_renamed_SDL_EVENT_JOYSTICK_ADDED* = object
type
  SDL_GameControllerGetButton_renamed_SDL_GetGamepadButton* = object
type
  SDL_SCANCODE_AUDIOMUTE_renamed_SDL_SCANCODE_MUTE* = object
type
  struct_SDL_Thread* = object
type
  struct_SDL_SharedObject* = object
type
  AUDIO_U8_renamed_SDL_AUDIO_U8* = object
type
  SDL_GameControllerGetType_renamed_SDL_GetGamepadType* = object
type
  SDL_PointInFRect_renamed_SDL_PointInRectFloat* = object
type
  SDL_WINDOWEVENT_CLOSE_renamed_SDL_EVENT_WINDOW_CLOSE_REQUESTED* = object
type
  SDL_SemWaitTimeout_renamed_SDL_WaitSemaphoreTimeout* = object
type
  SDL_SensorFromInstanceID_renamed_SDL_GetSensorFromID* = object
type
  SDL_GDKGetTaskQueue_renamed_SDL_GetGDKTaskQueue* = object
type
  SDL_AUDIODEVICEREMOVED_renamed_SDL_EVENT_AUDIO_DEVICE_REMOVED* = object
type
  struct_SDL_Gamepad* = object
type
  SDL_POLLSENTINEL_renamed_SDL_EVENT_POLL_SENTINEL* = object
type
  SDL_FALSE_renamed_false* = object
type
  KMOD_RALT_renamed_SDL_KMOD_RALT* = object
type
  SDLK_BACKQUOTE_renamed_SDLK_GRAVE* = object
type
  KMOD_LALT_renamed_SDL_KMOD_LALT* = object
type
  SDL_JoystickClose_renamed_SDL_CloseJoystick* = object
type
  SDL_HapticRumblePlay_renamed_SDL_PlayHapticRumble* = object
type
  SDL_HapticSetGain_renamed_SDL_SetHapticGain* = object
type
  SDL_CONTROLLER_BUTTON_RIGHTSTICK_renamed_SDL_GAMEPAD_BUTTON_RIGHT_STICK* = object
type
  SDL_WINDOWEVENT_ENTER_renamed_SDL_EVENT_WINDOW_MOUSE_ENTER* = object
type
  SDL_DXGIGetOutputInfo_renamed_SDL_GetDXGIOutputInfo* = object
type
  SDL_AudioStreamFlush_renamed_SDL_FlushAudioStream* = object
type
  SDL_JoystickDetachVirtual_renamed_SDL_DetachVirtualJoystick* = object
type
  SDL_GameControllerPath_renamed_SDL_GetGamepadPath* = object
type
  SDL_EnclosePoints_renamed_SDL_GetRectEnclosingPoints* = object
type
  SDL_JOYBATTERYUPDATED_renamed_SDL_EVENT_JOYSTICK_BATTERY_UPDATED* = object
type
  SDL_RenderGetScale_renamed_SDL_GetRenderScale* = object
type
  SDL_ReadBE64_renamed_SDL_ReadU64BE* = object
type
  SDL_WINDOWEVENT_SHOWN_renamed_SDL_EVENT_WINDOW_SHOWN* = object
type
  SDL_GameControllerGetSteamHandle_renamed_SDL_GetGamepadSteamHandle* = object
type
  KMOD_ALT_renamed_SDL_KMOD_ALT* = object
type
  SDL_JoystickGUID_renamed_SDL_GUID* = object
type
  SDL_RenderGetViewport_renamed_SDL_GetRenderViewport* = object
type
  SDL_CONTROLLER_BUTTON_B_renamed_SDL_GAMEPAD_BUTTON_EAST* = object
type
  SDL_RenderDrawRectF_renamed_SDL_RenderRect* = object
type
  SDL_AndroidRequestPermissionCallback_renamed_SDL_RequestAndroidPermissionCallback* = object
type
  struct_SDL_IOStream* = object
type
  SDL_CONTROLLERSTEAMHANDLEUPDATED_renamed_SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED* = object
type
  SDL_JoystickSendEffect_renamed_SDL_SendJoystickEffect* = object
type
  SDL_SIMD_ALIGNED_renamed_SDL_SURFACE_SIMD_ALIGNED* = object
type
  SDL_strtokr_renamed_SDL_strtok_r* = object
type
  struct_SDL_iconv_data_t* = object
type
  SDL_LogSetPriority_renamed_SDL_SetLogPriority* = object
type
  SDL_LOCALECHANGED_renamed_SDL_EVENT_LOCALE_CHANGED* = object
type
  SDL_PixelFormatEnumToMasks_renamed_SDL_GetMasksForPixelFormat* = object
type
  SDL_ReadBE16_renamed_SDL_ReadU16BE* = object
type
  RW_SEEK_SET_renamed_SDL_IO_SEEK_SET* = object
type
  struct_SDL_GPUComputePass* = object
type
  SDL_WINDOWEVENT_EXPOSED_renamed_SDL_EVENT_WINDOW_EXPOSED* = object
type
  SDL_SYSTEM_CURSOR_WINDOW_TOPRIGHT_renamed_SDL_SYSTEM_CURSOR_NE_RESIZE* = object
type
  SDL_GameControllerGetSensorData_renamed_SDL_GetGamepadSensorData* = object
type
  SDL_SensorGetInstanceID_renamed_SDL_GetSensorID* = object
type
  SDL_FillRects_renamed_SDL_FillSurfaceRects* = object
type
  KMOD_GUI_renamed_SDL_KMOD_GUI* = object
type
  SDL_LogSetOutputFunction_renamed_SDL_SetLogOutputFunction* = object
type
  SDL_AtomicGetPtr_renamed_SDL_GetAtomicPointer* = object
type
  SDL_HapticOpen_renamed_SDL_OpenHaptic* = object
type
  SDL_HapticOpenFromMouse_renamed_SDL_OpenHapticFromMouse* = object
type
  RW_SEEK_CUR_renamed_SDL_IO_SEEK_CUR* = object
type
  SDL_CONTROLLER_AXIS_INVALID_renamed_SDL_GAMEPAD_AXIS_INVALID* = object
type
  SDL_AndroidRequestPermission_renamed_SDL_RequestAndroidPermission* = object
type
  SDLK_EJECT_renamed_SDLK_MEDIA_EJECT* = object
type
  SDL_SYSTEM_CURSOR_IBEAM_renamed_SDL_SYSTEM_CURSOR_TEXT* = object
type
  SDL_CONTROLLER_BUTTON_LEFTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_LEFT_SHOULDER* = object
type
  SDL_DISPLAYEVENT_MOVED_renamed_SDL_EVENT_DISPLAY_MOVED* = object
type
  SDL_WINDOWEVENT_RESTORED_renamed_SDL_EVENT_WINDOW_RESTORED* = object
type
  SDL_JoystickNumAxes_renamed_SDL_GetNumJoystickAxes* = object
type
  SDLK_l_renamed_SDLK_L* = object
type
  SDL_SYSTEM_CURSOR_WINDOW_BOTTOMRIGHT_renamed_SDL_SYSTEM_CURSOR_SE_RESIZE* = object
type
  SDL_PIXELFORMAT_RGB888_renamed_SDL_PIXELFORMAT_XRGB8888* = object
type
  SDL_JoystickNumButtons_renamed_SDL_GetNumJoystickButtons* = object
type
  SDL_JoystickFromInstanceID_renamed_SDL_GetJoystickFromID* = object
type
  SDL_LogGetPriority_renamed_SDL_GetLogPriority* = object
type
  SDL_GameControllerType_renamed_SDL_GamepadType* = object
type
  SDL_SemWait_renamed_SDL_WaitSemaphore* = object
type
  SDL_DISPLAYEVENT_ORIENTATION_renamed_SDL_EVENT_DISPLAY_ORIENTATION* = object
type
  SDL_GameControllerGetNumTouchpads_renamed_SDL_GetNumGamepadTouchpads* = object
type
  SDL_WINDOWEVENT_HIDDEN_renamed_SDL_EVENT_WINDOW_HIDDEN* = object
type
  SDL_JoystickGetAxis_renamed_SDL_GetJoystickAxis* = object
type
  SDL_FINGERUP_renamed_SDL_EVENT_FINGER_UP* = object
type
  SDL_RenderGetMetalLayer_renamed_SDL_GetRenderMetalLayer* = object
type
  SDL_SetColorKey_renamed_SDL_SetSurfaceColorKey* = object
type
  SDL_RWseek_renamed_SDL_SeekIO* = object
type
  SDL_BUTTON_renamed_SDL_BUTTON_MASK* = object
type
  struct_SDL_AudioStream* = object
type
  SDL_GameControllerGetSerial_renamed_SDL_GetGamepadSerial* = object
type
  SDL_JoystickSetVirtualAxis_renamed_SDL_SetJoystickVirtualAxis* = object
type
  SDL_JoystickUpdate_renamed_SDL_UpdateJoysticks* = object
type
  SDL_AllocPalette_renamed_SDL_CreatePalette* = object
type
  SDL_IntersectFRect_renamed_SDL_GetRectIntersectionFloat* = object
type
  SDL_CONTROLLER_BUTTON_BACK_renamed_SDL_GAMEPAD_BUTTON_BACK* = object
type
  SDL_GameControllerHasButton_renamed_SDL_GamepadHasButton* = object
type
  SDL_BlitScaled_renamed_SDL_BlitSurfaceScaled* = object
type
  SDL_SYSTEM_CURSOR_SIZENWSE_renamed_SDL_SYSTEM_CURSOR_NWSE_RESIZE* = object
type
  SDL_GameControllerBindType_renamed_SDL_GamepadBindingType* = object
type
  SDL_GetCPUCount_renamed_SDL_GetNumLogicalCPUCores* = object
type
  SDL_RenderCopyEx_renamed_SDL_RenderTextureRotated* = object
type
  SDL_JoystickAttachVirtualEx_renamed_SDL_AttachVirtualJoystick* = object
type
  SDL_FreePalette_renamed_SDL_DestroyPalette* = object
type
  SDL_JOYBUTTONDOWN_renamed_SDL_EVENT_JOYSTICK_BUTTON_DOWN* = object
type
  SDL_CONTROLLERBUTTONDOWN_renamed_SDL_EVENT_GAMEPAD_BUTTON_DOWN* = object
type
  SDL_PIXELFORMAT_BGR888_renamed_SDL_PIXELFORMAT_XBGR8888* = object
type
  SDL_PIXELFORMAT_BGR555_renamed_SDL_PIXELFORMAT_XBGR1555* = object
type
  SDL_HapticNumAxes_renamed_SDL_GetNumHapticAxes* = object
type
  SDL_JoystickFromPlayerIndex_renamed_SDL_GetJoystickFromPlayerIndex* = object
type
  SDL_WINDOW_ALLOW_HIGHDPI_renamed_SDL_WINDOW_HIGH_PIXEL_DENSITY* = object
type
  AUDIO_S32LSB_renamed_SDL_AUDIO_S32LE* = object
type
  SDL_SCANCODE_AUDIONEXT_renamed_SDL_SCANCODE_MEDIA_NEXT_TRACK* = object
type
  union_XEvent* = object
type
  SDL_CONTROLLER_BUTTON_GUIDE_renamed_SDL_GAMEPAD_BUTTON_GUIDE* = object
type
  SDL_DelEventWatch_renamed_SDL_RemoveEventWatch* = object
type
  SDL_GameControllerGetSensorDataRate_renamed_SDL_GetGamepadSensorDataRate* = object
type
  SDLK_e_renamed_SDLK_E* = object
type
  KMOD_RGUI_renamed_SDL_KMOD_RGUI* = object
type
  SDL_LinuxSetThreadPriority_renamed_SDL_SetLinuxThreadPriority* = object
type
  SDL_TABLESIZE_renamed_SDL_arraysize* = object
type
  SDL_GameController_renamed_SDL_Gamepad* = object
type
  SDL_TLSGet_renamed_SDL_GetTLS* = object
type
  SDLK_u_renamed_SDLK_U* = object
type
  SDL_CONTROLLER_BUTTON_MISC1_renamed_SDL_GAMEPAD_BUTTON_MISC1* = object
type
  SDL_JoystickGetPlayerIndex_renamed_SDL_GetJoystickPlayerIndex* = object
type
  struct_SDL_GPUComputePipeline* = object
type
  SDL_CONTROLLERSENSORUPDATE_renamed_SDL_EVENT_GAMEPAD_SENSOR_UPDATE* = object
type
  SDL_HapticUpdateEffect_renamed_SDL_UpdateHapticEffect* = object
type
  SDLK_x_renamed_SDLK_X* = object
type
  SDL_SemTryWait_renamed_SDL_TryWaitSemaphore* = object
type
  AUDIO_F32LSB_renamed_SDL_AUDIO_F32LE* = object
type
  SDL_NewAudioStream_renamed_SDL_CreateAudioStream* = object
type
  struct_SDL_GPUDevice* = object
type
  SDL_ConvertSurfaceFormat_renamed_SDL_ConvertSurface* = object
type
  SDL_CONTROLLER_BUTTON_DPAD_RIGHT_renamed_SDL_GAMEPAD_BUTTON_DPAD_RIGHT* = object
type
  SDL_AndroidGetActivity_renamed_SDL_GetAndroidActivity* = object
type
  SDL_GameControllerGetAxis_renamed_SDL_GetGamepadAxis* = object
type
  compiler_func_private* = object
type
  SDL_GameControllerRumble_renamed_SDL_RumbleGamepad* = object
type
  SDL_APP_LOWMEMORY_renamed_SDL_EVENT_LOW_MEMORY* = object
type
  SDL_RenderGetClipRect_renamed_SDL_GetRenderClipRect* = object
type
  SDL_Direct3D9GetAdapterIndex_renamed_SDL_GetDirect3D9AdapterIndex* = object
type
  SDL_CONTROLLER_BUTTON_X_renamed_SDL_GAMEPAD_BUTTON_WEST* = object
type
  struct_SDL_GPUCommandBuffer* = object
type
  SDLK_r_renamed_SDLK_R* = object
type
  SDL_MOUSEMOTION_renamed_SDL_EVENT_MOUSE_MOTION* = object
type
  SDLK_d_renamed_SDLK_D* = object
type
  SDL_CONTROLLERTOUCHPADDOWN_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN* = object
type
  SDL_CONTROLLERDEVICEREMAPPED_renamed_SDL_EVENT_GAMEPAD_REMAPPED* = object
type
  SDL_FINGERMOTION_renamed_SDL_EVENT_FINGER_MOTION* = object
type
  SDL_HapticDestroyEffect_renamed_SDL_DestroyHapticEffect* = object
type
  SDL_CONTROLLERTOUCHPADUP_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_UP* = object
type
  SDL_HapticRumbleInit_renamed_SDL_InitHapticRumble* = object
type
  SDLK_g_renamed_SDLK_G* = object
type
  SDL_SYSTEM_CURSOR_SIZEALL_renamed_SDL_SYSTEM_CURSOR_MOVE* = object
type
  KMOD_RCTRL_renamed_SDL_KMOD_RCTRL* = object
type
  SDL_SCANCODE_AUDIOPREV_renamed_SDL_SCANCODE_MEDIA_PREVIOUS_TRACK* = object
type
  SDL_CondSignal_renamed_SDL_SignalCondition* = object
type
  SDL_iOSSetEventPump_renamed_SDL_SetiOSEventPump* = object
type
  SDL_JoystickGetProduct_renamed_SDL_GetJoystickProduct* = object
type
  SDL_SCANCODE_AUDIOFASTFORWARD_renamed_SDL_SCANCODE_MEDIA_FAST_FORWARD* = object
type
  SDL_SensorGetNonPortableType_renamed_SDL_GetSensorNonPortableType* = object
type
  SDL_SetClipRect_renamed_SDL_SetSurfaceClipRect* = object
type
  SDL_SetThreadPriority_renamed_SDL_SetCurrentThreadPriority* = object
type
  SDL_CONTROLLER_BUTTON_DPAD_DOWN_renamed_SDL_GAMEPAD_BUTTON_DPAD_DOWN* = object
type
  SDL_HapticNumEffects_renamed_SDL_GetMaxHapticEffects* = object
type
  SDL_SCANCODE_AUDIOPLAY_renamed_SDL_SCANCODE_MEDIA_PLAY* = object
type
  struct_SDL_GPUGraphicsPipeline* = object
type
  SDL_GameControllerAddMapping_renamed_SDL_AddGamepadMapping* = object
type
  SDL_GameControllerGetVendor_renamed_SDL_GetGamepadVendor* = object
type
  SDLK_q_renamed_SDLK_Q* = object
type
  SDL_WINDOWEVENT_MINIMIZED_renamed_SDL_EVENT_WINDOW_MINIMIZED* = object
type
  SDL_SwapBE64_renamed_SDL_Swap64BE* = object
type
  SDL_MOUSEBUTTONUP_renamed_SDL_EVENT_MOUSE_BUTTON_UP* = object
type
  SDL_LoadWAV_RW_renamed_SDL_LoadWAV_IO* = object
type
  SDL_TEXTINPUT_renamed_SDL_EVENT_TEXT_INPUT* = object
type
  SDL_CONTROLLER_AXIS_TRIGGERLEFT_renamed_SDL_GAMEPAD_AXIS_LEFT_TRIGGER* = object
type
  SDL_HapticStopEffect_renamed_SDL_StopHapticEffect* = object
type
  SDL_GameControllerGetAppleSFSymbolsNameForButton_renamed_SDL_GetGamepadAppleSFSymbolsNameForButton* = object
type
  SDL_SYSTEM_CURSOR_HAND_renamed_SDL_SYSTEM_CURSOR_POINTER* = object
type
  SDL_PIXELFORMAT_RGB444_renamed_SDL_PIXELFORMAT_XRGB4444* = object
type
  AUDIO_F32MSB_renamed_SDL_AUDIO_F32BE* = object
type
  SDL_WINDOW_INPUT_GRABBED_renamed_SDL_WINDOW_MOUSE_GRABBED* = object
type
  SDL_GL_DeleteContext_renamed_SDL_GL_DestroyContext* = object
type
  SDL_DROPCOMPLETE_renamed_SDL_EVENT_DROP_COMPLETE* = object
type
  SDLK_AUDIOSTOP_renamed_SDLK_MEDIA_STOP* = object
type
  SDL_FreeAudioStream_renamed_SDL_DestroyAudioStream* = object
type
  SDL_HINT_LINUX_DIGITAL_HATS_renamed_SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS* = object
type
  SDL_JoystickSetLED_renamed_SDL_SetJoystickLED* = object
type
  SDL_HapticUnpause_renamed_SDL_ResumeHaptic* = object
type
  SDL_mutex_renamed_SDL_Mutex* = object
type
  SDL_FreeWAV_renamed_SDL_free* = object
type
  SDL_IntersectFRectAndLine_renamed_SDL_GetRectAndLineIntersectionFloat* = object
type
  KMOD_NUM_renamed_SDL_KMOD_NUM* = object
type
  SDL_RenderSetViewport_renamed_SDL_SetRenderViewport* = object
type
  SDL_UpperBlit_renamed_SDL_BlitSurface* = object
type
  SDL_CONTROLLER_TYPE_UNKNOWN_renamed_SDL_GAMEPAD_TYPE_STANDARD* = object
type
  SDL_GameControllerGetJoystick_renamed_SDL_GetGamepadJoystick* = object
type
  SDL_JoystickGetGUID_renamed_SDL_GetJoystickGUID* = object
type
  KMOD_LGUI_renamed_SDL_KMOD_LGUI* = object
type
  SDL_ControllerTouchpadEvent_renamed_SDL_GamepadTouchpadEvent* = object
type
  SDL_LowerBlitScaled_renamed_SDL_BlitSurfaceUncheckedScaled* = object
type
  SDL_bool_renamed_bool* = object
type
  SDL_AtomicGet_renamed_SDL_GetAtomicInt* = object
type
  SDL_WriteBE64_renamed_SDL_WriteU64BE* = object
type
  SDL_CONTROLLER_AXIS_RIGHTX_renamed_SDL_GAMEPAD_AXIS_RIGHTX* = object
type
  SDL_GameControllerFromPlayerIndex_renamed_SDL_GetGamepadFromPlayerIndex* = object
type
  SDL_WINDOWEVENT_ICCPROF_CHANGED_renamed_SDL_EVENT_WINDOW_ICCPROF_CHANGED* = object
type
  SDL_HapticGetEffectStatus_renamed_SDL_GetHapticEffectStatus* = object
type
  SDL_KEYDOWN_renamed_SDL_EVENT_KEY_DOWN* = object
type
  SDL_eventaction_renamed_SDL_EventAction* = object
type
  SDL_JOYSTICK_TYPE_GAMECONTROLLER_renamed_SDL_JOYSTICK_TYPE_GAMEPAD* = object
type
  SDL_IsScreenKeyboardShown_renamed_SDL_ScreenKeyboardShown* = object
type
  SDL_LogResetPriorities_renamed_SDL_ResetLogPriorities* = object
type
  SDL_ControllerButtonEvent_renamed_SDL_GamepadButtonEvent* = object
type
  SDL_NUM_SCANCODES_renamed_SDL_SCANCODE_COUNT* = object
type
  SDL_FreeCursor_renamed_SDL_DestroyCursor* = object
type
  SDL_GetWindowDisplayMode_renamed_SDL_GetWindowFullscreenMode* = object
type
  SDL_RenderSetClipRect_renamed_SDL_SetRenderClipRect* = object
type
  SDL_WINDOWEVENT_HIT_TEST_renamed_SDL_EVENT_WINDOW_HIT_TEST* = object
type
  SDL_CONTROLLER_BUTTON_Y_renamed_SDL_GAMEPAD_BUTTON_NORTH* = object
type
  SDL_RWFromConstMem_renamed_SDL_IOFromConstMem* = object
type
  AUDIO_F32_renamed_SDL_AUDIO_F32LE* = object
type
  AUDIO_S16MSB_renamed_SDL_AUDIO_S16BE* = object
type
  AUDIO_S8_renamed_SDL_AUDIO_S8* = object
type
  SDL_HINT_GDK_TEXTINPUT_DEFAULT_renamed_SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT* = object
type
  SDLK_j_renamed_SDLK_J* = object
type
  SDL_WriteBE16_renamed_SDL_WriteU16BE* = object
type
  SDL_IntersectRect_renamed_SDL_GetRectIntersection* = object
type
  SDL_SensorGetName_renamed_SDL_GetSensorName* = object
type
  struct_SDL_Window* = object
type
  SDL_UpperBlitScaled_renamed_SDL_BlitSurfaceScaled* = object
type
  SDL_GameControllerAddMappingsFromFile_renamed_SDL_AddGamepadMappingsFromFile* = object
type
  SDL_GameControllerName_renamed_SDL_GetGamepadName* = object
type
  SDL_OnApplicationDidBecomeActive_renamed_SDL_OnApplicationDidEnterForeground* = object
type
  SDL_RenderGetLogicalSize_renamed_SDL_GetRenderLogicalPresentation* = object
type
  SDL_RWops_renamed_SDL_IOStream* = object
type
  SDL_GameControllerIsSensorEnabled_renamed_SDL_GamepadSensorEnabled* = object
type
  SDL_LogSetAllPriority_renamed_SDL_SetLogPriorities* = object
type
  SDL_JoystickOpen_renamed_SDL_OpenJoystick* = object
type
  SDL_FillRect_renamed_SDL_FillSurfaceRect* = object
type
  SDL_ReadLE64_renamed_SDL_ReadU64LE* = object
type
  struct_SDL_GPUTransferBuffer* = object
type
  SDL_JOYHATMOTION_renamed_SDL_EVENT_JOYSTICK_HAT_MOTION* = object
type
  SDL_JoystickRumbleTriggers_renamed_SDL_RumbleJoystickTriggers* = object
type
  SDL_AndroidGetExternalStorageState_renamed_SDL_GetAndroidExternalStorageState* = object
type
  SDL_AtomicSetPtr_renamed_SDL_SetAtomicPointer* = object
type
  SDL_SemPost_renamed_SDL_SignalSemaphore* = object
type
  SDL_GLprofile_renamed_SDL_GLProfile* = object
type
  SDL_GetRendererOutputSize_renamed_SDL_GetCurrentRenderOutputSize* = object
type
  SDL_RWsize_renamed_SDL_GetIOSize* = object
type
  SDL_WriteBE32_renamed_SDL_WriteU32BE* = object
type
  SDL_SCANCODE_EJECT_renamed_SDL_SCANCODE_MEDIA_EJECT* = object
type
  SDL_JOYBALLMOTION_renamed_SDL_EVENT_JOYSTICK_BALL_MOTION* = object
type
  SDL_SetWindowDisplayMode_renamed_SDL_SetWindowFullscreenMode* = object
type
  SDL_APP_DIDENTERFOREGROUND_renamed_SDL_EVENT_DID_ENTER_FOREGROUND* = object
type
  SDL_RWtell_renamed_SDL_TellIO* = object
type
  SDL_GameControllerHasSensor_renamed_SDL_GamepadHasSensor* = object
type
  SDL_GetColorKey_renamed_SDL_GetSurfaceColorKey* = object
type
  struct_SDL_Mutex* = object
type
  SDL_CONTROLLER_TYPE_PS3_renamed_SDL_GAMEPAD_TYPE_PS3* = object
type
  SDLK_QUOTEDBL_renamed_SDLK_DBLAPOSTROPHE* = object
type
  SDL_GameControllerGetProduct_renamed_SDL_GetGamepadProduct* = object
type
  SDL_IntersectRectAndLine_renamed_SDL_GetRectAndLineIntersection* = object
type
  SDL_LinuxSetThreadPriorityAndPolicy_renamed_SDL_SetLinuxThreadPriorityAndPolicy* = object
type
  SDL_SYSTEM_CURSOR_WINDOW_BOTTOMLEFT_renamed_SDL_SYSTEM_CURSOR_SW_RESIZE* = object
type
  SDL_CONTROLLER_BINDTYPE_BUTTON_renamed_SDL_GAMEPAD_BINDTYPE_BUTTON* = object
type
  SDL_RenderCopy_renamed_SDL_RenderTexture* = object
type
  SDL_JoystickInstanceID_renamed_SDL_GetJoystickID* = object
type
  SDL_GLattr_renamed_SDL_GLAttr* = object
type
  SDL_RenderFillRectsF_renamed_SDL_RenderFillRects* = object
type
  struct_SDL_Camera* = object
type
  SDL_AudioStreamClear_renamed_SDL_ClearAudioStream* = object
type
  SDL_JoystickGetFirmwareVersion_renamed_SDL_GetJoystickFirmwareVersion* = object
type
  SDL_JoystickSetPlayerIndex_renamed_SDL_SetJoystickPlayerIndex* = object
type
  SDLK_p_renamed_SDLK_P* = object
type
  SDL_iPhoneSetEventPump_renamed_SDL_iOSSetEventPump* = object
type
  struct_SDL_Haptic* = object
type
  SDL_GameControllerRumbleTriggers_renamed_SDL_RumbleGamepadTriggers* = object
type
  KMOD_SHIFT_renamed_SDL_KMOD_SHIFT* = object
type
  SDL_MOUSEBUTTONDOWN_renamed_SDL_EVENT_MOUSE_BUTTON_DOWN* = object
type
  SDL_AllocFormat_renamed_SDL_GetPixelFormatDetails* = object
type
  SDL_GetClipRect_renamed_SDL_GetSurfaceClipRect* = object
type
  SDL_CondWaitTimeout_renamed_SDL_WaitConditionTimeout* = object
type
  SDL_RenderLogicalToWindow_renamed_SDL_RenderCoordinatesToWindow* = object
type
  SDL_SYSTEM_CURSOR_NO_renamed_SDL_SYSTEM_CURSOR_NOT_ALLOWED* = object
type
  SDL_AtomicTryLock_renamed_SDL_TryLockSpinlock* = object
type
  KMOD_NONE_renamed_SDL_KMOD_NONE* = object
type
  SDLK_s_renamed_SDLK_S* = object
type
  struct_SDL_Semaphore* = object
type
  SDL_SYSTEM_CURSOR_WINDOW_RIGHT_renamed_SDL_SYSTEM_CURSOR_E_RESIZE* = object
type
  SDL_GLcontextReleaseFlag_renamed_SDL_GLContextReleaseFlag* = object
type
  SDL_HINT_LINUX_JOYSTICK_CLASSIC_renamed_SDL_HINT_JOYSTICK_LINUX_CLASSIC* = object
type
  SDL_size_add_overflow_renamed_SDL_size_add_check_overflow* = object
type
  SDL_RenderDrawPoint_renamed_SDL_RenderPoint* = object
type
  SDL_HapticRumbleStop_renamed_SDL_StopHapticRumble* = object
type
  SDL_WINDOWEVENT_FOCUS_LOST_renamed_SDL_EVENT_WINDOW_FOCUS_LOST* = object
type
  SDL_CONTROLLER_BUTTON_A_renamed_SDL_GAMEPAD_BUTTON_SOUTH* = object
type
  SDL_JoystickSetVirtualHat_renamed_SDL_SetJoystickVirtualHat* = object
type
  SDL_JoystickRumble_renamed_SDL_RumbleJoystick* = object
type
  SDL_CONTROLLER_AXIS_MAX_renamed_SDL_GAMEPAD_AXIS_COUNT* = object
type
  SDL_AtomicUnlock_renamed_SDL_UnlockSpinlock* = object
type
  SDL_CONTROLLER_BUTTON_LEFTSTICK_renamed_SDL_GAMEPAD_BUTTON_LEFT_STICK* = object
type
  SDL_DelHintCallback_renamed_SDL_RemoveHintCallback* = object
type
  SDL_JoystickGetButton_renamed_SDL_GetJoystickButton* = object
type
  SDL_JoystickGetGUIDFromString_renamed_SDL_GUIDFromString* = object
type
  struct_tagMSG* = object
type
  SDL_JoystickGetHat_renamed_SDL_GetJoystickHat* = object
type
  SDL_DROPBEGIN_renamed_SDL_EVENT_DROP_BEGIN* = object
type
  SDL_RenderWindowToLogical_renamed_SDL_RenderCoordinatesFromWindow* = object
type
  SDL_AndroidBackButton_renamed_SDL_SendAndroidBackButton* = object
type
  struct_SDL_Cursor* = object
type
  SDL_APP_WILLENTERBACKGROUND_renamed_SDL_EVENT_WILL_ENTER_BACKGROUND* = object
type
  SDL_COMPILEDVERSION_renamed_SDL_VERSION* = object
type
  SDL_AUDIODEVICEADDED_renamed_SDL_EVENT_AUDIO_DEVICE_ADDED* = object
type
  SDL_GameControllerSetLED_renamed_SDL_SetGamepadLED* = object
type
  SDL_QUIT_renamed_SDL_EVENT_QUIT* = object
type
  struct_SDL_Condition* = object
type
  struct_SDL_GPUShader* = object
type
  SDL_UnionFRect_renamed_SDL_GetRectUnionFloat* = object
type
  SDL_GameControllerGetAttached_renamed_SDL_GamepadConnected* = object
type
  SDL_AndroidGetInternalStoragePath_renamed_SDL_GetAndroidInternalStoragePath* = object
type
  SDL_WriteLE16_renamed_SDL_WriteU16LE* = object
type
  SDL_RWwrite_renamed_SDL_WriteIO* = object
type
  SDL_AudioStreamAvailable_renamed_SDL_GetAudioStreamAvailable* = object
type
  SDL_DISPLAYEVENT_CONNECTED_renamed_SDL_EVENT_DISPLAY_ADDED* = object
type
  SDL_RenderDrawPointsF_renamed_SDL_RenderPoints* = object
type
  struct_SDL_GPURenderPass* = object
type
  SDL_APP_TERMINATING_renamed_SDL_EVENT_TERMINATING* = object
type
  SDL_SYSTEM_CURSOR_WAITARROW_renamed_SDL_SYSTEM_CURSOR_PROGRESS* = object
type
  AUDIO_S32SYS_renamed_SDL_AUDIO_S32* = object
type
  SDL_WINDOWEVENT_MOVED_renamed_SDL_EVENT_WINDOW_MOVED* = object
type
  SDL_GameControllerOpen_renamed_SDL_OpenGamepad* = object
type
  SDL_CONTROLLER_BUTTON_START_renamed_SDL_GAMEPAD_BUTTON_START* = object
type
  SDL_CondBroadcast_renamed_SDL_BroadcastCondition* = object
type
  SDL_GameControllerGetNumTouchpadFingers_renamed_SDL_GetNumGamepadTouchpadFingers* = object
type
  SDL_WINDOWEVENT_FOCUS_GAINED_renamed_SDL_EVENT_WINDOW_FOCUS_GAINED* = object
type
  SDL_TRUE_renamed_true* = object
type
  SDL_SYSTEM_CURSOR_WINDOW_TOPLEFT_renamed_SDL_SYSTEM_CURSOR_NW_RESIZE* = object
type
  SDL_FIRSTEVENT_renamed_SDL_EVENT_FIRST* = object
type
  SDL_CONTROLLERTOUCHPADMOTION_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION* = object
type
  SDL_CONTROLLER_BUTTON_DPAD_UP_renamed_SDL_GAMEPAD_BUTTON_DPAD_UP* = object
type
  KMOD_SCROLL_renamed_SDL_KMOD_SCROLL* = object
type
  AUDIO_S32MSB_renamed_SDL_AUDIO_S32BE* = object
type
  SDL_EncloseFPoints_renamed_SDL_GetRectEnclosingPointsFloat* = object
type
  SDL_RenderDrawRectsF_renamed_SDL_RenderRects* = object
type
  SDL_SaveBMP_RW_renamed_SDL_SaveBMP_IO* = object
type
  SDL_CONTROLLER_BUTTON_DPAD_LEFT_renamed_SDL_GAMEPAD_BUTTON_DPAD_LEFT* = object
type
  SDLK_AUDIOMUTE_renamed_SDLK_MUTE* = object
type
  SDL_MAX_SINT64* = object
type
  SDLK_AUDIOPREV_renamed_SDLK_MEDIA_PREVIOUS_TRACK* = object
type
  SDL_FRectEquals_renamed_SDL_RectsEqualFloat* = object
type
  SDL_HasIntersectionF_renamed_SDL_HasRectIntersectionFloat* = object
type
  SDL_CONTROLLER_TYPE_XBOX360_renamed_SDL_GAMEPAD_TYPE_XBOX360* = object
type
  SDL_GetWindowDisplayIndex_renamed_SDL_GetDisplayForWindow* = object
type
  struct_SDL_Environment* = object
type
  struct_SDL_GPUBuffer* = object
type
  SDL_SwapLE64_renamed_SDL_Swap64LE* = object
type
  AUDIO_S16SYS_renamed_SDL_AUDIO_S16* = object
type
  SDL_HapticPause_renamed_SDL_PauseHaptic* = object
type
  SDL_JoystickPath_renamed_SDL_GetJoystickPath* = object
type
  SDL_SYSTEM_CURSOR_SIZENS_renamed_SDL_SYSTEM_CURSOR_NS_RESIZE* = object
type
  SDL_MixAudioFormat_renamed_SDL_MixAudio* = object
type
  SDL_JoystickIsHaptic_renamed_SDL_IsJoystickHaptic* = object
type
  SDL_size_mul_overflow_renamed_SDL_size_mul_check_overflow* = object
type
  SDL_FreeSurface_renamed_SDL_DestroySurface* = object
type
  SDL_CONTROLLER_AXIS_RIGHTY_renamed_SDL_GAMEPAD_AXIS_RIGHTY* = object
type
  struct_SDL_Sensor* = object
type
  SDL_NUM_SYSTEM_CURSORS_renamed_SDL_SYSTEM_CURSOR_COUNT* = object
type
  SDL_IsScreenSaverEnabled_renamed_SDL_ScreenSaverEnabled* = object
type
  compiler_LINE_private* = object
type
  SDL_ControllerSensorEvent_renamed_SDL_GamepadSensorEvent* = object
type
  SDL_AtomicCAS_renamed_SDL_CompareAndSwapAtomicInt* = object
type
  SDL_WINDOWEVENT_DISPLAY_CHANGED_renamed_SDL_EVENT_WINDOW_DISPLAY_CHANGED* = object
type
  SDL_HapticNewEffect_renamed_SDL_CreateHapticEffect* = object
type
  SDL_JoystickSetVirtualButton_renamed_SDL_SetJoystickVirtualButton* = object
type
  SDL_SemValue_renamed_SDL_GetSemaphoreValue* = object
type
  SDL_RenderFlush_renamed_SDL_FlushRenderer* = object
type
  SDL_Colour_renamed_SDL_Color* = object
type
  SDL_HINT_LINUX_JOYSTICK_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_DEADZONES* = object
type
  SDL_SwapBE16_renamed_SDL_Swap16BE* = object
type
  SDL_JoystickGetProductVersion_renamed_SDL_GetJoystickProductVersion* = object
type
  SDL_LowerBlit_renamed_SDL_BlitSurfaceUnchecked* = object
type
  SDL_FRectEqualsEpsilon_renamed_SDL_RectsEqualEpsilon* = object
type
  SDL_CONTROLLER_AXIS_LEFTY_renamed_SDL_GAMEPAD_AXIS_LEFTY* = object
type
  SDL_atomic_t_renamed_SDL_AtomicInt* = object
type
  SDL_CONTROLLER_AXIS_TRIGGERRIGHT_renamed_SDL_GAMEPAD_AXIS_RIGHT_TRIGGER* = object
type
  SDL_GameControllerFromInstanceID_renamed_SDL_GetGamepadFromID* = object
type
  SDL_RenderGetMetalCommandEncoder_renamed_SDL_GetRenderMetalCommandEncoder* = object
type
  SDL_SYSTEM_CURSOR_WINDOW_TOP_renamed_SDL_SYSTEM_CURSOR_N_RESIZE* = object
type
  struct_SDL_Renderer* = object
type
  SDL_SwapLE32_renamed_SDL_Swap32LE* = object
type
  SDL_RenderSetVSync_renamed_SDL_SetRenderVSync* = object
type
  SDL_AtomicCASPtr_renamed_SDL_CompareAndSwapAtomicPointer* = object
type
  SDL_CONTROLLER_BUTTON_PADDLE1_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1* = object
type
  SDL_ScaleModeLinear_renamed_SDL_SCALEMODE_LINEAR* = object
type
  Sint8* = int8              
  Uint8* = uint8             
  Sint16* = int16            
  Uint16* = uint16           
  Sint32* = int32            
  Uint32* = uint32           
  Sint64* = int64            
  Uint64* = uint64           
  SDL_Time* = Sint64         
  struct_SDL_alignment_test* {.pure, inheritable, bycopy.} = object
    a*: Uint8                
    b*: pointer
  SDL_alignment_test* = struct_SDL_alignment_test 
  SDL_DUMMY_ENUM* = enum_SDL_DUMMY_ENUM 
  SDL_malloc_func* = proc (a0: csize_t): pointer {.cdecl.} 
  SDL_calloc_func* = proc (a0: csize_t; a1: csize_t): pointer {.cdecl.} 
  SDL_realloc_func* = proc (a0: pointer; a1: csize_t): pointer {.cdecl.} 
  SDL_free_func* = proc (a0: pointer): void {.cdecl.} 
  SDL_Environment* = struct_SDL_Environment 
  SDL_CompareCallback* = proc (a0: pointer; a1: pointer): cint {.cdecl.} 
  SDL_CompareCallback_r* = proc (a0: pointer; a1: pointer; a2: pointer): cint {.
      cdecl.}                
  wchar_t* = cushort         
  SDL_iconv_t* = ptr struct_SDL_iconv_data_t 
  SDL_FunctionPointer* = proc (): void {.cdecl.} 
  SDL_AssertState* = enum_SDL_AssertState 
  struct_SDL_AssertData* {.pure, inheritable, bycopy.} = object
    always_ignore*: bool     
    trigger_count*: cuint
    condition*: cstring
    filename*: cstring
    linenum*: cint
    function*: cstring
    next*: ptr struct_SDL_AssertData
  SDL_AssertData* = struct_SDL_AssertData 
  SDL_AssertionHandler* = proc (a0: ptr SDL_AssertData; a1: pointer): SDL_AssertState {.
      cdecl.}                
  SDL_SpinLock* = cint       
  struct_SDL_AtomicInt* {.pure, inheritable, bycopy.} = object
    value*: cint             
  SDL_AtomicInt* = struct_SDL_AtomicInt 
  struct_SDL_AtomicU32* {.pure, inheritable, bycopy.} = object
    value*: Uint32           
  SDL_AtomicU32* = struct_SDL_AtomicU32 
  SDL_PropertiesID* = Uint32 
  SDL_PropertyType* = enum_SDL_PropertyType 
  SDL_CleanupPropertyCallback* = proc (a0: pointer; a1: pointer): void {.cdecl.} 
  SDL_EnumeratePropertiesCallback* = proc (a0: pointer; a1: SDL_PropertiesID;
      a2: cstring): void {.cdecl.} 
  SDL_Thread* = struct_SDL_Thread 
  SDL_ThreadID_typedef* = Uint64 
  SDL_TLSID* = SDL_AtomicInt 
  SDL_ThreadPriority* = enum_SDL_ThreadPriority 
  SDL_ThreadFunction* = proc (a0: pointer): cint {.cdecl.} 
  SDL_TLSDestructorCallback* = proc (a0: pointer): void {.cdecl.} 
  SDL_Mutex_typedef* = struct_SDL_Mutex 
  SDL_RWLock* = struct_SDL_RWLock 
  SDL_Semaphore* = struct_SDL_Semaphore 
  SDL_Condition* = struct_SDL_Condition 
  SDL_InitStatus* = enum_SDL_InitStatus 
  struct_SDL_InitState* {.pure, inheritable, bycopy.} = object
    status*: SDL_AtomicInt   
    thread*: SDL_ThreadID_typedef
    reserved*: pointer
  SDL_InitState* = struct_SDL_InitState 
  SDL_IOStatus* = enum_SDL_IOStatus 
  SDL_IOWhence* = enum_SDL_IOWhence 
  struct_SDL_IOStreamInterface* {.pure, inheritable, bycopy.} = object
    version*: Uint32         
    size*: proc (a0: pointer): Sint64 {.cdecl.}
    seek*: proc (a0: pointer; a1: Sint64; a2: SDL_IOWhence): Sint64 {.cdecl.}
    read*: proc (a0: pointer; a1: pointer; a2: csize_t; a3: ptr SDL_IOStatus): csize_t {.
        cdecl.}
    write*: proc (a0: pointer; a1: pointer; a2: csize_t; a3: ptr SDL_IOStatus): csize_t {.
        cdecl.}
    flush*: proc (a0: pointer; a1: ptr SDL_IOStatus): bool {.cdecl.}
    close*: proc (a0: pointer): bool {.cdecl.}
  SDL_IOStreamInterface* = struct_SDL_IOStreamInterface 
  SDL_IOStream* = struct_SDL_IOStream 
  SDL_AudioFormat* = enum_SDL_AudioFormat 
  SDL_AudioDeviceID* = Uint32 
  struct_SDL_AudioSpec* {.pure, inheritable, bycopy.} = object
    format*: SDL_AudioFormat 
    channels*: cint
    freq*: cint
  SDL_AudioSpec* = struct_SDL_AudioSpec 
  SDL_AudioStream* = struct_SDL_AudioStream 
  SDL_AudioStreamCallback* = proc (a0: pointer; a1: ptr SDL_AudioStream;
                                   a2: cint; a3: cint): void {.cdecl.} 
  SDL_AudioPostmixCallback* = proc (a0: pointer; a1: ptr SDL_AudioSpec;
                                    a2: ptr cfloat; a3: cint): void {.cdecl.} 
  SDL_BlendMode* = Uint32    
  SDL_BlendOperation* = enum_SDL_BlendOperation 
  SDL_BlendFactor* = enum_SDL_BlendFactor 
  SDL_PixelType* = enum_SDL_PixelType 
  SDL_BitmapOrder* = enum_SDL_BitmapOrder 
  SDL_PackedOrder* = enum_SDL_PackedOrder 
  SDL_ArrayOrder* = enum_SDL_ArrayOrder 
  SDL_PackedLayout* = enum_SDL_PackedLayout 
  SDL_PixelFormat* = enum_SDL_PixelFormat 
  SDL_ColorType* = enum_SDL_ColorType 
  SDL_ColorRange* = enum_SDL_ColorRange 
  SDL_ColorPrimaries* = enum_SDL_ColorPrimaries 
  SDL_TransferCharacteristics* = enum_SDL_TransferCharacteristics 
  SDL_MatrixCoefficients* = enum_SDL_MatrixCoefficients 
  SDL_ChromaLocation* = enum_SDL_ChromaLocation 
  SDL_Colorspace* = enum_SDL_Colorspace 
  struct_SDL_Color* {.pure, inheritable, bycopy.} = object
    r*: Uint8                
    g*: Uint8
    b*: Uint8
    a*: Uint8
  SDL_Color* = struct_SDL_Color 
  struct_SDL_FColor* {.pure, inheritable, bycopy.} = object
    r*: cfloat               
    g*: cfloat
    b*: cfloat
    a*: cfloat
  SDL_FColor* = struct_SDL_FColor 
  struct_SDL_Palette* {.pure, inheritable, bycopy.} = object
    ncolors*: cint           
    colors*: ptr SDL_Color
    version*: Uint32
    refcount*: cint
  SDL_Palette* = struct_SDL_Palette 
  struct_SDL_PixelFormatDetails* {.pure, inheritable, bycopy.} = object
    format*: SDL_PixelFormat 
    bits_per_pixel*: Uint8
    bytes_per_pixel*: Uint8
    padding*: array[2'i64, Uint8]
    Rmask*: Uint32
    Gmask*: Uint32
    Bmask*: Uint32
    Amask*: Uint32
    Rbits*: Uint8
    Gbits*: Uint8
    Bbits*: Uint8
    Abits*: Uint8
    Rshift*: Uint8
    Gshift*: Uint8
    Bshift*: Uint8
    Ashift*: Uint8
  SDL_PixelFormatDetails* = struct_SDL_PixelFormatDetails 
  struct_SDL_Point* {.pure, inheritable, bycopy.} = object
    x*: cint                 
    y*: cint
  SDL_Point* = struct_SDL_Point 
  struct_SDL_FPoint* {.pure, inheritable, bycopy.} = object
    x*: cfloat               
    y*: cfloat
  SDL_FPoint* = struct_SDL_FPoint 
  struct_SDL_Rect* {.pure, inheritable, bycopy.} = object
    x*: cint                 
    y*: cint
    w*: cint
    h*: cint
  SDL_Rect* = struct_SDL_Rect 
  struct_SDL_FRect* {.pure, inheritable, bycopy.} = object
    x*: cfloat               
    y*: cfloat
    w*: cfloat
    h*: cfloat
  SDL_FRect* = struct_SDL_FRect 
  SDL_SurfaceFlags* = Uint32 
  SDL_ScaleMode* = enum_SDL_ScaleMode 
  SDL_FlipMode* = enum_SDL_FlipMode 
  struct_SDL_Surface* {.pure, inheritable, bycopy.} = object
    flags*: SDL_SurfaceFlags 
    format*: SDL_PixelFormat
    w*: cint
    h*: cint
    pitch*: cint
    pixels*: pointer
    refcount*: cint
    reserved*: pointer
  SDL_Surface* = struct_SDL_Surface 
  SDL_CameraID* = Uint32     
  SDL_Camera* = struct_SDL_Camera 
  struct_SDL_CameraSpec* {.pure, inheritable, bycopy.} = object
    format*: SDL_PixelFormat 
    colorspace*: SDL_Colorspace
    width*: cint
    height*: cint
    framerate_numerator*: cint
    framerate_denominator*: cint
  SDL_CameraSpec* = struct_SDL_CameraSpec 
  SDL_CameraPosition* = enum_SDL_CameraPosition 
  SDL_ClipboardDataCallback* = proc (a0: pointer; a1: cstring; a2: ptr csize_t): pointer {.
      cdecl.}                
  SDL_ClipboardCleanupCallback* = proc (a0: pointer): void {.cdecl.} 
  SDL_DisplayID* = Uint32    
  SDL_WindowID* = Uint32     
  SDL_SystemTheme* = enum_SDL_SystemTheme 
  SDL_DisplayModeData* = struct_SDL_DisplayModeData 
  struct_SDL_DisplayMode* {.pure, inheritable, bycopy.} = object
    displayID*: SDL_DisplayID 
    format*: SDL_PixelFormat
    w*: cint
    h*: cint
    pixel_density*: cfloat
    refresh_rate*: cfloat
    refresh_rate_numerator*: cint
    refresh_rate_denominator*: cint
    internal*: ptr SDL_DisplayModeData
  SDL_DisplayMode* = struct_SDL_DisplayMode 
  SDL_DisplayOrientation* = enum_SDL_DisplayOrientation 
  SDL_Window* = struct_SDL_Window 
  SDL_WindowFlags* = Uint64  
  SDL_FlashOperation* = enum_SDL_FlashOperation 
  SDL_GLContext* = ptr struct_SDL_GLContextState 
  SDL_EGLDisplay* = pointer  
  SDL_EGLConfig* = pointer   
  SDL_EGLSurface* = pointer  
  SDL_EGLAttrib* = intptr_t  
  intptr_t* = clonglong      
  SDL_EGLint* = cint         
  SDL_EGLAttribArrayCallback* = proc (a0: pointer): ptr SDL_EGLAttrib {.cdecl.} 
  SDL_EGLIntArrayCallback* = proc (a0: pointer; a1: SDL_EGLDisplay;
                                   a2: SDL_EGLConfig): ptr SDL_EGLint {.cdecl.} 
  SDL_GLAttr_typedef* = enum_SDL_GLAttr 
  SDL_GLProfile_typedef* = Uint32 
  SDL_GLContextFlag_typedef* = Uint32 
  SDL_GLContextReleaseFlag_typedef* = Uint32 
  SDL_GLContextResetNotification* = Uint32 
  SDL_HitTestResult* = enum_SDL_HitTestResult 
  SDL_HitTest* = proc (a0: ptr SDL_Window; a1: ptr SDL_Point; a2: pointer): SDL_HitTestResult {.
      cdecl.}                
  struct_SDL_DialogFileFilter* {.pure, inheritable, bycopy.} = object
    name*: cstring           
    pattern*: cstring
  SDL_DialogFileFilter* = struct_SDL_DialogFileFilter 
  SDL_DialogFileCallback* = proc (a0: pointer; a1: ptr cstring; a2: cint): void {.
      cdecl.}                
  struct_SDL_GUID* {.pure, inheritable, bycopy.} = object
    data*: array[16'i64, Uint8] 
  SDL_GUID* = struct_SDL_GUID 
  SDL_PowerState* = enum_SDL_PowerState 
  SDL_Sensor* = struct_SDL_Sensor 
  SDL_SensorID* = Uint32     
  SDL_SensorType* = enum_SDL_SensorType 
  SDL_Joystick* = struct_SDL_Joystick 
  SDL_JoystickID* = Uint32   
  SDL_JoystickType* = enum_SDL_JoystickType 
  SDL_JoystickConnectionState* = enum_SDL_JoystickConnectionState 
  struct_SDL_VirtualJoystickTouchpadDesc* {.pure, inheritable, bycopy.} = object
    nfingers*: Uint16        
    padding*: array[3'i64, Uint16]
  SDL_VirtualJoystickTouchpadDesc* = struct_SDL_VirtualJoystickTouchpadDesc 
  struct_SDL_VirtualJoystickSensorDesc* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_SensorType 
    rate*: cfloat
  SDL_VirtualJoystickSensorDesc* = struct_SDL_VirtualJoystickSensorDesc 
  struct_SDL_VirtualJoystickDesc* {.pure, inheritable, bycopy.} = object
    version*: Uint32         
    type_field*: Uint16
    padding*: Uint16
    vendor_id*: Uint16
    product_id*: Uint16
    naxes*: Uint16
    nbuttons*: Uint16
    nballs*: Uint16
    nhats*: Uint16
    ntouchpads*: Uint16
    nsensors*: Uint16
    padding2*: array[2'i64, Uint16]
    button_mask*: Uint32
    axis_mask*: Uint32
    name*: cstring
    touchpads*: ptr SDL_VirtualJoystickTouchpadDesc
    sensors*: ptr SDL_VirtualJoystickSensorDesc
    userdata*: pointer
    Update*: proc (a0: pointer): void {.cdecl.}
    SetPlayerIndex*: proc (a0: pointer; a1: cint): void {.cdecl.}
    Rumble*: proc (a0: pointer; a1: Uint16; a2: Uint16): bool {.cdecl.}
    RumbleTriggers*: proc (a0: pointer; a1: Uint16; a2: Uint16): bool {.cdecl.}
    SetLED*: proc (a0: pointer; a1: Uint8; a2: Uint8; a3: Uint8): bool {.cdecl.}
    SendEffect*: proc (a0: pointer; a1: pointer; a2: cint): bool {.cdecl.}
    SetSensorsEnabled*: proc (a0: pointer; a1: bool): bool {.cdecl.}
    Cleanup*: proc (a0: pointer): void {.cdecl.}
  SDL_VirtualJoystickDesc* = struct_SDL_VirtualJoystickDesc 
  SDL_Gamepad* = struct_SDL_Gamepad 
  SDL_GamepadType* = enum_SDL_GamepadType 
  SDL_GamepadButton* = enum_SDL_GamepadButton 
  SDL_GamepadButtonLabel* = enum_SDL_GamepadButtonLabel 
  SDL_GamepadAxis* = enum_SDL_GamepadAxis 
  SDL_GamepadBindingType* = enum_SDL_GamepadBindingType 
  struct_SDL_GamepadBinding_input_t_axis_t* {.pure, inheritable, bycopy.} = object
    axis*: cint
    axis_min*: cint
    axis_max*: cint
  struct_SDL_GamepadBinding_input_t_hat_t* {.pure, inheritable, bycopy.} = object
    hat*: cint
    hat_mask*: cint
  struct_SDL_GamepadBinding_input_t* {.union, bycopy.} = object
    button*: cint
    axis*: struct_SDL_GamepadBinding_input_t_axis_t
    hat*: struct_SDL_GamepadBinding_input_t_hat_t
  struct_SDL_GamepadBinding_output_t_axis_t* {.pure, inheritable, bycopy.} = object
    axis*: SDL_GamepadAxis
    axis_min*: cint
    axis_max*: cint
  struct_SDL_GamepadBinding_output_t* {.union, bycopy.} = object
    button*: SDL_GamepadButton
    axis*: struct_SDL_GamepadBinding_output_t_axis_t
  struct_SDL_GamepadBinding* {.pure, inheritable, bycopy.} = object
    input_type*: SDL_GamepadBindingType 
    input*: struct_SDL_GamepadBinding_input_t
    output_type*: SDL_GamepadBindingType
    output*: struct_SDL_GamepadBinding_output_t
  SDL_GamepadBinding* = struct_SDL_GamepadBinding 
  SDL_Scancode* = enum_SDL_Scancode 
  SDL_Keycode* = Uint32      
  SDL_Keymod* = Uint16       
  SDL_KeyboardID* = Uint32   
  SDL_TextInputType* = enum_SDL_TextInputType 
  SDL_Capitalization* = enum_SDL_Capitalization 
  SDL_MouseID* = Uint32      
  SDL_Cursor* = struct_SDL_Cursor 
  SDL_SystemCursor* = enum_SDL_SystemCursor 
  SDL_MouseWheelDirection* = enum_SDL_MouseWheelDirection 
  SDL_MouseButtonFlags* = Uint32 
  SDL_PenID* = Uint32        
  SDL_PenInputFlags* = Uint32 
  SDL_PenAxis* = enum_SDL_PenAxis 
  SDL_TouchID* = Uint64      
  SDL_FingerID* = Uint64     
  SDL_TouchDeviceType* = enum_SDL_TouchDeviceType 
  struct_SDL_Finger* {.pure, inheritable, bycopy.} = object
    id*: SDL_FingerID        
    x*: cfloat
    y*: cfloat
    pressure*: cfloat
  SDL_Finger* = struct_SDL_Finger 
  SDL_EventType* = enum_SDL_EventType 
  struct_SDL_CommonEvent* {.pure, inheritable, bycopy.} = object
    type_field*: Uint32      
    reserved*: Uint32
    timestamp*: Uint64
  SDL_CommonEvent* = struct_SDL_CommonEvent 
  struct_SDL_DisplayEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    displayID*: SDL_DisplayID
    data1*: Sint32
    data2*: Sint32
  SDL_DisplayEvent* = struct_SDL_DisplayEvent 
  struct_SDL_WindowEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    data1*: Sint32
    data2*: Sint32
  SDL_WindowEvent* = struct_SDL_WindowEvent 
  struct_SDL_KeyboardDeviceEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_KeyboardID
  SDL_KeyboardDeviceEvent* = struct_SDL_KeyboardDeviceEvent 
  struct_SDL_KeyboardEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    which*: SDL_KeyboardID
    scancode*: SDL_Scancode
    key*: SDL_Keycode
    mod_field*: SDL_Keymod
    raw*: Uint16
    down*: bool
    repeat*: bool
  SDL_KeyboardEvent* = struct_SDL_KeyboardEvent 
  struct_SDL_TextEditingEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    text*: cstring
    start*: Sint32
    length*: Sint32
  SDL_TextEditingEvent* = struct_SDL_TextEditingEvent 
  struct_SDL_TextEditingCandidatesEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    candidates*: ptr cstring
    num_candidates*: Sint32
    selected_candidate*: Sint32
    horizontal*: bool
    padding1*: Uint8
    padding2*: Uint8
    padding3*: Uint8
  SDL_TextEditingCandidatesEvent* = struct_SDL_TextEditingCandidatesEvent 
  struct_SDL_TextInputEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    text*: cstring
  SDL_TextInputEvent* = struct_SDL_TextInputEvent 
  struct_SDL_MouseDeviceEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_MouseID
  SDL_MouseDeviceEvent* = struct_SDL_MouseDeviceEvent 
  struct_SDL_MouseMotionEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    which*: SDL_MouseID
    state*: SDL_MouseButtonFlags
    x*: cfloat
    y*: cfloat
    xrel*: cfloat
    yrel*: cfloat
  SDL_MouseMotionEvent* = struct_SDL_MouseMotionEvent 
  struct_SDL_MouseButtonEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    which*: SDL_MouseID
    button*: Uint8
    down*: bool
    clicks*: Uint8
    padding*: Uint8
    x*: cfloat
    y*: cfloat
  SDL_MouseButtonEvent* = struct_SDL_MouseButtonEvent 
  struct_SDL_MouseWheelEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    which*: SDL_MouseID
    x*: cfloat
    y*: cfloat
    direction*: SDL_MouseWheelDirection
    mouse_x*: cfloat
    mouse_y*: cfloat
  SDL_MouseWheelEvent* = struct_SDL_MouseWheelEvent 
  struct_SDL_JoyAxisEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_JoystickID
    axis*: Uint8
    padding1*: Uint8
    padding2*: Uint8
    padding3*: Uint8
    value*: Sint16
    padding4*: Uint16
  SDL_JoyAxisEvent* = struct_SDL_JoyAxisEvent 
  struct_SDL_JoyBallEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_JoystickID
    ball*: Uint8
    padding1*: Uint8
    padding2*: Uint8
    padding3*: Uint8
    xrel*: Sint16
    yrel*: Sint16
  SDL_JoyBallEvent* = struct_SDL_JoyBallEvent 
  struct_SDL_JoyHatEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_JoystickID
    hat*: Uint8
    value*: Uint8
    padding1*: Uint8
    padding2*: Uint8
  SDL_JoyHatEvent* = struct_SDL_JoyHatEvent 
  struct_SDL_JoyButtonEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_JoystickID
    button*: Uint8
    down*: bool
    padding1*: Uint8
    padding2*: Uint8
  SDL_JoyButtonEvent* = struct_SDL_JoyButtonEvent 
  struct_SDL_JoyDeviceEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_JoystickID
  SDL_JoyDeviceEvent* = struct_SDL_JoyDeviceEvent 
  struct_SDL_JoyBatteryEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_JoystickID
    state*: SDL_PowerState
    percent*: cint
  SDL_JoyBatteryEvent* = struct_SDL_JoyBatteryEvent 
  struct_SDL_GamepadAxisEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_JoystickID
    axis*: Uint8
    padding1*: Uint8
    padding2*: Uint8
    padding3*: Uint8
    value*: Sint16
    padding4*: Uint16
  SDL_GamepadAxisEvent* = struct_SDL_GamepadAxisEvent 
  struct_SDL_GamepadButtonEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_JoystickID
    button*: Uint8
    down*: bool
    padding1*: Uint8
    padding2*: Uint8
  SDL_GamepadButtonEvent* = struct_SDL_GamepadButtonEvent 
  struct_SDL_GamepadDeviceEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_JoystickID
  SDL_GamepadDeviceEvent* = struct_SDL_GamepadDeviceEvent 
  struct_SDL_GamepadTouchpadEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_JoystickID
    touchpad*: Sint32
    finger*: Sint32
    x*: cfloat
    y*: cfloat
    pressure*: cfloat
  SDL_GamepadTouchpadEvent* = struct_SDL_GamepadTouchpadEvent 
  struct_SDL_GamepadSensorEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_JoystickID
    sensor*: Sint32
    data*: array[3'i64, cfloat]
    sensor_timestamp*: Uint64
  SDL_GamepadSensorEvent* = struct_SDL_GamepadSensorEvent 
  struct_SDL_AudioDeviceEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_AudioDeviceID
    recording*: bool
    padding1*: Uint8
    padding2*: Uint8
    padding3*: Uint8
  SDL_AudioDeviceEvent* = struct_SDL_AudioDeviceEvent 
  struct_SDL_CameraDeviceEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_CameraID
  SDL_CameraDeviceEvent* = struct_SDL_CameraDeviceEvent 
  struct_SDL_TouchFingerEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    touchID*: SDL_TouchID
    fingerID*: SDL_FingerID
    x*: cfloat
    y*: cfloat
    dx*: cfloat
    dy*: cfloat
    pressure*: cfloat
    windowID*: SDL_WindowID
  SDL_TouchFingerEvent* = struct_SDL_TouchFingerEvent 
  struct_SDL_PenProximityEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    which*: SDL_PenID
  SDL_PenProximityEvent* = struct_SDL_PenProximityEvent 
  struct_SDL_PenMotionEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    which*: SDL_PenID
    pen_state*: SDL_PenInputFlags
    x*: cfloat
    y*: cfloat
  SDL_PenMotionEvent* = struct_SDL_PenMotionEvent 
  struct_SDL_PenTouchEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    which*: SDL_PenID
    pen_state*: SDL_PenInputFlags
    x*: cfloat
    y*: cfloat
    eraser*: bool
    down*: bool
  SDL_PenTouchEvent* = struct_SDL_PenTouchEvent 
  struct_SDL_PenButtonEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    which*: SDL_PenID
    pen_state*: SDL_PenInputFlags
    x*: cfloat
    y*: cfloat
    button*: Uint8
    down*: bool
  SDL_PenButtonEvent* = struct_SDL_PenButtonEvent 
  struct_SDL_PenAxisEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    which*: SDL_PenID
    pen_state*: SDL_PenInputFlags
    x*: cfloat
    y*: cfloat
    axis*: SDL_PenAxis
    value*: cfloat
  SDL_PenAxisEvent* = struct_SDL_PenAxisEvent 
  struct_SDL_DropEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    x*: cfloat
    y*: cfloat
    source*: cstring
    data*: cstring
  SDL_DropEvent* = struct_SDL_DropEvent 
  struct_SDL_ClipboardEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    owner*: bool
    n_mime_types*: Sint32
    mime_types*: ptr cstring
  SDL_ClipboardEvent* = struct_SDL_ClipboardEvent 
  struct_SDL_SensorEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
    which*: SDL_SensorID
    data*: array[6'i64, cfloat]
    sensor_timestamp*: Uint64
  SDL_SensorEvent* = struct_SDL_SensorEvent 
  struct_SDL_QuitEvent* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_EventType 
    reserved*: Uint32
    timestamp*: Uint64
  SDL_QuitEvent* = struct_SDL_QuitEvent 
  struct_SDL_UserEvent* {.pure, inheritable, bycopy.} = object
    type_field*: Uint32      
    reserved*: Uint32
    timestamp*: Uint64
    windowID*: SDL_WindowID
    code*: Sint32
    data1*: pointer
    data2*: pointer
  SDL_UserEvent_typedef* = struct_SDL_UserEvent 
  union_SDL_Event* {.union, bycopy.} = object
    type_field*: Uint32      
    common*: SDL_CommonEvent
    display*: SDL_DisplayEvent
    window*: SDL_WindowEvent
    kdevice*: SDL_KeyboardDeviceEvent
    key*: SDL_KeyboardEvent
    edit*: SDL_TextEditingEvent
    edit_candidates*: SDL_TextEditingCandidatesEvent
    text*: SDL_TextInputEvent
    mdevice*: SDL_MouseDeviceEvent
    motion*: SDL_MouseMotionEvent
    button*: SDL_MouseButtonEvent
    wheel*: SDL_MouseWheelEvent
    jdevice*: SDL_JoyDeviceEvent
    jaxis*: SDL_JoyAxisEvent
    jball*: SDL_JoyBallEvent
    jhat*: SDL_JoyHatEvent
    jbutton*: SDL_JoyButtonEvent
    jbattery*: SDL_JoyBatteryEvent
    gdevice*: SDL_GamepadDeviceEvent
    gaxis*: SDL_GamepadAxisEvent
    gbutton*: SDL_GamepadButtonEvent
    gtouchpad*: SDL_GamepadTouchpadEvent
    gsensor*: SDL_GamepadSensorEvent
    adevice*: SDL_AudioDeviceEvent
    cdevice*: SDL_CameraDeviceEvent
    sensor*: SDL_SensorEvent
    quit*: SDL_QuitEvent
    user*: SDL_UserEvent_typedef
    tfinger*: SDL_TouchFingerEvent
    pproximity*: SDL_PenProximityEvent
    ptouch*: SDL_PenTouchEvent
    pmotion*: SDL_PenMotionEvent
    pbutton*: SDL_PenButtonEvent
    paxis*: SDL_PenAxisEvent
    drop*: SDL_DropEvent
    clipboard*: SDL_ClipboardEvent
    padding*: array[128'i64, Uint8]
  SDL_Event* = union_SDL_Event 
  SDL_EventAction_typedef* = enum_SDL_EventAction 
  SDL_EventFilter* = proc (a0: pointer; a1: ptr SDL_Event): bool {.cdecl.} 
  SDL_Folder* = enum_SDL_Folder 
  SDL_PathType* = enum_SDL_PathType 
  struct_SDL_PathInfo* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_PathType 
    size*: Uint64
    create_time*: SDL_Time
    modify_time*: SDL_Time
    access_time*: SDL_Time
  SDL_PathInfo* = struct_SDL_PathInfo 
  SDL_GlobFlags* = Uint32    
  SDL_EnumerationResult* = enum_SDL_EnumerationResult 
  SDL_EnumerateDirectoryCallback* = proc (a0: pointer; a1: cstring; a2: cstring): SDL_EnumerationResult {.
      cdecl.}                
  SDL_GPUDevice* = struct_SDL_GPUDevice 
  SDL_GPUBuffer* = struct_SDL_GPUBuffer 
  SDL_GPUTransferBuffer* = struct_SDL_GPUTransferBuffer 
  SDL_GPUTexture* = struct_SDL_GPUTexture 
  SDL_GPUSampler* = struct_SDL_GPUSampler 
  SDL_GPUShader* = struct_SDL_GPUShader 
  SDL_GPUComputePipeline* = struct_SDL_GPUComputePipeline 
  SDL_GPUGraphicsPipeline* = struct_SDL_GPUGraphicsPipeline 
  SDL_GPUCommandBuffer* = struct_SDL_GPUCommandBuffer 
  SDL_GPURenderPass* = struct_SDL_GPURenderPass 
  SDL_GPUComputePass* = struct_SDL_GPUComputePass 
  SDL_GPUCopyPass* = struct_SDL_GPUCopyPass 
  SDL_GPUFence* = struct_SDL_GPUFence 
  SDL_GPUPrimitiveType* = enum_SDL_GPUPrimitiveType 
  SDL_GPULoadOp* = enum_SDL_GPULoadOp 
  SDL_GPUStoreOp* = enum_SDL_GPUStoreOp 
  SDL_GPUIndexElementSize* = enum_SDL_GPUIndexElementSize 
  SDL_GPUTextureFormat* = enum_SDL_GPUTextureFormat 
  SDL_GPUTextureUsageFlags* = Uint32 
  SDL_GPUTextureType* = enum_SDL_GPUTextureType 
  SDL_GPUSampleCount* = enum_SDL_GPUSampleCount 
  SDL_GPUCubeMapFace* = enum_SDL_GPUCubeMapFace 
  SDL_GPUBufferUsageFlags* = Uint32 
  SDL_GPUTransferBufferUsage* = enum_SDL_GPUTransferBufferUsage 
  SDL_GPUShaderStage* = enum_SDL_GPUShaderStage 
  SDL_GPUShaderFormat* = Uint32 
  SDL_GPUVertexElementFormat* = enum_SDL_GPUVertexElementFormat 
  SDL_GPUVertexInputRate* = enum_SDL_GPUVertexInputRate 
  SDL_GPUFillMode* = enum_SDL_GPUFillMode 
  SDL_GPUCullMode* = enum_SDL_GPUCullMode 
  SDL_GPUFrontFace* = enum_SDL_GPUFrontFace 
  SDL_GPUCompareOp* = enum_SDL_GPUCompareOp 
  SDL_GPUStencilOp* = enum_SDL_GPUStencilOp 
  SDL_GPUBlendOp* = enum_SDL_GPUBlendOp 
  SDL_GPUBlendFactor* = enum_SDL_GPUBlendFactor 
  SDL_GPUColorComponentFlags* = Uint8 
  SDL_GPUFilter* = enum_SDL_GPUFilter 
  SDL_GPUSamplerMipmapMode* = enum_SDL_GPUSamplerMipmapMode 
  SDL_GPUSamplerAddressMode* = enum_SDL_GPUSamplerAddressMode 
  SDL_GPUPresentMode* = enum_SDL_GPUPresentMode 
  SDL_GPUSwapchainComposition* = enum_SDL_GPUSwapchainComposition 
  struct_SDL_GPUViewport* {.pure, inheritable, bycopy.} = object
    x*: cfloat               
    y*: cfloat
    w*: cfloat
    h*: cfloat
    min_depth*: cfloat
    max_depth*: cfloat
  SDL_GPUViewport* = struct_SDL_GPUViewport 
  struct_SDL_GPUTextureTransferInfo* {.pure, inheritable, bycopy.} = object
    transfer_buffer*: ptr SDL_GPUTransferBuffer 
    offset*: Uint32
    pixels_per_row*: Uint32
    rows_per_layer*: Uint32
  SDL_GPUTextureTransferInfo* = struct_SDL_GPUTextureTransferInfo 
  struct_SDL_GPUTransferBufferLocation* {.pure, inheritable, bycopy.} = object
    transfer_buffer*: ptr SDL_GPUTransferBuffer 
    offset*: Uint32
  SDL_GPUTransferBufferLocation* = struct_SDL_GPUTransferBufferLocation 
  struct_SDL_GPUTextureLocation* {.pure, inheritable, bycopy.} = object
    texture*: ptr SDL_GPUTexture 
    mip_level*: Uint32
    layer*: Uint32
    x*: Uint32
    y*: Uint32
    z*: Uint32
  SDL_GPUTextureLocation* = struct_SDL_GPUTextureLocation 
  struct_SDL_GPUTextureRegion* {.pure, inheritable, bycopy.} = object
    texture*: ptr SDL_GPUTexture 
    mip_level*: Uint32
    layer*: Uint32
    x*: Uint32
    y*: Uint32
    z*: Uint32
    w*: Uint32
    h*: Uint32
    d*: Uint32
  SDL_GPUTextureRegion* = struct_SDL_GPUTextureRegion 
  struct_SDL_GPUBlitRegion* {.pure, inheritable, bycopy.} = object
    texture*: ptr SDL_GPUTexture 
    mip_level*: Uint32
    layer_or_depth_plane*: Uint32
    x*: Uint32
    y*: Uint32
    w*: Uint32
    h*: Uint32
  SDL_GPUBlitRegion* = struct_SDL_GPUBlitRegion 
  struct_SDL_GPUBufferLocation* {.pure, inheritable, bycopy.} = object
    buffer*: ptr SDL_GPUBuffer 
    offset*: Uint32
  SDL_GPUBufferLocation* = struct_SDL_GPUBufferLocation 
  struct_SDL_GPUBufferRegion* {.pure, inheritable, bycopy.} = object
    buffer*: ptr SDL_GPUBuffer 
    offset*: Uint32
    size*: Uint32
  SDL_GPUBufferRegion* = struct_SDL_GPUBufferRegion 
  struct_SDL_GPUIndirectDrawCommand* {.pure, inheritable, bycopy.} = object
    num_vertices*: Uint32    
    num_instances*: Uint32
    first_vertex*: Uint32
    first_instance*: Uint32
  SDL_GPUIndirectDrawCommand* = struct_SDL_GPUIndirectDrawCommand 
  struct_SDL_GPUIndexedIndirectDrawCommand* {.pure, inheritable, bycopy.} = object
    num_indices*: Uint32     
    num_instances*: Uint32
    first_index*: Uint32
    vertex_offset*: Sint32
    first_instance*: Uint32
  SDL_GPUIndexedIndirectDrawCommand* = struct_SDL_GPUIndexedIndirectDrawCommand 
  struct_SDL_GPUIndirectDispatchCommand* {.pure, inheritable, bycopy.} = object
    groupcount_x*: Uint32    
    groupcount_y*: Uint32
    groupcount_z*: Uint32
  SDL_GPUIndirectDispatchCommand* = struct_SDL_GPUIndirectDispatchCommand 
  struct_SDL_GPUSamplerCreateInfo* {.pure, inheritable, bycopy.} = object
    min_filter*: SDL_GPUFilter 
    mag_filter*: SDL_GPUFilter
    mipmap_mode*: SDL_GPUSamplerMipmapMode
    address_mode_u*: SDL_GPUSamplerAddressMode
    address_mode_v*: SDL_GPUSamplerAddressMode
    address_mode_w*: SDL_GPUSamplerAddressMode
    mip_lod_bias*: cfloat
    max_anisotropy*: cfloat
    compare_op*: SDL_GPUCompareOp
    min_lod*: cfloat
    max_lod*: cfloat
    enable_anisotropy*: bool
    enable_compare*: bool
    padding1*: Uint8
    padding2*: Uint8
    props*: SDL_PropertiesID
  SDL_GPUSamplerCreateInfo* = struct_SDL_GPUSamplerCreateInfo 
  struct_SDL_GPUVertexBufferDescription* {.pure, inheritable, bycopy.} = object
    slot*: Uint32            
    pitch*: Uint32
    input_rate*: SDL_GPUVertexInputRate
    instance_step_rate*: Uint32
  SDL_GPUVertexBufferDescription* = struct_SDL_GPUVertexBufferDescription 
  struct_SDL_GPUVertexAttribute* {.pure, inheritable, bycopy.} = object
    location*: Uint32        
    buffer_slot*: Uint32
    format*: SDL_GPUVertexElementFormat
    offset*: Uint32
  SDL_GPUVertexAttribute* = struct_SDL_GPUVertexAttribute 
  struct_SDL_GPUVertexInputState* {.pure, inheritable, bycopy.} = object
    vertex_buffer_descriptions*: ptr SDL_GPUVertexBufferDescription 
    num_vertex_buffers*: Uint32
    vertex_attributes*: ptr SDL_GPUVertexAttribute
    num_vertex_attributes*: Uint32
  SDL_GPUVertexInputState* = struct_SDL_GPUVertexInputState 
  struct_SDL_GPUStencilOpState* {.pure, inheritable, bycopy.} = object
    fail_op*: SDL_GPUStencilOp 
    pass_op*: SDL_GPUStencilOp
    depth_fail_op*: SDL_GPUStencilOp
    compare_op*: SDL_GPUCompareOp
  SDL_GPUStencilOpState* = struct_SDL_GPUStencilOpState 
  struct_SDL_GPUColorTargetBlendState* {.pure, inheritable, bycopy.} = object
    src_color_blendfactor*: SDL_GPUBlendFactor 
    dst_color_blendfactor*: SDL_GPUBlendFactor
    color_blend_op*: SDL_GPUBlendOp
    src_alpha_blendfactor*: SDL_GPUBlendFactor
    dst_alpha_blendfactor*: SDL_GPUBlendFactor
    alpha_blend_op*: SDL_GPUBlendOp
    color_write_mask*: SDL_GPUColorComponentFlags
    enable_blend*: bool
    enable_color_write_mask*: bool
    padding1*: Uint8
    padding2*: Uint8
  SDL_GPUColorTargetBlendState* = struct_SDL_GPUColorTargetBlendState 
  struct_SDL_GPUShaderCreateInfo* {.pure, inheritable, bycopy.} = object
    code_size*: csize_t      
    code*: ptr Uint8
    entrypoint*: cstring
    format*: SDL_GPUShaderFormat
    stage*: SDL_GPUShaderStage
    num_samplers*: Uint32
    num_storage_textures*: Uint32
    num_storage_buffers*: Uint32
    num_uniform_buffers*: Uint32
    props*: SDL_PropertiesID
  SDL_GPUShaderCreateInfo* = struct_SDL_GPUShaderCreateInfo 
  struct_SDL_GPUTextureCreateInfo* {.pure, inheritable, bycopy.} = object
    type_field*: SDL_GPUTextureType 
    format*: SDL_GPUTextureFormat
    usage*: SDL_GPUTextureUsageFlags
    width*: Uint32
    height*: Uint32
    layer_count_or_depth*: Uint32
    num_levels*: Uint32
    sample_count*: SDL_GPUSampleCount
    props*: SDL_PropertiesID
  SDL_GPUTextureCreateInfo* = struct_SDL_GPUTextureCreateInfo 
  struct_SDL_GPUBufferCreateInfo* {.pure, inheritable, bycopy.} = object
    usage*: SDL_GPUBufferUsageFlags 
    size*: Uint32
    props*: SDL_PropertiesID
  SDL_GPUBufferCreateInfo* = struct_SDL_GPUBufferCreateInfo 
  struct_SDL_GPUTransferBufferCreateInfo* {.pure, inheritable, bycopy.} = object
    usage*: SDL_GPUTransferBufferUsage 
    size*: Uint32
    props*: SDL_PropertiesID
  SDL_GPUTransferBufferCreateInfo* = struct_SDL_GPUTransferBufferCreateInfo 
  struct_SDL_GPURasterizerState* {.pure, inheritable, bycopy.} = object
    fill_mode*: SDL_GPUFillMode 
    cull_mode*: SDL_GPUCullMode
    front_face*: SDL_GPUFrontFace
    depth_bias_constant_factor*: cfloat
    depth_bias_clamp*: cfloat
    depth_bias_slope_factor*: cfloat
    enable_depth_bias*: bool
    enable_depth_clip*: bool
    padding1*: Uint8
    padding2*: Uint8
  SDL_GPURasterizerState* = struct_SDL_GPURasterizerState 
  struct_SDL_GPUMultisampleState* {.pure, inheritable, bycopy.} = object
    sample_count*: SDL_GPUSampleCount 
    sample_mask*: Uint32
    enable_mask*: bool
    padding1*: Uint8
    padding2*: Uint8
    padding3*: Uint8
  SDL_GPUMultisampleState* = struct_SDL_GPUMultisampleState 
  struct_SDL_GPUDepthStencilState* {.pure, inheritable, bycopy.} = object
    compare_op*: SDL_GPUCompareOp 
    back_stencil_state*: SDL_GPUStencilOpState
    front_stencil_state*: SDL_GPUStencilOpState
    compare_mask*: Uint8
    write_mask*: Uint8
    enable_depth_test*: bool
    enable_depth_write*: bool
    enable_stencil_test*: bool
    padding1*: Uint8
    padding2*: Uint8
    padding3*: Uint8
  SDL_GPUDepthStencilState* = struct_SDL_GPUDepthStencilState 
  struct_SDL_GPUColorTargetDescription* {.pure, inheritable, bycopy.} = object
    format*: SDL_GPUTextureFormat 
    blend_state*: SDL_GPUColorTargetBlendState
  SDL_GPUColorTargetDescription* = struct_SDL_GPUColorTargetDescription 
  struct_SDL_GPUGraphicsPipelineTargetInfo* {.pure, inheritable, bycopy.} = object
    color_target_descriptions*: ptr SDL_GPUColorTargetDescription 
    num_color_targets*: Uint32
    depth_stencil_format*: SDL_GPUTextureFormat
    has_depth_stencil_target*: bool
    padding1*: Uint8
    padding2*: Uint8
    padding3*: Uint8
  SDL_GPUGraphicsPipelineTargetInfo* = struct_SDL_GPUGraphicsPipelineTargetInfo 
  struct_SDL_GPUGraphicsPipelineCreateInfo* {.pure, inheritable, bycopy.} = object
    vertex_shader*: ptr SDL_GPUShader 
    fragment_shader*: ptr SDL_GPUShader
    vertex_input_state*: SDL_GPUVertexInputState
    primitive_type*: SDL_GPUPrimitiveType
    rasterizer_state*: SDL_GPURasterizerState
    multisample_state*: SDL_GPUMultisampleState
    depth_stencil_state*: SDL_GPUDepthStencilState
    target_info*: SDL_GPUGraphicsPipelineTargetInfo
    props*: SDL_PropertiesID
  SDL_GPUGraphicsPipelineCreateInfo* = struct_SDL_GPUGraphicsPipelineCreateInfo 
  struct_SDL_GPUComputePipelineCreateInfo* {.pure, inheritable, bycopy.} = object
    code_size*: csize_t      
    code*: ptr Uint8
    entrypoint*: cstring
    format*: SDL_GPUShaderFormat
    num_samplers*: Uint32
    num_readonly_storage_textures*: Uint32
    num_readonly_storage_buffers*: Uint32
    num_readwrite_storage_textures*: Uint32
    num_readwrite_storage_buffers*: Uint32
    num_uniform_buffers*: Uint32
    threadcount_x*: Uint32
    threadcount_y*: Uint32
    threadcount_z*: Uint32
    props*: SDL_PropertiesID
  SDL_GPUComputePipelineCreateInfo* = struct_SDL_GPUComputePipelineCreateInfo 
  struct_SDL_GPUColorTargetInfo* {.pure, inheritable, bycopy.} = object
    texture*: ptr SDL_GPUTexture 
    mip_level*: Uint32
    layer_or_depth_plane*: Uint32
    clear_color*: SDL_FColor
    load_op*: SDL_GPULoadOp
    store_op*: SDL_GPUStoreOp
    resolve_texture*: ptr SDL_GPUTexture
    resolve_mip_level*: Uint32
    resolve_layer*: Uint32
    cycle*: bool
    cycle_resolve_texture*: bool
    padding1*: Uint8
    padding2*: Uint8
  SDL_GPUColorTargetInfo* = struct_SDL_GPUColorTargetInfo 
  struct_SDL_GPUDepthStencilTargetInfo* {.pure, inheritable, bycopy.} = object
    texture*: ptr SDL_GPUTexture 
    clear_depth*: cfloat
    load_op*: SDL_GPULoadOp
    store_op*: SDL_GPUStoreOp
    stencil_load_op*: SDL_GPULoadOp
    stencil_store_op*: SDL_GPUStoreOp
    cycle*: bool
    clear_stencil*: Uint8
    padding1*: Uint8
    padding2*: Uint8
  SDL_GPUDepthStencilTargetInfo* = struct_SDL_GPUDepthStencilTargetInfo 
  struct_SDL_GPUBlitInfo* {.pure, inheritable, bycopy.} = object
    source*: SDL_GPUBlitRegion 
    destination*: SDL_GPUBlitRegion
    load_op*: SDL_GPULoadOp
    clear_color*: SDL_FColor
    flip_mode*: SDL_FlipMode
    filter*: SDL_GPUFilter
    cycle*: bool
    padding1*: Uint8
    padding2*: Uint8
    padding3*: Uint8
  SDL_GPUBlitInfo* = struct_SDL_GPUBlitInfo 
  struct_SDL_GPUBufferBinding* {.pure, inheritable, bycopy.} = object
    buffer*: ptr SDL_GPUBuffer 
    offset*: Uint32
  SDL_GPUBufferBinding* = struct_SDL_GPUBufferBinding 
  struct_SDL_GPUTextureSamplerBinding* {.pure, inheritable, bycopy.} = object
    texture*: ptr SDL_GPUTexture 
    sampler*: ptr SDL_GPUSampler
  SDL_GPUTextureSamplerBinding* = struct_SDL_GPUTextureSamplerBinding 
  struct_SDL_GPUStorageBufferReadWriteBinding* {.pure, inheritable, bycopy.} = object
    buffer*: ptr SDL_GPUBuffer 
    cycle*: bool
    padding1*: Uint8
    padding2*: Uint8
    padding3*: Uint8
  SDL_GPUStorageBufferReadWriteBinding* = struct_SDL_GPUStorageBufferReadWriteBinding 
  struct_SDL_GPUStorageTextureReadWriteBinding* {.pure, inheritable, bycopy.} = object
    texture*: ptr SDL_GPUTexture 
    mip_level*: Uint32
    layer*: Uint32
    cycle*: bool
    padding1*: Uint8
    padding2*: Uint8
    padding3*: Uint8
  SDL_GPUStorageTextureReadWriteBinding* = struct_SDL_GPUStorageTextureReadWriteBinding 
  SDL_Haptic* = struct_SDL_Haptic 
  struct_SDL_HapticDirection* {.pure, inheritable, bycopy.} = object
    type_field*: Uint8       
    dir*: array[3'i64, Sint32]
  SDL_HapticDirection* = struct_SDL_HapticDirection 
  struct_SDL_HapticConstant* {.pure, inheritable, bycopy.} = object
    type_field*: Uint16      
    direction*: SDL_HapticDirection
    length*: Uint32
    delay*: Uint16
    button*: Uint16
    interval*: Uint16
    level*: Sint16
    attack_length*: Uint16
    attack_level*: Uint16
    fade_length*: Uint16
    fade_level*: Uint16
  SDL_HapticConstant* = struct_SDL_HapticConstant 
  struct_SDL_HapticPeriodic* {.pure, inheritable, bycopy.} = object
    type_field*: Uint16      
    direction*: SDL_HapticDirection
    length*: Uint32
    delay*: Uint16
    button*: Uint16
    interval*: Uint16
    period*: Uint16
    magnitude*: Sint16
    offset*: Sint16
    phase*: Uint16
    attack_length*: Uint16
    attack_level*: Uint16
    fade_length*: Uint16
    fade_level*: Uint16
  SDL_HapticPeriodic* = struct_SDL_HapticPeriodic 
  struct_SDL_HapticCondition* {.pure, inheritable, bycopy.} = object
    type_field*: Uint16      
    direction*: SDL_HapticDirection
    length*: Uint32
    delay*: Uint16
    button*: Uint16
    interval*: Uint16
    right_sat*: array[3'i64, Uint16]
    left_sat*: array[3'i64, Uint16]
    right_coeff*: array[3'i64, Sint16]
    left_coeff*: array[3'i64, Sint16]
    deadband*: array[3'i64, Uint16]
    center*: array[3'i64, Sint16]
  SDL_HapticCondition* = struct_SDL_HapticCondition 
  struct_SDL_HapticRamp* {.pure, inheritable, bycopy.} = object
    type_field*: Uint16      
    direction*: SDL_HapticDirection
    length*: Uint32
    delay*: Uint16
    button*: Uint16
    interval*: Uint16
    start*: Sint16
    end_field*: Sint16
    attack_length*: Uint16
    attack_level*: Uint16
    fade_length*: Uint16
    fade_level*: Uint16
  SDL_HapticRamp* = struct_SDL_HapticRamp 
  struct_SDL_HapticLeftRight* {.pure, inheritable, bycopy.} = object
    type_field*: Uint16      
    length*: Uint32
    large_magnitude*: Uint16
    small_magnitude*: Uint16
  SDL_HapticLeftRight* = struct_SDL_HapticLeftRight 
  struct_SDL_HapticCustom* {.pure, inheritable, bycopy.} = object
    type_field*: Uint16      
    direction*: SDL_HapticDirection
    length*: Uint32
    delay*: Uint16
    button*: Uint16
    interval*: Uint16
    channels*: Uint8
    period*: Uint16
    samples*: Uint16
    data*: ptr Uint16
    attack_length*: Uint16
    attack_level*: Uint16
    fade_length*: Uint16
    fade_level*: Uint16
  SDL_HapticCustom* = struct_SDL_HapticCustom 
  union_SDL_HapticEffect* {.union, bycopy.} = object
    type_field*: Uint16      
    constant*: SDL_HapticConstant
    periodic*: SDL_HapticPeriodic
    condition*: SDL_HapticCondition
    ramp*: SDL_HapticRamp
    leftright*: SDL_HapticLeftRight
    custom*: SDL_HapticCustom
  SDL_HapticEffect* = union_SDL_HapticEffect 
  SDL_HapticID* = Uint32     
  SDL_hid_device* = struct_SDL_hid_device 
  SDL_hid_bus_type* = enum_SDL_hid_bus_type 
  struct_SDL_hid_device_info* {.pure, inheritable, bycopy.} = object
    path*: cstring           
    vendor_id*: cushort
    product_id*: cushort
    serial_number*: ptr wchar_t
    release_number*: cushort
    manufacturer_string*: ptr wchar_t
    product_string*: ptr wchar_t
    usage_page*: cushort
    usage*: cushort
    interface_number*: cint
    interface_class*: cint
    interface_subclass*: cint
    interface_protocol*: cint
    bus_type*: SDL_hid_bus_type
    next*: ptr struct_SDL_hid_device_info
  SDL_hid_device_info* = struct_SDL_hid_device_info 
  SDL_HintPriority* = enum_SDL_HintPriority 
  SDL_HintCallback* = proc (a0: pointer; a1: cstring; a2: cstring; a3: cstring): void {.
      cdecl.}                
  SDL_InitFlags* = Uint32    
  SDL_AppResult* = enum_SDL_AppResult 
  SDL_AppInit_func* = proc (a0: ptr pointer; a1: cint;
                            a2: ptr UncheckedArray[cstring]): SDL_AppResult {.
      cdecl.}                
  SDL_AppIterate_func* = proc (a0: pointer): SDL_AppResult {.cdecl.} 
  SDL_AppEvent_func* = proc (a0: pointer; a1: ptr SDL_Event): SDL_AppResult {.
      cdecl.}                
  SDL_AppQuit_func* = proc (a0: pointer; a1: SDL_AppResult): void {.cdecl.} 
  SDL_SharedObject* = struct_SDL_SharedObject 
  struct_SDL_Locale* {.pure, inheritable, bycopy.} = object
    language*: cstring       
    country*: cstring
  SDL_Locale* = struct_SDL_Locale 
  SDL_LogCategory* = enum_SDL_LogCategory 
  SDL_LogPriority* = enum_SDL_LogPriority 
  SDL_LogOutputFunction* = proc (a0: pointer; a1: cint; a2: SDL_LogPriority;
                                 a3: cstring): void {.cdecl.} 
  SDL_MessageBoxFlags* = Uint32 
  SDL_MessageBoxButtonFlags* = Uint32 
  struct_SDL_MessageBoxButtonData* {.pure, inheritable, bycopy.} = object
    flags*: SDL_MessageBoxButtonFlags 
    buttonID*: cint
    text*: cstring
  SDL_MessageBoxButtonData* = struct_SDL_MessageBoxButtonData 
  struct_SDL_MessageBoxColor* {.pure, inheritable, bycopy.} = object
    r*: Uint8                
    g*: Uint8
    b*: Uint8
  SDL_MessageBoxColor* = struct_SDL_MessageBoxColor 
  SDL_MessageBoxColorType* = enum_SDL_MessageBoxColorType 
  struct_SDL_MessageBoxColorScheme* {.pure, inheritable, bycopy.} = object
    colors*: array[5'i64, SDL_MessageBoxColor] 
  SDL_MessageBoxColorScheme* = struct_SDL_MessageBoxColorScheme 
  struct_SDL_MessageBoxData* {.pure, inheritable, bycopy.} = object
    flags*: SDL_MessageBoxFlags 
    window*: ptr SDL_Window
    title*: cstring
    message*: cstring
    numbuttons*: cint
    buttons*: ptr SDL_MessageBoxButtonData
    colorScheme*: ptr SDL_MessageBoxColorScheme
  SDL_MessageBoxData* = struct_SDL_MessageBoxData 
  SDL_MetalView* = pointer   
  SDL_Process* = struct_SDL_Process 
  SDL_ProcessIO* = enum_SDL_ProcessIO 
  struct_SDL_Vertex* {.pure, inheritable, bycopy.} = object
    position*: SDL_FPoint    
    color*: SDL_FColor
    tex_coord*: SDL_FPoint
  SDL_Vertex* = struct_SDL_Vertex 
  SDL_TextureAccess* = enum_SDL_TextureAccess 
  SDL_RendererLogicalPresentation* = enum_SDL_RendererLogicalPresentation 
  SDL_Renderer* = struct_SDL_Renderer 
  struct_SDL_Texture* {.pure, inheritable, bycopy.} = object
    format*: SDL_PixelFormat 
    w*: cint
    h*: cint
    refcount*: cint
  SDL_Texture* = struct_SDL_Texture 
  struct_SDL_StorageInterface* {.pure, inheritable, bycopy.} = object
    version*: Uint32         
    close*: proc (a0: pointer): bool {.cdecl.}
    ready*: proc (a0: pointer): bool {.cdecl.}
    enumerate*: proc (a0: pointer; a1: cstring;
                      a2: SDL_EnumerateDirectoryCallback; a3: pointer): bool {.
        cdecl.}
    info*: proc (a0: pointer; a1: cstring; a2: ptr SDL_PathInfo): bool {.cdecl.}
    read_file*: proc (a0: pointer; a1: cstring; a2: pointer; a3: Uint64): bool {.
        cdecl.}
    write_file*: proc (a0: pointer; a1: cstring; a2: pointer; a3: Uint64): bool {.
        cdecl.}
    mkdir*: proc (a0: pointer; a1: cstring): bool {.cdecl.}
    remove*: proc (a0: pointer; a1: cstring): bool {.cdecl.}
    rename*: proc (a0: pointer; a1: cstring; a2: cstring): bool {.cdecl.}
    copy*: proc (a0: pointer; a1: cstring; a2: cstring): bool {.cdecl.}
    space_remaining*: proc (a0: pointer): Uint64 {.cdecl.}
  SDL_StorageInterface* = struct_SDL_StorageInterface 
  SDL_Storage* = struct_SDL_Storage 
  MSG* = struct_tagMSG       
  SDL_WindowsMessageHook* = proc (a0: pointer; a1: ptr MSG): bool {.cdecl.} 
  XEvent* = union_XEvent     
  SDL_X11EventHook* = proc (a0: pointer; a1: ptr XEvent): bool {.cdecl.} 
  SDL_Sandbox* = enum_SDL_Sandbox 
  struct_SDL_DateTime* {.pure, inheritable, bycopy.} = object
    year*: cint              
    month*: cint
    day*: cint
    hour*: cint
    minute*: cint
    second*: cint
    nanosecond*: cint
    day_of_week*: cint
    utc_offset*: cint
  SDL_DateTime* = struct_SDL_DateTime 
  SDL_DateFormat* = enum_SDL_DateFormat 
  SDL_TimeFormat* = enum_SDL_TimeFormat 
  SDL_TimerID* = Uint32      
  SDL_TimerCallback* = proc (a0: pointer; a1: SDL_TimerID; a2: Uint32): Uint32 {.
      cdecl.}                
  SDL_NSTimerCallback* = proc (a0: pointer; a1: SDL_TimerID; a2: Uint64): Uint64 {.
      cdecl.}                
  uintptr_t* = culonglong    
  internal_beginthreadex_proc_type* = proc (a0: pointer): cuint {.cdecl.} 
when 1 is static:
  const
    SDL_PLATFORM_WINDOWS* = 1 
else:
  let SDL_PLATFORM_WINDOWS* = 1 
when 0 is static:
  const
    HAVE_WINAPIFAMILY_H* = 0 
else:
  let HAVE_WINAPIFAMILY_H* = 0 
when 0 is static:
  const
    WINAPI_FAMILY_WINRT* = 0 
else:
  let WINAPI_FAMILY_WINRT* = 0 
when 0 is static:
  const
    SDL_WINAPI_FAMILY_PHONE* = 0 
else:
  let SDL_WINAPI_FAMILY_PHONE* = 0 
when 1 is static:
  const
    SDL_PLATFORM_WIN32* = 1  
else:
  let SDL_PLATFORM_WIN32* = 1 
when SDL_MAX_SINT64 is typedesc:
  type
    SDL_MAX_TIME* = SDL_MAX_SINT64 
else:
  when SDL_MAX_SINT64 is static:
    const
      SDL_MAX_TIME* = SDL_MAX_SINT64 
  else:
    let SDL_MAX_TIME* = SDL_MAX_SINT64 
when SDL_MIN_SINT64 is typedesc:
  type
    SDL_MIN_TIME* = SDL_MIN_SINT64 
else:
  when SDL_MIN_SINT64 is static:
    const
      SDL_MIN_TIME* = SDL_MIN_SINT64 
  else:
    let SDL_MIN_TIME* = SDL_MIN_SINT64 
when 0.0000001192092895507812 is static:
  const
    SDL_FLT_EPSILON* = 0.0000001192092895507812 
else:
  let SDL_FLT_EPSILON* = 0.0000001192092895507812 
when "I64d" is static:
  const
    SDL_PRIs64* = "I64d"     
else:
  let SDL_PRIs64* = "I64d"   
when "I64u" is static:
  const
    SDL_PRIu64* = "I64u"     
else:
  let SDL_PRIu64* = "I64u"   
when "I64x" is static:
  const
    SDL_PRIx64* = "I64x"     
else:
  let SDL_PRIx64* = "I64x"   
when "I64X" is static:
  const
    SDL_PRIX64_const* = "I64X" 
else:
  let SDL_PRIX64_const* = "I64X" 
when "d" is static:
  const
    PRId32* = "d"            
else:
  let PRId32* = "d"          
when "u" is static:
  const
    PRIu32* = "u"            
else:
  let PRIu32* = "u"          
when "x" is static:
  const
    PRIx32* = "x"            
else:
  let PRIx32* = "x"          
when "X" is static:
  const
    PRIX32_const* = "X"      
else:
  let PRIX32_const* = "X"    
when "I64" is static:
  const
    SDL_PRILL_PREFIX* = "I64" 
else:
  let SDL_PRILL_PREFIX* = "I64" 
proc SDL_memcpy*(dst: pointer; src: pointer; len: csize_t): pointer {.cdecl,
    importc: "SDL_memcpy".}
proc memcpy*(internal_Dst: pointer; internal_Src: pointer;
             internal_MaxCount: culonglong): pointer {.cdecl, importc: "memcpy".}
proc SDL_memmove*(dst: pointer; src: pointer; len: csize_t): pointer {.cdecl,
    importc: "SDL_memmove".}
proc memmove*(internal_Dst: pointer; internal_Src: pointer;
              internal_MaxCount: culonglong): pointer {.cdecl,
    importc: "memmove".}
proc SDL_memset*(dst: pointer; c: cint; len: csize_t): pointer {.cdecl,
    importc: "SDL_memset".}
proc memset*(internal_Dst: pointer; internal_Val: cint;
             internal_Size: culonglong): pointer {.cdecl, importc: "memset".}
when 65533 is static:
  const
    SDL_INVALID_UNICODE_CODEPOINT* = 65533 
else:
  let SDL_INVALID_UNICODE_CODEPOINT* = 65533 
when 3.141592653589793 is static:
  const
    SDL_PI_D* = 3.141592653589793 
else:
  let SDL_PI_D* = 3.141592653589793 
when 3.141592653589793 is static:
  const
    SDL_PI_F* = 3.141592653589793 
else:
  let SDL_PI_F* = 3.141592653589793 
when 2 is static:
  const
    SDL_ASSERT_LEVEL* = 2    
else:
  let SDL_ASSERT_LEVEL* = 2  
when 0 is static:
  const
    SDL_NULL_WHILE_LOOP_CONDITION* = 0 
else:
  let SDL_NULL_WHILE_LOOP_CONDITION* = 0 
when 1234 is static:
  const
    SDL_LIL_ENDIAN* = 1234   
else:
  let SDL_LIL_ENDIAN* = 1234 
when 4321 is static:
  const
    SDL_BIG_ENDIAN* = 4321   
else:
  let SDL_BIG_ENDIAN* = 4321 
when SDL_LIL_ENDIAN is typedesc:
  type
    SDL_BYTEORDER* = SDL_LIL_ENDIAN 
else:
  when SDL_LIL_ENDIAN is static:
    const
      SDL_BYTEORDER* = SDL_LIL_ENDIAN 
  else:
    let SDL_BYTEORDER* = SDL_LIL_ENDIAN 
proc internal_beginthreadex*(internal_Security: pointer;
                             internal_StackSize: cuint; internal_StartAddress: internal_beginthreadex_proc_type;
                             internal_ArgList: pointer;
                             internal_InitFlag: cuint;
                             internal_ThrdAddr: ptr cuint): uintptr_t {.cdecl,
    importc: "_beginthreadex".}
proc internal_endthreadex*(internal_Retval: cuint): void {.cdecl,
    importc: "_endthreadex".}
when "SDL.thread.create.entry_function" is static:
  const
    SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER* = "SDL.thread.create.entry_function" 
else:
  let SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER* = "SDL.thread.create.entry_function" 
when "SDL.thread.create.name" is static:
  const
    SDL_PROP_THREAD_CREATE_NAME_STRING* = "SDL.thread.create.name" 
else:
  let SDL_PROP_THREAD_CREATE_NAME_STRING* = "SDL.thread.create.name" 
when "SDL.thread.create.userdata" is static:
  const
    SDL_PROP_THREAD_CREATE_USERDATA_POINTER* = "SDL.thread.create.userdata" 
else:
  let SDL_PROP_THREAD_CREATE_USERDATA_POINTER* = "SDL.thread.create.userdata" 
when "SDL.thread.create.stacksize" is static:
  const
    SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER* = "SDL.thread.create.stacksize" 
else:
  let SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER* = "SDL.thread.create.stacksize" 
when "SDL.iostream.windows.handle" is static:
  const
    SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER* = "SDL.iostream.windows.handle" 
else:
  let SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER* = "SDL.iostream.windows.handle" 
when "SDL.iostream.stdio.file" is static:
  const
    SDL_PROP_IOSTREAM_STDIO_FILE_POINTER* = "SDL.iostream.stdio.file" 
else:
  let SDL_PROP_IOSTREAM_STDIO_FILE_POINTER* = "SDL.iostream.stdio.file" 
when "SDL.iostream.file_descriptor" is static:
  const
    SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER* = "SDL.iostream.file_descriptor" 
else:
  let SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER* = "SDL.iostream.file_descriptor" 
when "SDL.iostream.android.aasset" is static:
  const
    SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER* = "SDL.iostream.android.aasset" 
else:
  let SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER* = "SDL.iostream.android.aasset" 
when "SDL.iostream.memory.base" is static:
  const
    SDL_PROP_IOSTREAM_MEMORY_POINTER* = "SDL.iostream.memory.base" 
else:
  let SDL_PROP_IOSTREAM_MEMORY_POINTER* = "SDL.iostream.memory.base" 
when "SDL.iostream.memory.size" is static:
  const
    SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER* = "SDL.iostream.memory.size" 
else:
  let SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER* = "SDL.iostream.memory.size" 
when "SDL.iostream.dynamic.memory" is static:
  const
    SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER* = "SDL.iostream.dynamic.memory" 
else:
  let SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER* = "SDL.iostream.dynamic.memory" 
when "SDL.iostream.dynamic.chunksize" is static:
  const
    SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER* = "SDL.iostream.dynamic.chunksize" 
else:
  let SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER* = "SDL.iostream.dynamic.chunksize" 
when cast[cuint](255'i64) is static:
  const
    SDL_AUDIO_MASK_BITSIZE* = cast[cuint](255'i64) 
else:
  let SDL_AUDIO_MASK_BITSIZE* = cast[cuint](255'i64) 
when cast[cuint](0'i64) is static:
  const
    SDL_BLENDMODE_NONE* = cast[cuint](0'i64) 
else:
  let SDL_BLENDMODE_NONE* = cast[cuint](0'i64) 
when cast[cuint](1'i64) is static:
  const
    SDL_BLENDMODE_BLEND* = cast[cuint](1'i64) 
else:
  let SDL_BLENDMODE_BLEND* = cast[cuint](1'i64) 
when cast[cuint](16'i64) is static:
  const
    SDL_BLENDMODE_BLEND_PREMULTIPLIED* = cast[cuint](16'i64) 
else:
  let SDL_BLENDMODE_BLEND_PREMULTIPLIED* = cast[cuint](16'i64) 
when cast[cuint](2'i64) is static:
  const
    SDL_BLENDMODE_ADD* = cast[cuint](2'i64) 
else:
  let SDL_BLENDMODE_ADD* = cast[cuint](2'i64) 
when cast[cuint](32'i64) is static:
  const
    SDL_BLENDMODE_ADD_PREMULTIPLIED* = cast[cuint](32'i64) 
else:
  let SDL_BLENDMODE_ADD_PREMULTIPLIED* = cast[cuint](32'i64) 
when cast[cuint](4'i64) is static:
  const
    SDL_BLENDMODE_MOD* = cast[cuint](4'i64) 
else:
  let SDL_BLENDMODE_MOD* = cast[cuint](4'i64) 
when cast[cuint](8'i64) is static:
  const
    SDL_BLENDMODE_MUL* = cast[cuint](8'i64) 
else:
  let SDL_BLENDMODE_MUL* = cast[cuint](8'i64) 
when cast[cuint](2147483647'i64) is static:
  const
    SDL_BLENDMODE_INVALID* = cast[cuint](2147483647'i64) 
else:
  let SDL_BLENDMODE_INVALID* = cast[cuint](2147483647'i64) 
when 255 is static:
  const
    SDL_ALPHA_OPAQUE* = 255  
else:
  let SDL_ALPHA_OPAQUE* = 255 
when 1.0 is static:
  const
    SDL_ALPHA_OPAQUE_FLOAT* = 1.0 
else:
  let SDL_ALPHA_OPAQUE_FLOAT* = 1.0 
when 0 is static:
  const
    SDL_ALPHA_TRANSPARENT* = 0 
else:
  let SDL_ALPHA_TRANSPARENT* = 0 
when 0.0 is static:
  const
    SDL_ALPHA_TRANSPARENT_FLOAT* = 0.0 
else:
  let SDL_ALPHA_TRANSPARENT_FLOAT* = 0.0 
when cast[cuint](1'i64) is static:
  const
    SDL_SURFACE_PREALLOCATED* = cast[cuint](1'i64) 
else:
  let SDL_SURFACE_PREALLOCATED* = cast[cuint](1'i64) 
when cast[cuint](2'i64) is static:
  const
    SDL_SURFACE_LOCK_NEEDED* = cast[cuint](2'i64) 
else:
  let SDL_SURFACE_LOCK_NEEDED* = cast[cuint](2'i64) 
when cast[cuint](4'i64) is static:
  const
    SDL_SURFACE_LOCKED* = cast[cuint](4'i64) 
else:
  let SDL_SURFACE_LOCKED* = cast[cuint](4'i64) 
when cast[cuint](8'i64) is static:
  const
    SDL_SURFACE_SIMD_ALIGNED* = cast[cuint](8'i64) 
else:
  let SDL_SURFACE_SIMD_ALIGNED* = cast[cuint](8'i64) 
when "SDL.surface.SDR_white_point" is static:
  const
    SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT* = "SDL.surface.SDR_white_point" 
else:
  let SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT* = "SDL.surface.SDR_white_point" 
when "SDL.surface.HDR_headroom" is static:
  const
    SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT* = "SDL.surface.HDR_headroom" 
else:
  let SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT* = "SDL.surface.HDR_headroom" 
when "SDL.surface.tonemap" is static:
  const
    SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING* = "SDL.surface.tonemap" 
else:
  let SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING* = "SDL.surface.tonemap" 
when 128 is static:
  const
    SDL_CACHELINE_SIZE* = 128 
else:
  let SDL_CACHELINE_SIZE* = 128 
when "SDL.video.wayland.wl_display" is static:
  const
    SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER* = "SDL.video.wayland.wl_display" 
else:
  let SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER* = "SDL.video.wayland.wl_display" 
when cast[cuint](536805376'i64) is static:
  const
    SDL_WINDOWPOS_UNDEFINED_MASK* = cast[cuint](536805376'i64) 
else:
  let SDL_WINDOWPOS_UNDEFINED_MASK* = cast[cuint](536805376'i64) 
when cast[cuint](805240832'i64) is static:
  const
    SDL_WINDOWPOS_CENTERED_MASK* = cast[cuint](805240832'i64) 
else:
  let SDL_WINDOWPOS_CENTERED_MASK* = cast[cuint](805240832'i64) 
when 1 is static:
  const
    SDL_GL_CONTEXT_PROFILE_CORE* = 1 
else:
  let SDL_GL_CONTEXT_PROFILE_CORE* = 1 
when 2 is static:
  const
    SDL_GL_CONTEXT_PROFILE_COMPATIBILITY* = 2 
else:
  let SDL_GL_CONTEXT_PROFILE_COMPATIBILITY* = 2 
when 4 is static:
  const
    SDL_GL_CONTEXT_PROFILE_ES* = 4 
else:
  let SDL_GL_CONTEXT_PROFILE_ES* = 4 
when 1 is static:
  const
    SDL_GL_CONTEXT_DEBUG_FLAG* = 1 
else:
  let SDL_GL_CONTEXT_DEBUG_FLAG* = 1 
when 2 is static:
  const
    SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG* = 2 
else:
  let SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG* = 2 
when 4 is static:
  const
    SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG* = 4 
else:
  let SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG* = 4 
when 8 is static:
  const
    SDL_GL_CONTEXT_RESET_ISOLATION_FLAG* = 8 
else:
  let SDL_GL_CONTEXT_RESET_ISOLATION_FLAG* = 8 
when 0 is static:
  const
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE* = 0 
else:
  let SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE* = 0 
when 1 is static:
  const
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH* = 1 
else:
  let SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH* = 1 
when 0 is static:
  const
    SDL_GL_CONTEXT_RESET_NO_NOTIFICATION* = 0 
else:
  let SDL_GL_CONTEXT_RESET_NO_NOTIFICATION* = 0 
when 1 is static:
  const
    SDL_GL_CONTEXT_RESET_LOSE_CONTEXT* = 1 
else:
  let SDL_GL_CONTEXT_RESET_LOSE_CONTEXT* = 1 
when "SDL.display.HDR_enabled" is static:
  const
    SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN* = "SDL.display.HDR_enabled" 
else:
  let SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN* = "SDL.display.HDR_enabled" 
when "SDL.display.KMSDRM.panel_orientation" is static:
  const
    SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER* = "SDL.display.KMSDRM.panel_orientation" 
else:
  let SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER* = "SDL.display.KMSDRM.panel_orientation" 
when "SDL.window.create.always_on_top" is static:
  const
    SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN* = "SDL.window.create.always_on_top" 
else:
  let SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN* = "SDL.window.create.always_on_top" 
when "SDL.window.create.borderless" is static:
  const
    SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN* = "SDL.window.create.borderless" 
else:
  let SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN* = "SDL.window.create.borderless" 
when "SDL.window.create.focusable" is static:
  const
    SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN* = "SDL.window.create.focusable" 
else:
  let SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN* = "SDL.window.create.focusable" 
when "SDL.window.create.external_graphics_context" is static:
  const
    SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN* = "SDL.window.create.external_graphics_context" 
else:
  let SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN* = "SDL.window.create.external_graphics_context" 
when "SDL.window.create.flags" is static:
  const
    SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER* = "SDL.window.create.flags" 
else:
  let SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER* = "SDL.window.create.flags" 
when "SDL.window.create.fullscreen" is static:
  const
    SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN* = "SDL.window.create.fullscreen" 
else:
  let SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN* = "SDL.window.create.fullscreen" 
when "SDL.window.create.height" is static:
  const
    SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER* = "SDL.window.create.height" 
else:
  let SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER* = "SDL.window.create.height" 
when "SDL.window.create.hidden" is static:
  const
    SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN* = "SDL.window.create.hidden" 
else:
  let SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN* = "SDL.window.create.hidden" 
when "SDL.window.create.high_pixel_density" is static:
  const
    SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN* = "SDL.window.create.high_pixel_density" 
else:
  let SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN* = "SDL.window.create.high_pixel_density" 
when "SDL.window.create.maximized" is static:
  const
    SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN* = "SDL.window.create.maximized" 
else:
  let SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN* = "SDL.window.create.maximized" 
when "SDL.window.create.menu" is static:
  const
    SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN* = "SDL.window.create.menu" 
else:
  let SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN* = "SDL.window.create.menu" 
when "SDL.window.create.metal" is static:
  const
    SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN* = "SDL.window.create.metal" 
else:
  let SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN* = "SDL.window.create.metal" 
when "SDL.window.create.minimized" is static:
  const
    SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN* = "SDL.window.create.minimized" 
else:
  let SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN* = "SDL.window.create.minimized" 
when "SDL.window.create.modal" is static:
  const
    SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN* = "SDL.window.create.modal" 
else:
  let SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN* = "SDL.window.create.modal" 
when "SDL.window.create.mouse_grabbed" is static:
  const
    SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN* = "SDL.window.create.mouse_grabbed" 
else:
  let SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN* = "SDL.window.create.mouse_grabbed" 
when "SDL.window.create.opengl" is static:
  const
    SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN* = "SDL.window.create.opengl" 
else:
  let SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN* = "SDL.window.create.opengl" 
when "SDL.window.create.parent" is static:
  const
    SDL_PROP_WINDOW_CREATE_PARENT_POINTER* = "SDL.window.create.parent" 
else:
  let SDL_PROP_WINDOW_CREATE_PARENT_POINTER* = "SDL.window.create.parent" 
when "SDL.window.create.resizable" is static:
  const
    SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN* = "SDL.window.create.resizable" 
else:
  let SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN* = "SDL.window.create.resizable" 
when "SDL.window.create.title" is static:
  const
    SDL_PROP_WINDOW_CREATE_TITLE_STRING* = "SDL.window.create.title" 
else:
  let SDL_PROP_WINDOW_CREATE_TITLE_STRING* = "SDL.window.create.title" 
when "SDL.window.create.transparent" is static:
  const
    SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN* = "SDL.window.create.transparent" 
else:
  let SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN* = "SDL.window.create.transparent" 
when "SDL.window.create.tooltip" is static:
  const
    SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN* = "SDL.window.create.tooltip" 
else:
  let SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN* = "SDL.window.create.tooltip" 
when "SDL.window.create.utility" is static:
  const
    SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN* = "SDL.window.create.utility" 
else:
  let SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN* = "SDL.window.create.utility" 
when "SDL.window.create.vulkan" is static:
  const
    SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN* = "SDL.window.create.vulkan" 
else:
  let SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN* = "SDL.window.create.vulkan" 
when "SDL.window.create.width" is static:
  const
    SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER* = "SDL.window.create.width" 
else:
  let SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER* = "SDL.window.create.width" 
when "SDL.window.create.x" is static:
  const
    SDL_PROP_WINDOW_CREATE_X_NUMBER* = "SDL.window.create.x" 
else:
  let SDL_PROP_WINDOW_CREATE_X_NUMBER* = "SDL.window.create.x" 
when "SDL.window.create.y" is static:
  const
    SDL_PROP_WINDOW_CREATE_Y_NUMBER* = "SDL.window.create.y" 
else:
  let SDL_PROP_WINDOW_CREATE_Y_NUMBER* = "SDL.window.create.y" 
when "SDL.window.create.cocoa.window" is static:
  const
    SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER* = "SDL.window.create.cocoa.window" 
else:
  let SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER* = "SDL.window.create.cocoa.window" 
when "SDL.window.create.cocoa.view" is static:
  const
    SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER* = "SDL.window.create.cocoa.view" 
else:
  let SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER* = "SDL.window.create.cocoa.view" 
when "SDL.window.create.wayland.surface_role_custom" is static:
  const
    SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN* = "SDL.window.create.wayland.surface_role_custom" 
else:
  let SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN* = "SDL.window.create.wayland.surface_role_custom" 
when "SDL.window.create.wayland.create_egl_window" is static:
  const
    SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN* = "SDL.window.create.wayland.create_egl_window" 
else:
  let SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN* = "SDL.window.create.wayland.create_egl_window" 
when "SDL.window.create.wayland.wl_surface" is static:
  const
    SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER* = "SDL.window.create.wayland.wl_surface" 
else:
  let SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER* = "SDL.window.create.wayland.wl_surface" 
when "SDL.window.create.win32.hwnd" is static:
  const
    SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER* = "SDL.window.create.win32.hwnd" 
else:
  let SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER* = "SDL.window.create.win32.hwnd" 
when "SDL.window.create.win32.pixel_format_hwnd" is static:
  const
    SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER* = "SDL.window.create.win32.pixel_format_hwnd" 
else:
  let SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER* = "SDL.window.create.win32.pixel_format_hwnd" 
when "SDL.window.create.x11.window" is static:
  const
    SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER* = "SDL.window.create.x11.window" 
else:
  let SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER* = "SDL.window.create.x11.window" 
when "SDL.window.shape" is static:
  const
    SDL_PROP_WINDOW_SHAPE_POINTER* = "SDL.window.shape" 
else:
  let SDL_PROP_WINDOW_SHAPE_POINTER* = "SDL.window.shape" 
when "SDL.window.HDR_enabled" is static:
  const
    SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN* = "SDL.window.HDR_enabled" 
else:
  let SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN* = "SDL.window.HDR_enabled" 
when "SDL.window.SDR_white_level" is static:
  const
    SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT* = "SDL.window.SDR_white_level" 
else:
  let SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT* = "SDL.window.SDR_white_level" 
when "SDL.window.HDR_headroom" is static:
  const
    SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT* = "SDL.window.HDR_headroom" 
else:
  let SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT* = "SDL.window.HDR_headroom" 
when "SDL.window.android.window" is static:
  const
    SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER* = "SDL.window.android.window" 
else:
  let SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER* = "SDL.window.android.window" 
when "SDL.window.android.surface" is static:
  const
    SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER* = "SDL.window.android.surface" 
else:
  let SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER* = "SDL.window.android.surface" 
when "SDL.window.uikit.window" is static:
  const
    SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER* = "SDL.window.uikit.window" 
else:
  let SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER* = "SDL.window.uikit.window" 
when "SDL.window.uikit.metal_view_tag" is static:
  const
    SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER* = "SDL.window.uikit.metal_view_tag" 
else:
  let SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER* = "SDL.window.uikit.metal_view_tag" 
when "SDL.window.uikit.opengl.framebuffer" is static:
  const
    SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER* = "SDL.window.uikit.opengl.framebuffer" 
else:
  let SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER* = "SDL.window.uikit.opengl.framebuffer" 
when "SDL.window.uikit.opengl.renderbuffer" is static:
  const
    SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER* = "SDL.window.uikit.opengl.renderbuffer" 
else:
  let SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER* = "SDL.window.uikit.opengl.renderbuffer" 
when "SDL.window.uikit.opengl.resolve_framebuffer" is static:
  const
    SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER* = "SDL.window.uikit.opengl.resolve_framebuffer" 
else:
  let SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER* = "SDL.window.uikit.opengl.resolve_framebuffer" 
when "SDL.window.kmsdrm.dev_index" is static:
  const
    SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER* = "SDL.window.kmsdrm.dev_index" 
else:
  let SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER* = "SDL.window.kmsdrm.dev_index" 
when "SDL.window.kmsdrm.drm_fd" is static:
  const
    SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER* = "SDL.window.kmsdrm.drm_fd" 
else:
  let SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER* = "SDL.window.kmsdrm.drm_fd" 
when "SDL.window.kmsdrm.gbm_dev" is static:
  const
    SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER* = "SDL.window.kmsdrm.gbm_dev" 
else:
  let SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER* = "SDL.window.kmsdrm.gbm_dev" 
when "SDL.window.cocoa.window" is static:
  const
    SDL_PROP_WINDOW_COCOA_WINDOW_POINTER* = "SDL.window.cocoa.window" 
else:
  let SDL_PROP_WINDOW_COCOA_WINDOW_POINTER* = "SDL.window.cocoa.window" 
when "SDL.window.cocoa.metal_view_tag" is static:
  const
    SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER* = "SDL.window.cocoa.metal_view_tag" 
else:
  let SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER* = "SDL.window.cocoa.metal_view_tag" 
when "SDL.window.openvr.overlay_id" is static:
  const
    SDL_PROP_WINDOW_OPENVR_OVERLAY_ID* = "SDL.window.openvr.overlay_id" 
else:
  let SDL_PROP_WINDOW_OPENVR_OVERLAY_ID* = "SDL.window.openvr.overlay_id" 
when "SDL.window.vivante.display" is static:
  const
    SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER* = "SDL.window.vivante.display" 
else:
  let SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER* = "SDL.window.vivante.display" 
when "SDL.window.vivante.window" is static:
  const
    SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER* = "SDL.window.vivante.window" 
else:
  let SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER* = "SDL.window.vivante.window" 
when "SDL.window.vivante.surface" is static:
  const
    SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER* = "SDL.window.vivante.surface" 
else:
  let SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER* = "SDL.window.vivante.surface" 
when "SDL.window.win32.hwnd" is static:
  const
    SDL_PROP_WINDOW_WIN32_HWND_POINTER* = "SDL.window.win32.hwnd" 
else:
  let SDL_PROP_WINDOW_WIN32_HWND_POINTER* = "SDL.window.win32.hwnd" 
when "SDL.window.win32.hdc" is static:
  const
    SDL_PROP_WINDOW_WIN32_HDC_POINTER* = "SDL.window.win32.hdc" 
else:
  let SDL_PROP_WINDOW_WIN32_HDC_POINTER* = "SDL.window.win32.hdc" 
when "SDL.window.win32.instance" is static:
  const
    SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER* = "SDL.window.win32.instance" 
else:
  let SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER* = "SDL.window.win32.instance" 
when "SDL.window.wayland.display" is static:
  const
    SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER* = "SDL.window.wayland.display" 
else:
  let SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER* = "SDL.window.wayland.display" 
when "SDL.window.wayland.surface" is static:
  const
    SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER* = "SDL.window.wayland.surface" 
else:
  let SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER* = "SDL.window.wayland.surface" 
when "SDL.window.wayland.egl_window" is static:
  const
    SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER* = "SDL.window.wayland.egl_window" 
else:
  let SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER* = "SDL.window.wayland.egl_window" 
when "SDL.window.wayland.xdg_surface" is static:
  const
    SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER* = "SDL.window.wayland.xdg_surface" 
else:
  let SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER* = "SDL.window.wayland.xdg_surface" 
when "SDL.window.wayland.xdg_toplevel" is static:
  const
    SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER* = "SDL.window.wayland.xdg_toplevel" 
else:
  let SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER* = "SDL.window.wayland.xdg_toplevel" 
when "SDL.window.wayland.xdg_toplevel_export_handle" is static:
  const
    SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING* = "SDL.window.wayland.xdg_toplevel_export_handle" 
else:
  let SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING* = "SDL.window.wayland.xdg_toplevel_export_handle" 
when "SDL.window.wayland.xdg_popup" is static:
  const
    SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER* = "SDL.window.wayland.xdg_popup" 
else:
  let SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER* = "SDL.window.wayland.xdg_popup" 
when "SDL.window.wayland.xdg_positioner" is static:
  const
    SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER* = "SDL.window.wayland.xdg_positioner" 
else:
  let SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER* = "SDL.window.wayland.xdg_positioner" 
when "SDL.window.x11.display" is static:
  const
    SDL_PROP_WINDOW_X11_DISPLAY_POINTER* = "SDL.window.x11.display" 
else:
  let SDL_PROP_WINDOW_X11_DISPLAY_POINTER* = "SDL.window.x11.display" 
when "SDL.window.x11.screen" is static:
  const
    SDL_PROP_WINDOW_X11_SCREEN_NUMBER* = "SDL.window.x11.screen" 
else:
  let SDL_PROP_WINDOW_X11_SCREEN_NUMBER* = "SDL.window.x11.screen" 
when "SDL.window.x11.window" is static:
  const
    SDL_PROP_WINDOW_X11_WINDOW_NUMBER* = "SDL.window.x11.window" 
else:
  let SDL_PROP_WINDOW_X11_WINDOW_NUMBER* = "SDL.window.x11.window" 
when 0 is static:
  const
    SDL_WINDOW_SURFACE_VSYNC_DISABLED* = 0 
else:
  let SDL_WINDOW_SURFACE_VSYNC_DISABLED* = 0 
when -1 is static:
  const
    SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE* = -1 
else:
  let SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE* = -1 
when 9.80665 is static:
  const
    SDL_STANDARD_GRAVITY* = 9.80665 
else:
  let SDL_STANDARD_GRAVITY* = 9.80665 
when 32767 is static:
  const
    SDL_JOYSTICK_AXIS_MAX* = 32767 
else:
  let SDL_JOYSTICK_AXIS_MAX* = 32767 
when -32768 is static:
  const
    SDL_JOYSTICK_AXIS_MIN* = -32768 
else:
  let SDL_JOYSTICK_AXIS_MIN* = -32768 
when "SDL.joystick.cap.mono_led" is static:
  const
    SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN* = "SDL.joystick.cap.mono_led" 
else:
  let SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN* = "SDL.joystick.cap.mono_led" 
when "SDL.joystick.cap.rgb_led" is static:
  const
    SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN* = "SDL.joystick.cap.rgb_led" 
else:
  let SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN* = "SDL.joystick.cap.rgb_led" 
when "SDL.joystick.cap.player_led" is static:
  const
    SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN* = "SDL.joystick.cap.player_led" 
else:
  let SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN* = "SDL.joystick.cap.player_led" 
when "SDL.joystick.cap.rumble" is static:
  const
    SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN* = "SDL.joystick.cap.rumble" 
else:
  let SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN* = "SDL.joystick.cap.rumble" 
when "SDL.joystick.cap.trigger_rumble" is static:
  const
    SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN* = "SDL.joystick.cap.trigger_rumble" 
else:
  let SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN* = "SDL.joystick.cap.trigger_rumble" 
when cast[cuint](0'i64) is static:
  const
    SDL_HAT_CENTERED* = cast[cuint](0'i64) 
else:
  let SDL_HAT_CENTERED* = cast[cuint](0'i64) 
when cast[cuint](1'i64) is static:
  const
    SDL_HAT_UP* = cast[cuint](1'i64) 
else:
  let SDL_HAT_UP* = cast[cuint](1'i64) 
when cast[cuint](2'i64) is static:
  const
    SDL_HAT_RIGHT* = cast[cuint](2'i64) 
else:
  let SDL_HAT_RIGHT* = cast[cuint](2'i64) 
when cast[cuint](4'i64) is static:
  const
    SDL_HAT_DOWN* = cast[cuint](4'i64) 
else:
  let SDL_HAT_DOWN* = cast[cuint](4'i64) 
when cast[cuint](8'i64) is static:
  const
    SDL_HAT_LEFT* = cast[cuint](8'i64) 
else:
  let SDL_HAT_LEFT* = cast[cuint](8'i64) 
when SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN is typedesc:
  type
    SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN 
else:
  when SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN is static:
    const
      SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN 
  else:
    let SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN 
when SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN is typedesc:
  type
    SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN 
else:
  when SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN is static:
    const
      SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN 
  else:
    let SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN 
when SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN is typedesc:
  type
    SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN 
else:
  when SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN is static:
    const
      SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN 
  else:
    let SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN 
when SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN is typedesc:
  type
    SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN 
else:
  when SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN is static:
    const
      SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN 
  else:
    let SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN 
when SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN is typedesc:
  type
    SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN 
else:
  when SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN is static:
    const
      SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN 
  else:
    let SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN* = SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN 
when cast[cuint](0'i64) is static:
  const
    SDLK_UNKNOWN* = cast[cuint](0'i64) 
else:
  let SDLK_UNKNOWN* = cast[cuint](0'i64) 
when cast[cuint](13'i64) is static:
  const
    SDLK_RETURN* = cast[cuint](13'i64) 
else:
  let SDLK_RETURN* = cast[cuint](13'i64) 
when cast[cuint](27'i64) is static:
  const
    SDLK_ESCAPE* = cast[cuint](27'i64) 
else:
  let SDLK_ESCAPE* = cast[cuint](27'i64) 
when cast[cuint](8'i64) is static:
  const
    SDLK_BACKSPACE* = cast[cuint](8'i64) 
else:
  let SDLK_BACKSPACE* = cast[cuint](8'i64) 
when cast[cuint](9'i64) is static:
  const
    SDLK_TAB* = cast[cuint](9'i64) 
else:
  let SDLK_TAB* = cast[cuint](9'i64) 
when cast[cuint](32'i64) is static:
  const
    SDLK_SPACE* = cast[cuint](32'i64) 
else:
  let SDLK_SPACE* = cast[cuint](32'i64) 
when cast[cuint](33'i64) is static:
  const
    SDLK_EXCLAIM* = cast[cuint](33'i64) 
else:
  let SDLK_EXCLAIM* = cast[cuint](33'i64) 
when cast[cuint](34'i64) is static:
  const
    SDLK_DBLAPOSTROPHE* = cast[cuint](34'i64) 
else:
  let SDLK_DBLAPOSTROPHE* = cast[cuint](34'i64) 
when cast[cuint](35'i64) is static:
  const
    SDLK_HASH* = cast[cuint](35'i64) 
else:
  let SDLK_HASH* = cast[cuint](35'i64) 
when cast[cuint](36'i64) is static:
  const
    SDLK_DOLLAR* = cast[cuint](36'i64) 
else:
  let SDLK_DOLLAR* = cast[cuint](36'i64) 
when cast[cuint](37'i64) is static:
  const
    SDLK_PERCENT* = cast[cuint](37'i64) 
else:
  let SDLK_PERCENT* = cast[cuint](37'i64) 
when cast[cuint](38'i64) is static:
  const
    SDLK_AMPERSAND* = cast[cuint](38'i64) 
else:
  let SDLK_AMPERSAND* = cast[cuint](38'i64) 
when cast[cuint](39'i64) is static:
  const
    SDLK_APOSTROPHE* = cast[cuint](39'i64) 
else:
  let SDLK_APOSTROPHE* = cast[cuint](39'i64) 
when cast[cuint](40'i64) is static:
  const
    SDLK_LEFTPAREN* = cast[cuint](40'i64) 
else:
  let SDLK_LEFTPAREN* = cast[cuint](40'i64) 
when cast[cuint](41'i64) is static:
  const
    SDLK_RIGHTPAREN* = cast[cuint](41'i64) 
else:
  let SDLK_RIGHTPAREN* = cast[cuint](41'i64) 
when cast[cuint](42'i64) is static:
  const
    SDLK_ASTERISK* = cast[cuint](42'i64) 
else:
  let SDLK_ASTERISK* = cast[cuint](42'i64) 
when cast[cuint](43'i64) is static:
  const
    SDLK_PLUS* = cast[cuint](43'i64) 
else:
  let SDLK_PLUS* = cast[cuint](43'i64) 
when cast[cuint](44'i64) is static:
  const
    SDLK_COMMA* = cast[cuint](44'i64) 
else:
  let SDLK_COMMA* = cast[cuint](44'i64) 
when cast[cuint](45'i64) is static:
  const
    SDLK_MINUS* = cast[cuint](45'i64) 
else:
  let SDLK_MINUS* = cast[cuint](45'i64) 
when cast[cuint](46'i64) is static:
  const
    SDLK_PERIOD* = cast[cuint](46'i64) 
else:
  let SDLK_PERIOD* = cast[cuint](46'i64) 
when cast[cuint](47'i64) is static:
  const
    SDLK_SLASH* = cast[cuint](47'i64) 
else:
  let SDLK_SLASH* = cast[cuint](47'i64) 
when cast[cuint](48'i64) is static:
  const
    SDLK_0* = cast[cuint](48'i64) 
else:
  let SDLK_0* = cast[cuint](48'i64) 
when cast[cuint](49'i64) is static:
  const
    SDLK_1* = cast[cuint](49'i64) 
else:
  let SDLK_1* = cast[cuint](49'i64) 
when cast[cuint](50'i64) is static:
  const
    SDLK_2* = cast[cuint](50'i64) 
else:
  let SDLK_2* = cast[cuint](50'i64) 
when cast[cuint](51'i64) is static:
  const
    SDLK_3* = cast[cuint](51'i64) 
else:
  let SDLK_3* = cast[cuint](51'i64) 
when cast[cuint](52'i64) is static:
  const
    SDLK_4* = cast[cuint](52'i64) 
else:
  let SDLK_4* = cast[cuint](52'i64) 
when cast[cuint](53'i64) is static:
  const
    SDLK_5* = cast[cuint](53'i64) 
else:
  let SDLK_5* = cast[cuint](53'i64) 
when cast[cuint](54'i64) is static:
  const
    SDLK_6* = cast[cuint](54'i64) 
else:
  let SDLK_6* = cast[cuint](54'i64) 
when cast[cuint](55'i64) is static:
  const
    SDLK_7* = cast[cuint](55'i64) 
else:
  let SDLK_7* = cast[cuint](55'i64) 
when cast[cuint](56'i64) is static:
  const
    SDLK_8* = cast[cuint](56'i64) 
else:
  let SDLK_8* = cast[cuint](56'i64) 
when cast[cuint](57'i64) is static:
  const
    SDLK_9* = cast[cuint](57'i64) 
else:
  let SDLK_9* = cast[cuint](57'i64) 
when cast[cuint](58'i64) is static:
  const
    SDLK_COLON* = cast[cuint](58'i64) 
else:
  let SDLK_COLON* = cast[cuint](58'i64) 
when cast[cuint](59'i64) is static:
  const
    SDLK_SEMICOLON* = cast[cuint](59'i64) 
else:
  let SDLK_SEMICOLON* = cast[cuint](59'i64) 
when cast[cuint](60'i64) is static:
  const
    SDLK_LESS* = cast[cuint](60'i64) 
else:
  let SDLK_LESS* = cast[cuint](60'i64) 
when cast[cuint](61'i64) is static:
  const
    SDLK_EQUALS* = cast[cuint](61'i64) 
else:
  let SDLK_EQUALS* = cast[cuint](61'i64) 
when cast[cuint](62'i64) is static:
  const
    SDLK_GREATER* = cast[cuint](62'i64) 
else:
  let SDLK_GREATER* = cast[cuint](62'i64) 
when cast[cuint](63'i64) is static:
  const
    SDLK_QUESTION* = cast[cuint](63'i64) 
else:
  let SDLK_QUESTION* = cast[cuint](63'i64) 
when cast[cuint](64'i64) is static:
  const
    SDLK_AT* = cast[cuint](64'i64) 
else:
  let SDLK_AT* = cast[cuint](64'i64) 
when cast[cuint](91'i64) is static:
  const
    SDLK_LEFTBRACKET* = cast[cuint](91'i64) 
else:
  let SDLK_LEFTBRACKET* = cast[cuint](91'i64) 
when cast[cuint](92'i64) is static:
  const
    SDLK_BACKSLASH* = cast[cuint](92'i64) 
else:
  let SDLK_BACKSLASH* = cast[cuint](92'i64) 
when cast[cuint](93'i64) is static:
  const
    SDLK_RIGHTBRACKET* = cast[cuint](93'i64) 
else:
  let SDLK_RIGHTBRACKET* = cast[cuint](93'i64) 
when cast[cuint](94'i64) is static:
  const
    SDLK_CARET* = cast[cuint](94'i64) 
else:
  let SDLK_CARET* = cast[cuint](94'i64) 
when cast[cuint](95'i64) is static:
  const
    SDLK_UNDERSCORE* = cast[cuint](95'i64) 
else:
  let SDLK_UNDERSCORE* = cast[cuint](95'i64) 
when cast[cuint](96'i64) is static:
  const
    SDLK_GRAVE* = cast[cuint](96'i64) 
else:
  let SDLK_GRAVE* = cast[cuint](96'i64) 
when cast[cuint](97'i64) is static:
  const
    SDLK_A* = cast[cuint](97'i64) 
else:
  let SDLK_A* = cast[cuint](97'i64) 
when cast[cuint](98'i64) is static:
  const
    SDLK_B* = cast[cuint](98'i64) 
else:
  let SDLK_B* = cast[cuint](98'i64) 
when cast[cuint](99'i64) is static:
  const
    SDLK_C* = cast[cuint](99'i64) 
else:
  let SDLK_C* = cast[cuint](99'i64) 
when cast[cuint](100'i64) is static:
  const
    SDLK_D* = cast[cuint](100'i64) 
else:
  let SDLK_D* = cast[cuint](100'i64) 
when cast[cuint](101'i64) is static:
  const
    SDLK_E* = cast[cuint](101'i64) 
else:
  let SDLK_E* = cast[cuint](101'i64) 
when cast[cuint](102'i64) is static:
  const
    SDLK_F* = cast[cuint](102'i64) 
else:
  let SDLK_F* = cast[cuint](102'i64) 
when cast[cuint](103'i64) is static:
  const
    SDLK_G* = cast[cuint](103'i64) 
else:
  let SDLK_G* = cast[cuint](103'i64) 
when cast[cuint](104'i64) is static:
  const
    SDLK_H* = cast[cuint](104'i64) 
else:
  let SDLK_H* = cast[cuint](104'i64) 
when cast[cuint](105'i64) is static:
  const
    SDLK_I* = cast[cuint](105'i64) 
else:
  let SDLK_I* = cast[cuint](105'i64) 
when cast[cuint](106'i64) is static:
  const
    SDLK_J* = cast[cuint](106'i64) 
else:
  let SDLK_J* = cast[cuint](106'i64) 
when cast[cuint](107'i64) is static:
  const
    SDLK_K* = cast[cuint](107'i64) 
else:
  let SDLK_K* = cast[cuint](107'i64) 
when cast[cuint](108'i64) is static:
  const
    SDLK_L* = cast[cuint](108'i64) 
else:
  let SDLK_L* = cast[cuint](108'i64) 
when cast[cuint](109'i64) is static:
  const
    SDLK_M* = cast[cuint](109'i64) 
else:
  let SDLK_M* = cast[cuint](109'i64) 
when cast[cuint](110'i64) is static:
  const
    SDLK_N* = cast[cuint](110'i64) 
else:
  let SDLK_N* = cast[cuint](110'i64) 
when cast[cuint](111'i64) is static:
  const
    SDLK_O* = cast[cuint](111'i64) 
else:
  let SDLK_O* = cast[cuint](111'i64) 
when cast[cuint](112'i64) is static:
  const
    SDLK_P* = cast[cuint](112'i64) 
else:
  let SDLK_P* = cast[cuint](112'i64) 
when cast[cuint](113'i64) is static:
  const
    SDLK_Q* = cast[cuint](113'i64) 
else:
  let SDLK_Q* = cast[cuint](113'i64) 
when cast[cuint](114'i64) is static:
  const
    SDLK_R* = cast[cuint](114'i64) 
else:
  let SDLK_R* = cast[cuint](114'i64) 
when cast[cuint](115'i64) is static:
  const
    SDLK_S* = cast[cuint](115'i64) 
else:
  let SDLK_S* = cast[cuint](115'i64) 
when cast[cuint](116'i64) is static:
  const
    SDLK_T* = cast[cuint](116'i64) 
else:
  let SDLK_T* = cast[cuint](116'i64) 
when cast[cuint](117'i64) is static:
  const
    SDLK_U* = cast[cuint](117'i64) 
else:
  let SDLK_U* = cast[cuint](117'i64) 
when cast[cuint](118'i64) is static:
  const
    SDLK_V* = cast[cuint](118'i64) 
else:
  let SDLK_V* = cast[cuint](118'i64) 
when cast[cuint](119'i64) is static:
  const
    SDLK_W* = cast[cuint](119'i64) 
else:
  let SDLK_W* = cast[cuint](119'i64) 
when cast[cuint](120'i64) is static:
  const
    SDLK_X* = cast[cuint](120'i64) 
else:
  let SDLK_X* = cast[cuint](120'i64) 
when cast[cuint](121'i64) is static:
  const
    SDLK_Y* = cast[cuint](121'i64) 
else:
  let SDLK_Y* = cast[cuint](121'i64) 
when cast[cuint](122'i64) is static:
  const
    SDLK_Z* = cast[cuint](122'i64) 
else:
  let SDLK_Z* = cast[cuint](122'i64) 
when cast[cuint](123'i64) is static:
  const
    SDLK_LEFTBRACE* = cast[cuint](123'i64) 
else:
  let SDLK_LEFTBRACE* = cast[cuint](123'i64) 
when cast[cuint](124'i64) is static:
  const
    SDLK_PIPE* = cast[cuint](124'i64) 
else:
  let SDLK_PIPE* = cast[cuint](124'i64) 
when cast[cuint](125'i64) is static:
  const
    SDLK_RIGHTBRACE* = cast[cuint](125'i64) 
else:
  let SDLK_RIGHTBRACE* = cast[cuint](125'i64) 
when cast[cuint](126'i64) is static:
  const
    SDLK_TILDE* = cast[cuint](126'i64) 
else:
  let SDLK_TILDE* = cast[cuint](126'i64) 
when cast[cuint](127'i64) is static:
  const
    SDLK_DELETE* = cast[cuint](127'i64) 
else:
  let SDLK_DELETE* = cast[cuint](127'i64) 
when cast[cuint](177'i64) is static:
  const
    SDLK_PLUSMINUS* = cast[cuint](177'i64) 
else:
  let SDLK_PLUSMINUS* = cast[cuint](177'i64) 
when cast[cuint](1073741881'i64) is static:
  const
    SDLK_CAPSLOCK* = cast[cuint](1073741881'i64) 
else:
  let SDLK_CAPSLOCK* = cast[cuint](1073741881'i64) 
when cast[cuint](1073741882'i64) is static:
  const
    SDLK_F1* = cast[cuint](1073741882'i64) 
else:
  let SDLK_F1* = cast[cuint](1073741882'i64) 
when cast[cuint](1073741883'i64) is static:
  const
    SDLK_F2* = cast[cuint](1073741883'i64) 
else:
  let SDLK_F2* = cast[cuint](1073741883'i64) 
when cast[cuint](1073741884'i64) is static:
  const
    SDLK_F3* = cast[cuint](1073741884'i64) 
else:
  let SDLK_F3* = cast[cuint](1073741884'i64) 
when cast[cuint](1073741885'i64) is static:
  const
    SDLK_F4* = cast[cuint](1073741885'i64) 
else:
  let SDLK_F4* = cast[cuint](1073741885'i64) 
when cast[cuint](1073741886'i64) is static:
  const
    SDLK_F5* = cast[cuint](1073741886'i64) 
else:
  let SDLK_F5* = cast[cuint](1073741886'i64) 
when cast[cuint](1073741887'i64) is static:
  const
    SDLK_F6* = cast[cuint](1073741887'i64) 
else:
  let SDLK_F6* = cast[cuint](1073741887'i64) 
when cast[cuint](1073741888'i64) is static:
  const
    SDLK_F7* = cast[cuint](1073741888'i64) 
else:
  let SDLK_F7* = cast[cuint](1073741888'i64) 
when cast[cuint](1073741889'i64) is static:
  const
    SDLK_F8* = cast[cuint](1073741889'i64) 
else:
  let SDLK_F8* = cast[cuint](1073741889'i64) 
when cast[cuint](1073741890'i64) is static:
  const
    SDLK_F9* = cast[cuint](1073741890'i64) 
else:
  let SDLK_F9* = cast[cuint](1073741890'i64) 
when cast[cuint](1073741891'i64) is static:
  const
    SDLK_F10* = cast[cuint](1073741891'i64) 
else:
  let SDLK_F10* = cast[cuint](1073741891'i64) 
when cast[cuint](1073741892'i64) is static:
  const
    SDLK_F11* = cast[cuint](1073741892'i64) 
else:
  let SDLK_F11* = cast[cuint](1073741892'i64) 
when cast[cuint](1073741893'i64) is static:
  const
    SDLK_F12* = cast[cuint](1073741893'i64) 
else:
  let SDLK_F12* = cast[cuint](1073741893'i64) 
when cast[cuint](1073741894'i64) is static:
  const
    SDLK_PRINTSCREEN* = cast[cuint](1073741894'i64) 
else:
  let SDLK_PRINTSCREEN* = cast[cuint](1073741894'i64) 
when cast[cuint](1073741895'i64) is static:
  const
    SDLK_SCROLLLOCK* = cast[cuint](1073741895'i64) 
else:
  let SDLK_SCROLLLOCK* = cast[cuint](1073741895'i64) 
when cast[cuint](1073741896'i64) is static:
  const
    SDLK_PAUSE* = cast[cuint](1073741896'i64) 
else:
  let SDLK_PAUSE* = cast[cuint](1073741896'i64) 
when cast[cuint](1073741897'i64) is static:
  const
    SDLK_INSERT* = cast[cuint](1073741897'i64) 
else:
  let SDLK_INSERT* = cast[cuint](1073741897'i64) 
when cast[cuint](1073741898'i64) is static:
  const
    SDLK_HOME* = cast[cuint](1073741898'i64) 
else:
  let SDLK_HOME* = cast[cuint](1073741898'i64) 
when cast[cuint](1073741899'i64) is static:
  const
    SDLK_PAGEUP* = cast[cuint](1073741899'i64) 
else:
  let SDLK_PAGEUP* = cast[cuint](1073741899'i64) 
when cast[cuint](1073741901'i64) is static:
  const
    SDLK_END* = cast[cuint](1073741901'i64) 
else:
  let SDLK_END* = cast[cuint](1073741901'i64) 
when cast[cuint](1073741902'i64) is static:
  const
    SDLK_PAGEDOWN* = cast[cuint](1073741902'i64) 
else:
  let SDLK_PAGEDOWN* = cast[cuint](1073741902'i64) 
when cast[cuint](1073741903'i64) is static:
  const
    SDLK_RIGHT* = cast[cuint](1073741903'i64) 
else:
  let SDLK_RIGHT* = cast[cuint](1073741903'i64) 
when cast[cuint](1073741904'i64) is static:
  const
    SDLK_LEFT* = cast[cuint](1073741904'i64) 
else:
  let SDLK_LEFT* = cast[cuint](1073741904'i64) 
when cast[cuint](1073741905'i64) is static:
  const
    SDLK_DOWN* = cast[cuint](1073741905'i64) 
else:
  let SDLK_DOWN* = cast[cuint](1073741905'i64) 
when cast[cuint](1073741906'i64) is static:
  const
    SDLK_UP* = cast[cuint](1073741906'i64) 
else:
  let SDLK_UP* = cast[cuint](1073741906'i64) 
when cast[cuint](1073741907'i64) is static:
  const
    SDLK_NUMLOCKCLEAR* = cast[cuint](1073741907'i64) 
else:
  let SDLK_NUMLOCKCLEAR* = cast[cuint](1073741907'i64) 
when cast[cuint](1073741908'i64) is static:
  const
    SDLK_KP_DIVIDE* = cast[cuint](1073741908'i64) 
else:
  let SDLK_KP_DIVIDE* = cast[cuint](1073741908'i64) 
when cast[cuint](1073741909'i64) is static:
  const
    SDLK_KP_MULTIPLY* = cast[cuint](1073741909'i64) 
else:
  let SDLK_KP_MULTIPLY* = cast[cuint](1073741909'i64) 
when cast[cuint](1073741910'i64) is static:
  const
    SDLK_KP_MINUS* = cast[cuint](1073741910'i64) 
else:
  let SDLK_KP_MINUS* = cast[cuint](1073741910'i64) 
when cast[cuint](1073741911'i64) is static:
  const
    SDLK_KP_PLUS* = cast[cuint](1073741911'i64) 
else:
  let SDLK_KP_PLUS* = cast[cuint](1073741911'i64) 
when cast[cuint](1073741912'i64) is static:
  const
    SDLK_KP_ENTER* = cast[cuint](1073741912'i64) 
else:
  let SDLK_KP_ENTER* = cast[cuint](1073741912'i64) 
when cast[cuint](1073741913'i64) is static:
  const
    SDLK_KP_1* = cast[cuint](1073741913'i64) 
else:
  let SDLK_KP_1* = cast[cuint](1073741913'i64) 
when cast[cuint](1073741914'i64) is static:
  const
    SDLK_KP_2* = cast[cuint](1073741914'i64) 
else:
  let SDLK_KP_2* = cast[cuint](1073741914'i64) 
when cast[cuint](1073741915'i64) is static:
  const
    SDLK_KP_3* = cast[cuint](1073741915'i64) 
else:
  let SDLK_KP_3* = cast[cuint](1073741915'i64) 
when cast[cuint](1073741916'i64) is static:
  const
    SDLK_KP_4* = cast[cuint](1073741916'i64) 
else:
  let SDLK_KP_4* = cast[cuint](1073741916'i64) 
when cast[cuint](1073741917'i64) is static:
  const
    SDLK_KP_5* = cast[cuint](1073741917'i64) 
else:
  let SDLK_KP_5* = cast[cuint](1073741917'i64) 
when cast[cuint](1073741918'i64) is static:
  const
    SDLK_KP_6* = cast[cuint](1073741918'i64) 
else:
  let SDLK_KP_6* = cast[cuint](1073741918'i64) 
when cast[cuint](1073741919'i64) is static:
  const
    SDLK_KP_7* = cast[cuint](1073741919'i64) 
else:
  let SDLK_KP_7* = cast[cuint](1073741919'i64) 
when cast[cuint](1073741920'i64) is static:
  const
    SDLK_KP_8* = cast[cuint](1073741920'i64) 
else:
  let SDLK_KP_8* = cast[cuint](1073741920'i64) 
when cast[cuint](1073741921'i64) is static:
  const
    SDLK_KP_9* = cast[cuint](1073741921'i64) 
else:
  let SDLK_KP_9* = cast[cuint](1073741921'i64) 
when cast[cuint](1073741922'i64) is static:
  const
    SDLK_KP_0* = cast[cuint](1073741922'i64) 
else:
  let SDLK_KP_0* = cast[cuint](1073741922'i64) 
when cast[cuint](1073741923'i64) is static:
  const
    SDLK_KP_PERIOD* = cast[cuint](1073741923'i64) 
else:
  let SDLK_KP_PERIOD* = cast[cuint](1073741923'i64) 
when cast[cuint](1073741925'i64) is static:
  const
    SDLK_APPLICATION* = cast[cuint](1073741925'i64) 
else:
  let SDLK_APPLICATION* = cast[cuint](1073741925'i64) 
when cast[cuint](1073741926'i64) is static:
  const
    SDLK_POWER* = cast[cuint](1073741926'i64) 
else:
  let SDLK_POWER* = cast[cuint](1073741926'i64) 
when cast[cuint](1073741927'i64) is static:
  const
    SDLK_KP_EQUALS* = cast[cuint](1073741927'i64) 
else:
  let SDLK_KP_EQUALS* = cast[cuint](1073741927'i64) 
when cast[cuint](1073741928'i64) is static:
  const
    SDLK_F13* = cast[cuint](1073741928'i64) 
else:
  let SDLK_F13* = cast[cuint](1073741928'i64) 
when cast[cuint](1073741929'i64) is static:
  const
    SDLK_F14* = cast[cuint](1073741929'i64) 
else:
  let SDLK_F14* = cast[cuint](1073741929'i64) 
when cast[cuint](1073741930'i64) is static:
  const
    SDLK_F15* = cast[cuint](1073741930'i64) 
else:
  let SDLK_F15* = cast[cuint](1073741930'i64) 
when cast[cuint](1073741931'i64) is static:
  const
    SDLK_F16* = cast[cuint](1073741931'i64) 
else:
  let SDLK_F16* = cast[cuint](1073741931'i64) 
when cast[cuint](1073741932'i64) is static:
  const
    SDLK_F17* = cast[cuint](1073741932'i64) 
else:
  let SDLK_F17* = cast[cuint](1073741932'i64) 
when cast[cuint](1073741933'i64) is static:
  const
    SDLK_F18* = cast[cuint](1073741933'i64) 
else:
  let SDLK_F18* = cast[cuint](1073741933'i64) 
when cast[cuint](1073741934'i64) is static:
  const
    SDLK_F19* = cast[cuint](1073741934'i64) 
else:
  let SDLK_F19* = cast[cuint](1073741934'i64) 
when cast[cuint](1073741935'i64) is static:
  const
    SDLK_F20* = cast[cuint](1073741935'i64) 
else:
  let SDLK_F20* = cast[cuint](1073741935'i64) 
when cast[cuint](1073741936'i64) is static:
  const
    SDLK_F21* = cast[cuint](1073741936'i64) 
else:
  let SDLK_F21* = cast[cuint](1073741936'i64) 
when cast[cuint](1073741937'i64) is static:
  const
    SDLK_F22* = cast[cuint](1073741937'i64) 
else:
  let SDLK_F22* = cast[cuint](1073741937'i64) 
when cast[cuint](1073741938'i64) is static:
  const
    SDLK_F23* = cast[cuint](1073741938'i64) 
else:
  let SDLK_F23* = cast[cuint](1073741938'i64) 
when cast[cuint](1073741939'i64) is static:
  const
    SDLK_F24* = cast[cuint](1073741939'i64) 
else:
  let SDLK_F24* = cast[cuint](1073741939'i64) 
when cast[cuint](1073741940'i64) is static:
  const
    SDLK_EXECUTE* = cast[cuint](1073741940'i64) 
else:
  let SDLK_EXECUTE* = cast[cuint](1073741940'i64) 
when cast[cuint](1073741941'i64) is static:
  const
    SDLK_HELP* = cast[cuint](1073741941'i64) 
else:
  let SDLK_HELP* = cast[cuint](1073741941'i64) 
when cast[cuint](1073741942'i64) is static:
  const
    SDLK_MENU* = cast[cuint](1073741942'i64) 
else:
  let SDLK_MENU* = cast[cuint](1073741942'i64) 
when cast[cuint](1073741943'i64) is static:
  const
    SDLK_SELECT* = cast[cuint](1073741943'i64) 
else:
  let SDLK_SELECT* = cast[cuint](1073741943'i64) 
when cast[cuint](1073741944'i64) is static:
  const
    SDLK_STOP* = cast[cuint](1073741944'i64) 
else:
  let SDLK_STOP* = cast[cuint](1073741944'i64) 
when cast[cuint](1073741945'i64) is static:
  const
    SDLK_AGAIN* = cast[cuint](1073741945'i64) 
else:
  let SDLK_AGAIN* = cast[cuint](1073741945'i64) 
when cast[cuint](1073741946'i64) is static:
  const
    SDLK_UNDO* = cast[cuint](1073741946'i64) 
else:
  let SDLK_UNDO* = cast[cuint](1073741946'i64) 
when cast[cuint](1073741947'i64) is static:
  const
    SDLK_CUT* = cast[cuint](1073741947'i64) 
else:
  let SDLK_CUT* = cast[cuint](1073741947'i64) 
when cast[cuint](1073741948'i64) is static:
  const
    SDLK_COPY* = cast[cuint](1073741948'i64) 
else:
  let SDLK_COPY* = cast[cuint](1073741948'i64) 
when cast[cuint](1073741949'i64) is static:
  const
    SDLK_PASTE* = cast[cuint](1073741949'i64) 
else:
  let SDLK_PASTE* = cast[cuint](1073741949'i64) 
when cast[cuint](1073741950'i64) is static:
  const
    SDLK_FIND* = cast[cuint](1073741950'i64) 
else:
  let SDLK_FIND* = cast[cuint](1073741950'i64) 
when cast[cuint](1073741951'i64) is static:
  const
    SDLK_MUTE* = cast[cuint](1073741951'i64) 
else:
  let SDLK_MUTE* = cast[cuint](1073741951'i64) 
when cast[cuint](1073741952'i64) is static:
  const
    SDLK_VOLUMEUP* = cast[cuint](1073741952'i64) 
else:
  let SDLK_VOLUMEUP* = cast[cuint](1073741952'i64) 
when cast[cuint](1073741953'i64) is static:
  const
    SDLK_VOLUMEDOWN* = cast[cuint](1073741953'i64) 
else:
  let SDLK_VOLUMEDOWN* = cast[cuint](1073741953'i64) 
when cast[cuint](1073741957'i64) is static:
  const
    SDLK_KP_COMMA* = cast[cuint](1073741957'i64) 
else:
  let SDLK_KP_COMMA* = cast[cuint](1073741957'i64) 
when cast[cuint](1073741958'i64) is static:
  const
    SDLK_KP_EQUALSAS400* = cast[cuint](1073741958'i64) 
else:
  let SDLK_KP_EQUALSAS400* = cast[cuint](1073741958'i64) 
when cast[cuint](1073741977'i64) is static:
  const
    SDLK_ALTERASE* = cast[cuint](1073741977'i64) 
else:
  let SDLK_ALTERASE* = cast[cuint](1073741977'i64) 
when cast[cuint](1073741978'i64) is static:
  const
    SDLK_SYSREQ* = cast[cuint](1073741978'i64) 
else:
  let SDLK_SYSREQ* = cast[cuint](1073741978'i64) 
when cast[cuint](1073741979'i64) is static:
  const
    SDLK_CANCEL* = cast[cuint](1073741979'i64) 
else:
  let SDLK_CANCEL* = cast[cuint](1073741979'i64) 
when cast[cuint](1073741980'i64) is static:
  const
    SDLK_CLEAR* = cast[cuint](1073741980'i64) 
else:
  let SDLK_CLEAR* = cast[cuint](1073741980'i64) 
when cast[cuint](1073741981'i64) is static:
  const
    SDLK_PRIOR* = cast[cuint](1073741981'i64) 
else:
  let SDLK_PRIOR* = cast[cuint](1073741981'i64) 
when cast[cuint](1073741982'i64) is static:
  const
    SDLK_RETURN2* = cast[cuint](1073741982'i64) 
else:
  let SDLK_RETURN2* = cast[cuint](1073741982'i64) 
when cast[cuint](1073741983'i64) is static:
  const
    SDLK_SEPARATOR* = cast[cuint](1073741983'i64) 
else:
  let SDLK_SEPARATOR* = cast[cuint](1073741983'i64) 
when cast[cuint](1073741984'i64) is static:
  const
    SDLK_OUT* = cast[cuint](1073741984'i64) 
else:
  let SDLK_OUT* = cast[cuint](1073741984'i64) 
when cast[cuint](1073741985'i64) is static:
  const
    SDLK_OPER* = cast[cuint](1073741985'i64) 
else:
  let SDLK_OPER* = cast[cuint](1073741985'i64) 
when cast[cuint](1073741986'i64) is static:
  const
    SDLK_CLEARAGAIN* = cast[cuint](1073741986'i64) 
else:
  let SDLK_CLEARAGAIN* = cast[cuint](1073741986'i64) 
when cast[cuint](1073741987'i64) is static:
  const
    SDLK_CRSEL* = cast[cuint](1073741987'i64) 
else:
  let SDLK_CRSEL* = cast[cuint](1073741987'i64) 
when cast[cuint](1073741988'i64) is static:
  const
    SDLK_EXSEL* = cast[cuint](1073741988'i64) 
else:
  let SDLK_EXSEL* = cast[cuint](1073741988'i64) 
when cast[cuint](1073742000'i64) is static:
  const
    SDLK_KP_00* = cast[cuint](1073742000'i64) 
else:
  let SDLK_KP_00* = cast[cuint](1073742000'i64) 
when cast[cuint](1073742001'i64) is static:
  const
    SDLK_KP_000* = cast[cuint](1073742001'i64) 
else:
  let SDLK_KP_000* = cast[cuint](1073742001'i64) 
when cast[cuint](1073742002'i64) is static:
  const
    SDLK_THOUSANDSSEPARATOR* = cast[cuint](1073742002'i64) 
else:
  let SDLK_THOUSANDSSEPARATOR* = cast[cuint](1073742002'i64) 
when cast[cuint](1073742003'i64) is static:
  const
    SDLK_DECIMALSEPARATOR* = cast[cuint](1073742003'i64) 
else:
  let SDLK_DECIMALSEPARATOR* = cast[cuint](1073742003'i64) 
when cast[cuint](1073742004'i64) is static:
  const
    SDLK_CURRENCYUNIT* = cast[cuint](1073742004'i64) 
else:
  let SDLK_CURRENCYUNIT* = cast[cuint](1073742004'i64) 
when cast[cuint](1073742005'i64) is static:
  const
    SDLK_CURRENCYSUBUNIT* = cast[cuint](1073742005'i64) 
else:
  let SDLK_CURRENCYSUBUNIT* = cast[cuint](1073742005'i64) 
when cast[cuint](1073742006'i64) is static:
  const
    SDLK_KP_LEFTPAREN* = cast[cuint](1073742006'i64) 
else:
  let SDLK_KP_LEFTPAREN* = cast[cuint](1073742006'i64) 
when cast[cuint](1073742007'i64) is static:
  const
    SDLK_KP_RIGHTPAREN* = cast[cuint](1073742007'i64) 
else:
  let SDLK_KP_RIGHTPAREN* = cast[cuint](1073742007'i64) 
when cast[cuint](1073742008'i64) is static:
  const
    SDLK_KP_LEFTBRACE* = cast[cuint](1073742008'i64) 
else:
  let SDLK_KP_LEFTBRACE* = cast[cuint](1073742008'i64) 
when cast[cuint](1073742009'i64) is static:
  const
    SDLK_KP_RIGHTBRACE* = cast[cuint](1073742009'i64) 
else:
  let SDLK_KP_RIGHTBRACE* = cast[cuint](1073742009'i64) 
when cast[cuint](1073742010'i64) is static:
  const
    SDLK_KP_TAB* = cast[cuint](1073742010'i64) 
else:
  let SDLK_KP_TAB* = cast[cuint](1073742010'i64) 
when cast[cuint](1073742011'i64) is static:
  const
    SDLK_KP_BACKSPACE* = cast[cuint](1073742011'i64) 
else:
  let SDLK_KP_BACKSPACE* = cast[cuint](1073742011'i64) 
when cast[cuint](1073742012'i64) is static:
  const
    SDLK_KP_A* = cast[cuint](1073742012'i64) 
else:
  let SDLK_KP_A* = cast[cuint](1073742012'i64) 
when cast[cuint](1073742013'i64) is static:
  const
    SDLK_KP_B* = cast[cuint](1073742013'i64) 
else:
  let SDLK_KP_B* = cast[cuint](1073742013'i64) 
when cast[cuint](1073742014'i64) is static:
  const
    SDLK_KP_C* = cast[cuint](1073742014'i64) 
else:
  let SDLK_KP_C* = cast[cuint](1073742014'i64) 
when cast[cuint](1073742015'i64) is static:
  const
    SDLK_KP_D* = cast[cuint](1073742015'i64) 
else:
  let SDLK_KP_D* = cast[cuint](1073742015'i64) 
when cast[cuint](1073742016'i64) is static:
  const
    SDLK_KP_E* = cast[cuint](1073742016'i64) 
else:
  let SDLK_KP_E* = cast[cuint](1073742016'i64) 
when cast[cuint](1073742017'i64) is static:
  const
    SDLK_KP_F* = cast[cuint](1073742017'i64) 
else:
  let SDLK_KP_F* = cast[cuint](1073742017'i64) 
when cast[cuint](1073742018'i64) is static:
  const
    SDLK_KP_XOR* = cast[cuint](1073742018'i64) 
else:
  let SDLK_KP_XOR* = cast[cuint](1073742018'i64) 
when cast[cuint](1073742019'i64) is static:
  const
    SDLK_KP_POWER* = cast[cuint](1073742019'i64) 
else:
  let SDLK_KP_POWER* = cast[cuint](1073742019'i64) 
when cast[cuint](1073742020'i64) is static:
  const
    SDLK_KP_PERCENT* = cast[cuint](1073742020'i64) 
else:
  let SDLK_KP_PERCENT* = cast[cuint](1073742020'i64) 
when cast[cuint](1073742021'i64) is static:
  const
    SDLK_KP_LESS* = cast[cuint](1073742021'i64) 
else:
  let SDLK_KP_LESS* = cast[cuint](1073742021'i64) 
when cast[cuint](1073742022'i64) is static:
  const
    SDLK_KP_GREATER* = cast[cuint](1073742022'i64) 
else:
  let SDLK_KP_GREATER* = cast[cuint](1073742022'i64) 
when cast[cuint](1073742023'i64) is static:
  const
    SDLK_KP_AMPERSAND* = cast[cuint](1073742023'i64) 
else:
  let SDLK_KP_AMPERSAND* = cast[cuint](1073742023'i64) 
when cast[cuint](1073742024'i64) is static:
  const
    SDLK_KP_DBLAMPERSAND* = cast[cuint](1073742024'i64) 
else:
  let SDLK_KP_DBLAMPERSAND* = cast[cuint](1073742024'i64) 
when cast[cuint](1073742025'i64) is static:
  const
    SDLK_KP_VERTICALBAR* = cast[cuint](1073742025'i64) 
else:
  let SDLK_KP_VERTICALBAR* = cast[cuint](1073742025'i64) 
when cast[cuint](1073742026'i64) is static:
  const
    SDLK_KP_DBLVERTICALBAR* = cast[cuint](1073742026'i64) 
else:
  let SDLK_KP_DBLVERTICALBAR* = cast[cuint](1073742026'i64) 
when cast[cuint](1073742027'i64) is static:
  const
    SDLK_KP_COLON* = cast[cuint](1073742027'i64) 
else:
  let SDLK_KP_COLON* = cast[cuint](1073742027'i64) 
when cast[cuint](1073742028'i64) is static:
  const
    SDLK_KP_HASH* = cast[cuint](1073742028'i64) 
else:
  let SDLK_KP_HASH* = cast[cuint](1073742028'i64) 
when cast[cuint](1073742029'i64) is static:
  const
    SDLK_KP_SPACE* = cast[cuint](1073742029'i64) 
else:
  let SDLK_KP_SPACE* = cast[cuint](1073742029'i64) 
when cast[cuint](1073742030'i64) is static:
  const
    SDLK_KP_AT* = cast[cuint](1073742030'i64) 
else:
  let SDLK_KP_AT* = cast[cuint](1073742030'i64) 
when cast[cuint](1073742031'i64) is static:
  const
    SDLK_KP_EXCLAM* = cast[cuint](1073742031'i64) 
else:
  let SDLK_KP_EXCLAM* = cast[cuint](1073742031'i64) 
when cast[cuint](1073742032'i64) is static:
  const
    SDLK_KP_MEMSTORE* = cast[cuint](1073742032'i64) 
else:
  let SDLK_KP_MEMSTORE* = cast[cuint](1073742032'i64) 
when cast[cuint](1073742033'i64) is static:
  const
    SDLK_KP_MEMRECALL* = cast[cuint](1073742033'i64) 
else:
  let SDLK_KP_MEMRECALL* = cast[cuint](1073742033'i64) 
when cast[cuint](1073742034'i64) is static:
  const
    SDLK_KP_MEMCLEAR* = cast[cuint](1073742034'i64) 
else:
  let SDLK_KP_MEMCLEAR* = cast[cuint](1073742034'i64) 
when cast[cuint](1073742035'i64) is static:
  const
    SDLK_KP_MEMADD* = cast[cuint](1073742035'i64) 
else:
  let SDLK_KP_MEMADD* = cast[cuint](1073742035'i64) 
when cast[cuint](1073742036'i64) is static:
  const
    SDLK_KP_MEMSUBTRACT* = cast[cuint](1073742036'i64) 
else:
  let SDLK_KP_MEMSUBTRACT* = cast[cuint](1073742036'i64) 
when cast[cuint](1073742037'i64) is static:
  const
    SDLK_KP_MEMMULTIPLY* = cast[cuint](1073742037'i64) 
else:
  let SDLK_KP_MEMMULTIPLY* = cast[cuint](1073742037'i64) 
when cast[cuint](1073742038'i64) is static:
  const
    SDLK_KP_MEMDIVIDE* = cast[cuint](1073742038'i64) 
else:
  let SDLK_KP_MEMDIVIDE* = cast[cuint](1073742038'i64) 
when cast[cuint](1073742039'i64) is static:
  const
    SDLK_KP_PLUSMINUS* = cast[cuint](1073742039'i64) 
else:
  let SDLK_KP_PLUSMINUS* = cast[cuint](1073742039'i64) 
when cast[cuint](1073742040'i64) is static:
  const
    SDLK_KP_CLEAR* = cast[cuint](1073742040'i64) 
else:
  let SDLK_KP_CLEAR* = cast[cuint](1073742040'i64) 
when cast[cuint](1073742041'i64) is static:
  const
    SDLK_KP_CLEARENTRY* = cast[cuint](1073742041'i64) 
else:
  let SDLK_KP_CLEARENTRY* = cast[cuint](1073742041'i64) 
when cast[cuint](1073742042'i64) is static:
  const
    SDLK_KP_BINARY* = cast[cuint](1073742042'i64) 
else:
  let SDLK_KP_BINARY* = cast[cuint](1073742042'i64) 
when cast[cuint](1073742043'i64) is static:
  const
    SDLK_KP_OCTAL* = cast[cuint](1073742043'i64) 
else:
  let SDLK_KP_OCTAL* = cast[cuint](1073742043'i64) 
when cast[cuint](1073742044'i64) is static:
  const
    SDLK_KP_DECIMAL* = cast[cuint](1073742044'i64) 
else:
  let SDLK_KP_DECIMAL* = cast[cuint](1073742044'i64) 
when cast[cuint](1073742045'i64) is static:
  const
    SDLK_KP_HEXADECIMAL* = cast[cuint](1073742045'i64) 
else:
  let SDLK_KP_HEXADECIMAL* = cast[cuint](1073742045'i64) 
when cast[cuint](1073742048'i64) is static:
  const
    SDLK_LCTRL* = cast[cuint](1073742048'i64) 
else:
  let SDLK_LCTRL* = cast[cuint](1073742048'i64) 
when cast[cuint](1073742049'i64) is static:
  const
    SDLK_LSHIFT* = cast[cuint](1073742049'i64) 
else:
  let SDLK_LSHIFT* = cast[cuint](1073742049'i64) 
when cast[cuint](1073742050'i64) is static:
  const
    SDLK_LALT* = cast[cuint](1073742050'i64) 
else:
  let SDLK_LALT* = cast[cuint](1073742050'i64) 
when cast[cuint](1073742051'i64) is static:
  const
    SDLK_LGUI* = cast[cuint](1073742051'i64) 
else:
  let SDLK_LGUI* = cast[cuint](1073742051'i64) 
when cast[cuint](1073742052'i64) is static:
  const
    SDLK_RCTRL* = cast[cuint](1073742052'i64) 
else:
  let SDLK_RCTRL* = cast[cuint](1073742052'i64) 
when cast[cuint](1073742053'i64) is static:
  const
    SDLK_RSHIFT* = cast[cuint](1073742053'i64) 
else:
  let SDLK_RSHIFT* = cast[cuint](1073742053'i64) 
when cast[cuint](1073742054'i64) is static:
  const
    SDLK_RALT* = cast[cuint](1073742054'i64) 
else:
  let SDLK_RALT* = cast[cuint](1073742054'i64) 
when cast[cuint](1073742055'i64) is static:
  const
    SDLK_RGUI* = cast[cuint](1073742055'i64) 
else:
  let SDLK_RGUI* = cast[cuint](1073742055'i64) 
when cast[cuint](1073742081'i64) is static:
  const
    SDLK_MODE* = cast[cuint](1073742081'i64) 
else:
  let SDLK_MODE* = cast[cuint](1073742081'i64) 
when cast[cuint](1073742082'i64) is static:
  const
    SDLK_SLEEP* = cast[cuint](1073742082'i64) 
else:
  let SDLK_SLEEP* = cast[cuint](1073742082'i64) 
when cast[cuint](1073742083'i64) is static:
  const
    SDLK_WAKE* = cast[cuint](1073742083'i64) 
else:
  let SDLK_WAKE* = cast[cuint](1073742083'i64) 
when cast[cuint](1073742084'i64) is static:
  const
    SDLK_CHANNEL_INCREMENT* = cast[cuint](1073742084'i64) 
else:
  let SDLK_CHANNEL_INCREMENT* = cast[cuint](1073742084'i64) 
when cast[cuint](1073742085'i64) is static:
  const
    SDLK_CHANNEL_DECREMENT* = cast[cuint](1073742085'i64) 
else:
  let SDLK_CHANNEL_DECREMENT* = cast[cuint](1073742085'i64) 
when cast[cuint](1073742086'i64) is static:
  const
    SDLK_MEDIA_PLAY* = cast[cuint](1073742086'i64) 
else:
  let SDLK_MEDIA_PLAY* = cast[cuint](1073742086'i64) 
when cast[cuint](1073742087'i64) is static:
  const
    SDLK_MEDIA_PAUSE* = cast[cuint](1073742087'i64) 
else:
  let SDLK_MEDIA_PAUSE* = cast[cuint](1073742087'i64) 
when cast[cuint](1073742088'i64) is static:
  const
    SDLK_MEDIA_RECORD* = cast[cuint](1073742088'i64) 
else:
  let SDLK_MEDIA_RECORD* = cast[cuint](1073742088'i64) 
when cast[cuint](1073742089'i64) is static:
  const
    SDLK_MEDIA_FAST_FORWARD* = cast[cuint](1073742089'i64) 
else:
  let SDLK_MEDIA_FAST_FORWARD* = cast[cuint](1073742089'i64) 
when cast[cuint](1073742090'i64) is static:
  const
    SDLK_MEDIA_REWIND* = cast[cuint](1073742090'i64) 
else:
  let SDLK_MEDIA_REWIND* = cast[cuint](1073742090'i64) 
when cast[cuint](1073742091'i64) is static:
  const
    SDLK_MEDIA_NEXT_TRACK* = cast[cuint](1073742091'i64) 
else:
  let SDLK_MEDIA_NEXT_TRACK* = cast[cuint](1073742091'i64) 
when cast[cuint](1073742092'i64) is static:
  const
    SDLK_MEDIA_PREVIOUS_TRACK* = cast[cuint](1073742092'i64) 
else:
  let SDLK_MEDIA_PREVIOUS_TRACK* = cast[cuint](1073742092'i64) 
when cast[cuint](1073742093'i64) is static:
  const
    SDLK_MEDIA_STOP* = cast[cuint](1073742093'i64) 
else:
  let SDLK_MEDIA_STOP* = cast[cuint](1073742093'i64) 
when cast[cuint](1073742094'i64) is static:
  const
    SDLK_MEDIA_EJECT* = cast[cuint](1073742094'i64) 
else:
  let SDLK_MEDIA_EJECT* = cast[cuint](1073742094'i64) 
when cast[cuint](1073742095'i64) is static:
  const
    SDLK_MEDIA_PLAY_PAUSE* = cast[cuint](1073742095'i64) 
else:
  let SDLK_MEDIA_PLAY_PAUSE* = cast[cuint](1073742095'i64) 
when cast[cuint](1073742096'i64) is static:
  const
    SDLK_MEDIA_SELECT* = cast[cuint](1073742096'i64) 
else:
  let SDLK_MEDIA_SELECT* = cast[cuint](1073742096'i64) 
when cast[cuint](1073742097'i64) is static:
  const
    SDLK_AC_NEW* = cast[cuint](1073742097'i64) 
else:
  let SDLK_AC_NEW* = cast[cuint](1073742097'i64) 
when cast[cuint](1073742098'i64) is static:
  const
    SDLK_AC_OPEN* = cast[cuint](1073742098'i64) 
else:
  let SDLK_AC_OPEN* = cast[cuint](1073742098'i64) 
when cast[cuint](1073742099'i64) is static:
  const
    SDLK_AC_CLOSE* = cast[cuint](1073742099'i64) 
else:
  let SDLK_AC_CLOSE* = cast[cuint](1073742099'i64) 
when cast[cuint](1073742100'i64) is static:
  const
    SDLK_AC_EXIT* = cast[cuint](1073742100'i64) 
else:
  let SDLK_AC_EXIT* = cast[cuint](1073742100'i64) 
when cast[cuint](1073742101'i64) is static:
  const
    SDLK_AC_SAVE* = cast[cuint](1073742101'i64) 
else:
  let SDLK_AC_SAVE* = cast[cuint](1073742101'i64) 
when cast[cuint](1073742102'i64) is static:
  const
    SDLK_AC_PRINT* = cast[cuint](1073742102'i64) 
else:
  let SDLK_AC_PRINT* = cast[cuint](1073742102'i64) 
when cast[cuint](1073742103'i64) is static:
  const
    SDLK_AC_PROPERTIES* = cast[cuint](1073742103'i64) 
else:
  let SDLK_AC_PROPERTIES* = cast[cuint](1073742103'i64) 
when cast[cuint](1073742104'i64) is static:
  const
    SDLK_AC_SEARCH* = cast[cuint](1073742104'i64) 
else:
  let SDLK_AC_SEARCH* = cast[cuint](1073742104'i64) 
when cast[cuint](1073742105'i64) is static:
  const
    SDLK_AC_HOME* = cast[cuint](1073742105'i64) 
else:
  let SDLK_AC_HOME* = cast[cuint](1073742105'i64) 
when cast[cuint](1073742106'i64) is static:
  const
    SDLK_AC_BACK* = cast[cuint](1073742106'i64) 
else:
  let SDLK_AC_BACK* = cast[cuint](1073742106'i64) 
when cast[cuint](1073742107'i64) is static:
  const
    SDLK_AC_FORWARD* = cast[cuint](1073742107'i64) 
else:
  let SDLK_AC_FORWARD* = cast[cuint](1073742107'i64) 
when cast[cuint](1073742108'i64) is static:
  const
    SDLK_AC_STOP* = cast[cuint](1073742108'i64) 
else:
  let SDLK_AC_STOP* = cast[cuint](1073742108'i64) 
when cast[cuint](1073742109'i64) is static:
  const
    SDLK_AC_REFRESH* = cast[cuint](1073742109'i64) 
else:
  let SDLK_AC_REFRESH* = cast[cuint](1073742109'i64) 
when cast[cuint](1073742110'i64) is static:
  const
    SDLK_AC_BOOKMARKS* = cast[cuint](1073742110'i64) 
else:
  let SDLK_AC_BOOKMARKS* = cast[cuint](1073742110'i64) 
when cast[cuint](1073742111'i64) is static:
  const
    SDLK_SOFTLEFT* = cast[cuint](1073742111'i64) 
else:
  let SDLK_SOFTLEFT* = cast[cuint](1073742111'i64) 
when cast[cuint](1073742112'i64) is static:
  const
    SDLK_SOFTRIGHT* = cast[cuint](1073742112'i64) 
else:
  let SDLK_SOFTRIGHT* = cast[cuint](1073742112'i64) 
when cast[cuint](1073742113'i64) is static:
  const
    SDLK_CALL* = cast[cuint](1073742113'i64) 
else:
  let SDLK_CALL* = cast[cuint](1073742113'i64) 
when cast[cuint](1073742114'i64) is static:
  const
    SDLK_ENDCALL* = cast[cuint](1073742114'i64) 
else:
  let SDLK_ENDCALL* = cast[cuint](1073742114'i64) 
when cast[cuint](0'i64) is static:
  const
    SDL_KMOD_NONE* = cast[cuint](0'i64) 
else:
  let SDL_KMOD_NONE* = cast[cuint](0'i64) 
when cast[cuint](1'i64) is static:
  const
    SDL_KMOD_LSHIFT* = cast[cuint](1'i64) 
else:
  let SDL_KMOD_LSHIFT* = cast[cuint](1'i64) 
when cast[cuint](2'i64) is static:
  const
    SDL_KMOD_RSHIFT* = cast[cuint](2'i64) 
else:
  let SDL_KMOD_RSHIFT* = cast[cuint](2'i64) 
when cast[cuint](64'i64) is static:
  const
    SDL_KMOD_LCTRL* = cast[cuint](64'i64) 
else:
  let SDL_KMOD_LCTRL* = cast[cuint](64'i64) 
when cast[cuint](128'i64) is static:
  const
    SDL_KMOD_RCTRL* = cast[cuint](128'i64) 
else:
  let SDL_KMOD_RCTRL* = cast[cuint](128'i64) 
when cast[cuint](256'i64) is static:
  const
    SDL_KMOD_LALT* = cast[cuint](256'i64) 
else:
  let SDL_KMOD_LALT* = cast[cuint](256'i64) 
when cast[cuint](512'i64) is static:
  const
    SDL_KMOD_RALT* = cast[cuint](512'i64) 
else:
  let SDL_KMOD_RALT* = cast[cuint](512'i64) 
when cast[cuint](1024'i64) is static:
  const
    SDL_KMOD_LGUI* = cast[cuint](1024'i64) 
else:
  let SDL_KMOD_LGUI* = cast[cuint](1024'i64) 
when cast[cuint](2048'i64) is static:
  const
    SDL_KMOD_RGUI* = cast[cuint](2048'i64) 
else:
  let SDL_KMOD_RGUI* = cast[cuint](2048'i64) 
when cast[cuint](4096'i64) is static:
  const
    SDL_KMOD_NUM* = cast[cuint](4096'i64) 
else:
  let SDL_KMOD_NUM* = cast[cuint](4096'i64) 
when cast[cuint](8192'i64) is static:
  const
    SDL_KMOD_CAPS* = cast[cuint](8192'i64) 
else:
  let SDL_KMOD_CAPS* = cast[cuint](8192'i64) 
when cast[cuint](16384'i64) is static:
  const
    SDL_KMOD_MODE* = cast[cuint](16384'i64) 
else:
  let SDL_KMOD_MODE* = cast[cuint](16384'i64) 
when cast[cuint](32768'i64) is static:
  const
    SDL_KMOD_SCROLL* = cast[cuint](32768'i64) 
else:
  let SDL_KMOD_SCROLL* = cast[cuint](32768'i64) 
when "SDL.textinput.type" is static:
  const
    SDL_PROP_TEXTINPUT_TYPE_NUMBER* = "SDL.textinput.type" 
else:
  let SDL_PROP_TEXTINPUT_TYPE_NUMBER* = "SDL.textinput.type" 
when "SDL.textinput.capitalization" is static:
  const
    SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER* = "SDL.textinput.capitalization" 
else:
  let SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER* = "SDL.textinput.capitalization" 
when "SDL.textinput.autocorrect" is static:
  const
    SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN* = "SDL.textinput.autocorrect" 
else:
  let SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN* = "SDL.textinput.autocorrect" 
when "SDL.textinput.multiline" is static:
  const
    SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN* = "SDL.textinput.multiline" 
else:
  let SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN* = "SDL.textinput.multiline" 
when "SDL.textinput.android.inputtype" is static:
  const
    SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER* = "SDL.textinput.android.inputtype" 
else:
  let SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER* = "SDL.textinput.android.inputtype" 
when 1 is static:
  const
    SDL_BUTTON_LEFT* = 1     
else:
  let SDL_BUTTON_LEFT* = 1   
when 2 is static:
  const
    SDL_BUTTON_MIDDLE* = 2   
else:
  let SDL_BUTTON_MIDDLE* = 2 
when 3 is static:
  const
    SDL_BUTTON_RIGHT* = 3    
else:
  let SDL_BUTTON_RIGHT* = 3  
when 4 is static:
  const
    SDL_BUTTON_X1* = 4       
else:
  let SDL_BUTTON_X1* = 4     
when 5 is static:
  const
    SDL_BUTTON_X2* = 5       
else:
  let SDL_BUTTON_X2* = 5     
when 0 is static:
  const
    SDL_GPU_SHADERFORMAT_INVALID* = 0 
else:
  let SDL_GPU_SHADERFORMAT_INVALID* = 0 
when "SDL.gpu.createtexture.d3d12.clear.r" is static:
  const
    SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_R_FLOAT* = "SDL.gpu.createtexture.d3d12.clear.r" 
else:
  let SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_R_FLOAT* = "SDL.gpu.createtexture.d3d12.clear.r" 
when "SDL.gpu.createtexture.d3d12.clear.g" is static:
  const
    SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_G_FLOAT* = "SDL.gpu.createtexture.d3d12.clear.g" 
else:
  let SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_G_FLOAT* = "SDL.gpu.createtexture.d3d12.clear.g" 
when "SDL.gpu.createtexture.d3d12.clear.b" is static:
  const
    SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_B_FLOAT* = "SDL.gpu.createtexture.d3d12.clear.b" 
else:
  let SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_B_FLOAT* = "SDL.gpu.createtexture.d3d12.clear.b" 
when "SDL.gpu.createtexture.d3d12.clear.a" is static:
  const
    SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_A_FLOAT* = "SDL.gpu.createtexture.d3d12.clear.a" 
else:
  let SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_A_FLOAT* = "SDL.gpu.createtexture.d3d12.clear.a" 
when "SDL.gpu.createtexture.d3d12.clear.depth" is static:
  const
    SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_DEPTH_FLOAT* = "SDL.gpu.createtexture.d3d12.clear.depth" 
else:
  let SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_DEPTH_FLOAT* = "SDL.gpu.createtexture.d3d12.clear.depth" 
when "SDL.gpu.createtexture.d3d12.clear.stencil" is static:
  const
    SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_STENCIL_UINT8* = "SDL.gpu.createtexture.d3d12.clear.stencil" 
else:
  let SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_STENCIL_UINT8* = "SDL.gpu.createtexture.d3d12.clear.stencil" 
when "SDL.gpu.device.create.debugmode" is static:
  const
    SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN* = "SDL.gpu.device.create.debugmode" 
else:
  let SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN* = "SDL.gpu.device.create.debugmode" 
when "SDL.gpu.device.create.preferlowpower" is static:
  const
    SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN* = "SDL.gpu.device.create.preferlowpower" 
else:
  let SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN* = "SDL.gpu.device.create.preferlowpower" 
when "SDL.gpu.device.create.name" is static:
  const
    SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING* = "SDL.gpu.device.create.name" 
else:
  let SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING* = "SDL.gpu.device.create.name" 
when "SDL.gpu.device.create.shaders.private" is static:
  const
    SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN* = "SDL.gpu.device.create.shaders.private" 
else:
  let SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN* = "SDL.gpu.device.create.shaders.private" 
when "SDL.gpu.device.create.shaders.spirv" is static:
  const
    SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN* = "SDL.gpu.device.create.shaders.spirv" 
else:
  let SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN* = "SDL.gpu.device.create.shaders.spirv" 
when "SDL.gpu.device.create.shaders.dxbc" is static:
  const
    SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN* = "SDL.gpu.device.create.shaders.dxbc" 
else:
  let SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN* = "SDL.gpu.device.create.shaders.dxbc" 
when "SDL.gpu.device.create.shaders.dxil" is static:
  const
    SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN* = "SDL.gpu.device.create.shaders.dxil" 
else:
  let SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN* = "SDL.gpu.device.create.shaders.dxil" 
when "SDL.gpu.device.create.shaders.msl" is static:
  const
    SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN* = "SDL.gpu.device.create.shaders.msl" 
else:
  let SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN* = "SDL.gpu.device.create.shaders.msl" 
when "SDL.gpu.device.create.shaders.metallib" is static:
  const
    SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN* = "SDL.gpu.device.create.shaders.metallib" 
else:
  let SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN* = "SDL.gpu.device.create.shaders.metallib" 
when "SDL.gpu.device.create.d3d12.semantic" is static:
  const
    SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING* = "SDL.gpu.device.create.d3d12.semantic" 
else:
  let SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING* = "SDL.gpu.device.create.d3d12.semantic" 
when 0 is static:
  const
    SDL_HAPTIC_POLAR* = 0    
else:
  let SDL_HAPTIC_POLAR* = 0  
when 1 is static:
  const
    SDL_HAPTIC_CARTESIAN* = 1 
else:
  let SDL_HAPTIC_CARTESIAN* = 1 
when 2 is static:
  const
    SDL_HAPTIC_SPHERICAL* = 2 
else:
  let SDL_HAPTIC_SPHERICAL* = 2 
when 3 is static:
  const
    SDL_HAPTIC_STEERING_AXIS* = 3 
else:
  let SDL_HAPTIC_STEERING_AXIS* = 3 
when cast[cuint](4294967295'i64) is static:
  const
    SDL_HAPTIC_INFINITY* = cast[cuint](4294967295'i64) 
else:
  let SDL_HAPTIC_INFINITY* = cast[cuint](4294967295'i64) 
when "SDL_ALLOW_ALT_TAB_WHILE_GRABBED" is static:
  const
    SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED* = "SDL_ALLOW_ALT_TAB_WHILE_GRABBED" 
else:
  let SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED* = "SDL_ALLOW_ALT_TAB_WHILE_GRABBED" 
when "SDL_ANDROID_ALLOW_RECREATE_ACTIVITY" is static:
  const
    SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY* = "SDL_ANDROID_ALLOW_RECREATE_ACTIVITY" 
else:
  let SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY* = "SDL_ANDROID_ALLOW_RECREATE_ACTIVITY" 
when "SDL_ANDROID_BLOCK_ON_PAUSE" is static:
  const
    SDL_HINT_ANDROID_BLOCK_ON_PAUSE* = "SDL_ANDROID_BLOCK_ON_PAUSE" 
else:
  let SDL_HINT_ANDROID_BLOCK_ON_PAUSE* = "SDL_ANDROID_BLOCK_ON_PAUSE" 
when "SDL_ANDROID_TRAP_BACK_BUTTON" is static:
  const
    SDL_HINT_ANDROID_TRAP_BACK_BUTTON* = "SDL_ANDROID_TRAP_BACK_BUTTON" 
else:
  let SDL_HINT_ANDROID_TRAP_BACK_BUTTON* = "SDL_ANDROID_TRAP_BACK_BUTTON" 
when "SDL_APP_ID" is static:
  const
    SDL_HINT_APP_ID* = "SDL_APP_ID" 
else:
  let SDL_HINT_APP_ID* = "SDL_APP_ID" 
when "SDL_APP_NAME" is static:
  const
    SDL_HINT_APP_NAME* = "SDL_APP_NAME" 
else:
  let SDL_HINT_APP_NAME* = "SDL_APP_NAME" 
when "SDL_APPLE_TV_CONTROLLER_UI_EVENTS" is static:
  const
    SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS* = "SDL_APPLE_TV_CONTROLLER_UI_EVENTS" 
else:
  let SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS* = "SDL_APPLE_TV_CONTROLLER_UI_EVENTS" 
when "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION" is static:
  const
    SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION* = "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION" 
else:
  let SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION* = "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION" 
when "SDL_AUDIO_ALSA_DEFAULT_DEVICE" is static:
  const
    SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE* = "SDL_AUDIO_ALSA_DEFAULT_DEVICE" 
else:
  let SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE* = "SDL_AUDIO_ALSA_DEFAULT_DEVICE" 
when "SDL_AUDIO_CATEGORY" is static:
  const
    SDL_HINT_AUDIO_CATEGORY* = "SDL_AUDIO_CATEGORY" 
else:
  let SDL_HINT_AUDIO_CATEGORY* = "SDL_AUDIO_CATEGORY" 
when "SDL_AUDIO_CHANNELS" is static:
  const
    SDL_HINT_AUDIO_CHANNELS* = "SDL_AUDIO_CHANNELS" 
else:
  let SDL_HINT_AUDIO_CHANNELS* = "SDL_AUDIO_CHANNELS" 
when "SDL_AUDIO_DEVICE_APP_ICON_NAME" is static:
  const
    SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME* = "SDL_AUDIO_DEVICE_APP_ICON_NAME" 
else:
  let SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME* = "SDL_AUDIO_DEVICE_APP_ICON_NAME" 
when "SDL_AUDIO_DEVICE_SAMPLE_FRAMES" is static:
  const
    SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES* = "SDL_AUDIO_DEVICE_SAMPLE_FRAMES" 
else:
  let SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES* = "SDL_AUDIO_DEVICE_SAMPLE_FRAMES" 
when "SDL_AUDIO_DEVICE_STREAM_NAME" is static:
  const
    SDL_HINT_AUDIO_DEVICE_STREAM_NAME* = "SDL_AUDIO_DEVICE_STREAM_NAME" 
else:
  let SDL_HINT_AUDIO_DEVICE_STREAM_NAME* = "SDL_AUDIO_DEVICE_STREAM_NAME" 
when "SDL_AUDIO_DEVICE_STREAM_ROLE" is static:
  const
    SDL_HINT_AUDIO_DEVICE_STREAM_ROLE* = "SDL_AUDIO_DEVICE_STREAM_ROLE" 
else:
  let SDL_HINT_AUDIO_DEVICE_STREAM_ROLE* = "SDL_AUDIO_DEVICE_STREAM_ROLE" 
when "SDL_AUDIO_DISK_INPUT_FILE" is static:
  const
    SDL_HINT_AUDIO_DISK_INPUT_FILE* = "SDL_AUDIO_DISK_INPUT_FILE" 
else:
  let SDL_HINT_AUDIO_DISK_INPUT_FILE* = "SDL_AUDIO_DISK_INPUT_FILE" 
when "SDL_AUDIO_DISK_OUTPUT_FILE" is static:
  const
    SDL_HINT_AUDIO_DISK_OUTPUT_FILE* = "SDL_AUDIO_DISK_OUTPUT_FILE" 
else:
  let SDL_HINT_AUDIO_DISK_OUTPUT_FILE* = "SDL_AUDIO_DISK_OUTPUT_FILE" 
when "SDL_AUDIO_DISK_TIMESCALE" is static:
  const
    SDL_HINT_AUDIO_DISK_TIMESCALE* = "SDL_AUDIO_DISK_TIMESCALE" 
else:
  let SDL_HINT_AUDIO_DISK_TIMESCALE* = "SDL_AUDIO_DISK_TIMESCALE" 
when "SDL_AUDIO_DRIVER" is static:
  const
    SDL_HINT_AUDIO_DRIVER* = "SDL_AUDIO_DRIVER" 
else:
  let SDL_HINT_AUDIO_DRIVER* = "SDL_AUDIO_DRIVER" 
when "SDL_AUDIO_DUMMY_TIMESCALE" is static:
  const
    SDL_HINT_AUDIO_DUMMY_TIMESCALE* = "SDL_AUDIO_DUMMY_TIMESCALE" 
else:
  let SDL_HINT_AUDIO_DUMMY_TIMESCALE* = "SDL_AUDIO_DUMMY_TIMESCALE" 
when "SDL_AUDIO_FORMAT" is static:
  const
    SDL_HINT_AUDIO_FORMAT* = "SDL_AUDIO_FORMAT" 
else:
  let SDL_HINT_AUDIO_FORMAT* = "SDL_AUDIO_FORMAT" 
when "SDL_AUDIO_FREQUENCY" is static:
  const
    SDL_HINT_AUDIO_FREQUENCY* = "SDL_AUDIO_FREQUENCY" 
else:
  let SDL_HINT_AUDIO_FREQUENCY* = "SDL_AUDIO_FREQUENCY" 
when "SDL_AUDIO_INCLUDE_MONITORS" is static:
  const
    SDL_HINT_AUDIO_INCLUDE_MONITORS* = "SDL_AUDIO_INCLUDE_MONITORS" 
else:
  let SDL_HINT_AUDIO_INCLUDE_MONITORS* = "SDL_AUDIO_INCLUDE_MONITORS" 
when "SDL_AUTO_UPDATE_JOYSTICKS" is static:
  const
    SDL_HINT_AUTO_UPDATE_JOYSTICKS* = "SDL_AUTO_UPDATE_JOYSTICKS" 
else:
  let SDL_HINT_AUTO_UPDATE_JOYSTICKS* = "SDL_AUTO_UPDATE_JOYSTICKS" 
when "SDL_AUTO_UPDATE_SENSORS" is static:
  const
    SDL_HINT_AUTO_UPDATE_SENSORS* = "SDL_AUTO_UPDATE_SENSORS" 
else:
  let SDL_HINT_AUTO_UPDATE_SENSORS* = "SDL_AUTO_UPDATE_SENSORS" 
when "SDL_BMP_SAVE_LEGACY_FORMAT" is static:
  const
    SDL_HINT_BMP_SAVE_LEGACY_FORMAT* = "SDL_BMP_SAVE_LEGACY_FORMAT" 
else:
  let SDL_HINT_BMP_SAVE_LEGACY_FORMAT* = "SDL_BMP_SAVE_LEGACY_FORMAT" 
when "SDL_CAMERA_DRIVER" is static:
  const
    SDL_HINT_CAMERA_DRIVER* = "SDL_CAMERA_DRIVER" 
else:
  let SDL_HINT_CAMERA_DRIVER* = "SDL_CAMERA_DRIVER" 
when "SDL_CPU_FEATURE_MASK" is static:
  const
    SDL_HINT_CPU_FEATURE_MASK* = "SDL_CPU_FEATURE_MASK" 
else:
  let SDL_HINT_CPU_FEATURE_MASK* = "SDL_CPU_FEATURE_MASK" 
when "SDL_JOYSTICK_DIRECTINPUT" is static:
  const
    SDL_HINT_JOYSTICK_DIRECTINPUT* = "SDL_JOYSTICK_DIRECTINPUT" 
else:
  let SDL_HINT_JOYSTICK_DIRECTINPUT* = "SDL_JOYSTICK_DIRECTINPUT" 
when "SDL_FILE_DIALOG_DRIVER" is static:
  const
    SDL_HINT_FILE_DIALOG_DRIVER* = "SDL_FILE_DIALOG_DRIVER" 
else:
  let SDL_HINT_FILE_DIALOG_DRIVER* = "SDL_FILE_DIALOG_DRIVER" 
when "SDL_DISPLAY_USABLE_BOUNDS" is static:
  const
    SDL_HINT_DISPLAY_USABLE_BOUNDS* = "SDL_DISPLAY_USABLE_BOUNDS" 
else:
  let SDL_HINT_DISPLAY_USABLE_BOUNDS* = "SDL_DISPLAY_USABLE_BOUNDS" 
when "SDL_EMSCRIPTEN_ASYNCIFY" is static:
  const
    SDL_HINT_EMSCRIPTEN_ASYNCIFY* = "SDL_EMSCRIPTEN_ASYNCIFY" 
else:
  let SDL_HINT_EMSCRIPTEN_ASYNCIFY* = "SDL_EMSCRIPTEN_ASYNCIFY" 
when "SDL_EMSCRIPTEN_CANVAS_SELECTOR" is static:
  const
    SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR* = "SDL_EMSCRIPTEN_CANVAS_SELECTOR" 
else:
  let SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR* = "SDL_EMSCRIPTEN_CANVAS_SELECTOR" 
when "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT" is static:
  const
    SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT* = "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT" 
else:
  let SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT* = "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT" 
when "SDL_ENABLE_SCREEN_KEYBOARD" is static:
  const
    SDL_HINT_ENABLE_SCREEN_KEYBOARD* = "SDL_ENABLE_SCREEN_KEYBOARD" 
else:
  let SDL_HINT_ENABLE_SCREEN_KEYBOARD* = "SDL_ENABLE_SCREEN_KEYBOARD" 
when "SDL_EVDEV_DEVICES" is static:
  const
    SDL_HINT_EVDEV_DEVICES* = "SDL_EVDEV_DEVICES" 
else:
  let SDL_HINT_EVDEV_DEVICES* = "SDL_EVDEV_DEVICES" 
when "SDL_EVENT_LOGGING" is static:
  const
    SDL_HINT_EVENT_LOGGING* = "SDL_EVENT_LOGGING" 
else:
  let SDL_HINT_EVENT_LOGGING* = "SDL_EVENT_LOGGING" 
when "SDL_FORCE_RAISEWINDOW" is static:
  const
    SDL_HINT_FORCE_RAISEWINDOW* = "SDL_FORCE_RAISEWINDOW" 
else:
  let SDL_HINT_FORCE_RAISEWINDOW* = "SDL_FORCE_RAISEWINDOW" 
when "SDL_FRAMEBUFFER_ACCELERATION" is static:
  const
    SDL_HINT_FRAMEBUFFER_ACCELERATION* = "SDL_FRAMEBUFFER_ACCELERATION" 
else:
  let SDL_HINT_FRAMEBUFFER_ACCELERATION* = "SDL_FRAMEBUFFER_ACCELERATION" 
when "SDL_GAMECONTROLLERCONFIG" is static:
  const
    SDL_HINT_GAMECONTROLLERCONFIG* = "SDL_GAMECONTROLLERCONFIG" 
else:
  let SDL_HINT_GAMECONTROLLERCONFIG* = "SDL_GAMECONTROLLERCONFIG" 
when "SDL_GAMECONTROLLERCONFIG_FILE" is static:
  const
    SDL_HINT_GAMECONTROLLERCONFIG_FILE* = "SDL_GAMECONTROLLERCONFIG_FILE" 
else:
  let SDL_HINT_GAMECONTROLLERCONFIG_FILE* = "SDL_GAMECONTROLLERCONFIG_FILE" 
when "SDL_GAMECONTROLLERTYPE" is static:
  const
    SDL_HINT_GAMECONTROLLERTYPE* = "SDL_GAMECONTROLLERTYPE" 
else:
  let SDL_HINT_GAMECONTROLLERTYPE* = "SDL_GAMECONTROLLERTYPE" 
when "SDL_GAMECONTROLLER_IGNORE_DEVICES" is static:
  const
    SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES* = "SDL_GAMECONTROLLER_IGNORE_DEVICES" 
else:
  let SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES* = "SDL_GAMECONTROLLER_IGNORE_DEVICES" 
when "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT" is static:
  const
    SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT* = "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT" 
else:
  let SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT* = "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT" 
when "SDL_GAMECONTROLLER_SENSOR_FUSION" is static:
  const
    SDL_HINT_GAMECONTROLLER_SENSOR_FUSION* = "SDL_GAMECONTROLLER_SENSOR_FUSION" 
else:
  let SDL_HINT_GAMECONTROLLER_SENSOR_FUSION* = "SDL_GAMECONTROLLER_SENSOR_FUSION" 
when "SDL_GDK_TEXTINPUT_DEFAULT_TEXT" is static:
  const
    SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT* = "SDL_GDK_TEXTINPUT_DEFAULT_TEXT" 
else:
  let SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT* = "SDL_GDK_TEXTINPUT_DEFAULT_TEXT" 
when "SDL_GDK_TEXTINPUT_DESCRIPTION" is static:
  const
    SDL_HINT_GDK_TEXTINPUT_DESCRIPTION* = "SDL_GDK_TEXTINPUT_DESCRIPTION" 
else:
  let SDL_HINT_GDK_TEXTINPUT_DESCRIPTION* = "SDL_GDK_TEXTINPUT_DESCRIPTION" 
when "SDL_GDK_TEXTINPUT_MAX_LENGTH" is static:
  const
    SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH* = "SDL_GDK_TEXTINPUT_MAX_LENGTH" 
else:
  let SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH* = "SDL_GDK_TEXTINPUT_MAX_LENGTH" 
when "SDL_GDK_TEXTINPUT_SCOPE" is static:
  const
    SDL_HINT_GDK_TEXTINPUT_SCOPE* = "SDL_GDK_TEXTINPUT_SCOPE" 
else:
  let SDL_HINT_GDK_TEXTINPUT_SCOPE* = "SDL_GDK_TEXTINPUT_SCOPE" 
when "SDL_GDK_TEXTINPUT_TITLE" is static:
  const
    SDL_HINT_GDK_TEXTINPUT_TITLE* = "SDL_GDK_TEXTINPUT_TITLE" 
else:
  let SDL_HINT_GDK_TEXTINPUT_TITLE* = "SDL_GDK_TEXTINPUT_TITLE" 
when "SDL_HIDAPI_LIBUSB" is static:
  const
    SDL_HINT_HIDAPI_LIBUSB* = "SDL_HIDAPI_LIBUSB" 
else:
  let SDL_HINT_HIDAPI_LIBUSB* = "SDL_HIDAPI_LIBUSB" 
when "SDL_HIDAPI_LIBUSB_WHITELIST" is static:
  const
    SDL_HINT_HIDAPI_LIBUSB_WHITELIST* = "SDL_HIDAPI_LIBUSB_WHITELIST" 
else:
  let SDL_HINT_HIDAPI_LIBUSB_WHITELIST* = "SDL_HIDAPI_LIBUSB_WHITELIST" 
when "SDL_HIDAPI_UDEV" is static:
  const
    SDL_HINT_HIDAPI_UDEV* = "SDL_HIDAPI_UDEV" 
else:
  let SDL_HINT_HIDAPI_UDEV* = "SDL_HIDAPI_UDEV" 
when "SDL_GPU_DRIVER" is static:
  const
    SDL_HINT_GPU_DRIVER* = "SDL_GPU_DRIVER" 
else:
  let SDL_HINT_GPU_DRIVER* = "SDL_GPU_DRIVER" 
when "SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS" is static:
  const
    SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS* = "SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS" 
else:
  let SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS* = "SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS" 
when "SDL_HIDAPI_IGNORE_DEVICES" is static:
  const
    SDL_HINT_HIDAPI_IGNORE_DEVICES* = "SDL_HIDAPI_IGNORE_DEVICES" 
else:
  let SDL_HINT_HIDAPI_IGNORE_DEVICES* = "SDL_HIDAPI_IGNORE_DEVICES" 
when "SDL_IME_IMPLEMENTED_UI" is static:
  const
    SDL_HINT_IME_IMPLEMENTED_UI* = "SDL_IME_IMPLEMENTED_UI" 
else:
  let SDL_HINT_IME_IMPLEMENTED_UI* = "SDL_IME_IMPLEMENTED_UI" 
when "SDL_IOS_HIDE_HOME_INDICATOR" is static:
  const
    SDL_HINT_IOS_HIDE_HOME_INDICATOR* = "SDL_IOS_HIDE_HOME_INDICATOR" 
else:
  let SDL_HINT_IOS_HIDE_HOME_INDICATOR* = "SDL_IOS_HIDE_HOME_INDICATOR" 
when "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS" is static:
  const
    SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS* = "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS" 
else:
  let SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS* = "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS" 
when "SDL_JOYSTICK_ARCADESTICK_DEVICES" is static:
  const
    SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES* = "SDL_JOYSTICK_ARCADESTICK_DEVICES" 
else:
  let SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES* = "SDL_JOYSTICK_ARCADESTICK_DEVICES" 
when "SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED" is static:
  const
    SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED* = "SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED" 
else:
  let SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED* = "SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED" 
when "SDL_JOYSTICK_BLACKLIST_DEVICES" is static:
  const
    SDL_HINT_JOYSTICK_BLACKLIST_DEVICES* = "SDL_JOYSTICK_BLACKLIST_DEVICES" 
else:
  let SDL_HINT_JOYSTICK_BLACKLIST_DEVICES* = "SDL_JOYSTICK_BLACKLIST_DEVICES" 
when "SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED" is static:
  const
    SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED* = "SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED" 
else:
  let SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED* = "SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED" 
when "SDL_JOYSTICK_DEVICE" is static:
  const
    SDL_HINT_JOYSTICK_DEVICE* = "SDL_JOYSTICK_DEVICE" 
else:
  let SDL_HINT_JOYSTICK_DEVICE* = "SDL_JOYSTICK_DEVICE" 
when "SDL_JOYSTICK_FLIGHTSTICK_DEVICES" is static:
  const
    SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES* = "SDL_JOYSTICK_FLIGHTSTICK_DEVICES" 
else:
  let SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES* = "SDL_JOYSTICK_FLIGHTSTICK_DEVICES" 
when "SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED" is static:
  const
    SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED* = "SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED" 
else:
  let SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED* = "SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED" 
when "SDL_JOYSTICK_GAMEINPUT" is static:
  const
    SDL_HINT_JOYSTICK_GAMEINPUT* = "SDL_JOYSTICK_GAMEINPUT" 
else:
  let SDL_HINT_JOYSTICK_GAMEINPUT* = "SDL_JOYSTICK_GAMEINPUT" 
when "SDL_JOYSTICK_GAMECUBE_DEVICES" is static:
  const
    SDL_HINT_JOYSTICK_GAMECUBE_DEVICES* = "SDL_JOYSTICK_GAMECUBE_DEVICES" 
else:
  let SDL_HINT_JOYSTICK_GAMECUBE_DEVICES* = "SDL_JOYSTICK_GAMECUBE_DEVICES" 
when "SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED" is static:
  const
    SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED* = "SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED" 
else:
  let SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED* = "SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED" 
when "SDL_JOYSTICK_HIDAPI" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI* = "SDL_JOYSTICK_HIDAPI" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI* = "SDL_JOYSTICK_HIDAPI" 
when "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS* = "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS* = "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS" 
when "SDL_JOYSTICK_HIDAPI_GAMECUBE" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE* = "SDL_JOYSTICK_HIDAPI_GAMECUBE" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE* = "SDL_JOYSTICK_HIDAPI_GAMECUBE" 
when "SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE* = "SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE* = "SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE" 
when "SDL_JOYSTICK_HIDAPI_JOY_CONS" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS* = "SDL_JOYSTICK_HIDAPI_JOY_CONS" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS* = "SDL_JOYSTICK_HIDAPI_JOY_CONS" 
when "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED* = "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED* = "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED" 
when "SDL_JOYSTICK_HIDAPI_LUNA" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_LUNA* = "SDL_JOYSTICK_HIDAPI_LUNA" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_LUNA* = "SDL_JOYSTICK_HIDAPI_LUNA" 
when "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC* = "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC* = "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC" 
when "SDL_JOYSTICK_HIDAPI_PS3" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_PS3* = "SDL_JOYSTICK_HIDAPI_PS3" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_PS3* = "SDL_JOYSTICK_HIDAPI_PS3" 
when "SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER* = "SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER* = "SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER" 
when "SDL_JOYSTICK_HIDAPI_PS4" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_PS4* = "SDL_JOYSTICK_HIDAPI_PS4" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_PS4* = "SDL_JOYSTICK_HIDAPI_PS4" 
when "SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL* = "SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL* = "SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL" 
when "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE* = "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE* = "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE" 
when "SDL_JOYSTICK_HIDAPI_PS5" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_PS5* = "SDL_JOYSTICK_HIDAPI_PS5" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_PS5* = "SDL_JOYSTICK_HIDAPI_PS5" 
when "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED* = "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED* = "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED" 
when "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE* = "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE* = "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE" 
when "SDL_JOYSTICK_HIDAPI_SHIELD" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_SHIELD* = "SDL_JOYSTICK_HIDAPI_SHIELD" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_SHIELD* = "SDL_JOYSTICK_HIDAPI_SHIELD" 
when "SDL_JOYSTICK_HIDAPI_STADIA" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_STADIA* = "SDL_JOYSTICK_HIDAPI_STADIA" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_STADIA* = "SDL_JOYSTICK_HIDAPI_STADIA" 
when "SDL_JOYSTICK_HIDAPI_STEAM" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_STEAM* = "SDL_JOYSTICK_HIDAPI_STEAM" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_STEAM* = "SDL_JOYSTICK_HIDAPI_STEAM" 
when "SDL_JOYSTICK_HIDAPI_STEAMDECK" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK* = "SDL_JOYSTICK_HIDAPI_STEAMDECK" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK* = "SDL_JOYSTICK_HIDAPI_STEAMDECK" 
when "SDL_JOYSTICK_HIDAPI_STEAM_HORI" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI* = "SDL_JOYSTICK_HIDAPI_STEAM_HORI" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI* = "SDL_JOYSTICK_HIDAPI_STEAM_HORI" 
when "SDL_JOYSTICK_HIDAPI_SWITCH" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_SWITCH* = "SDL_JOYSTICK_HIDAPI_SWITCH" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_SWITCH* = "SDL_JOYSTICK_HIDAPI_SWITCH" 
when "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED* = "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED* = "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED" 
when "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED* = "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED* = "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED" 
when "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS* = "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS* = "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS" 
when "SDL_JOYSTICK_HIDAPI_WII" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_WII* = "SDL_JOYSTICK_HIDAPI_WII" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_WII* = "SDL_JOYSTICK_HIDAPI_WII" 
when "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED* = "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED* = "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED" 
when "SDL_JOYSTICK_HIDAPI_XBOX" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_XBOX* = "SDL_JOYSTICK_HIDAPI_XBOX" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_XBOX* = "SDL_JOYSTICK_HIDAPI_XBOX" 
when "SDL_JOYSTICK_HIDAPI_XBOX_360" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_XBOX_360* = "SDL_JOYSTICK_HIDAPI_XBOX_360" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_XBOX_360* = "SDL_JOYSTICK_HIDAPI_XBOX_360" 
when "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED* = "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED* = "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED" 
when "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS* = "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS* = "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS" 
when "SDL_JOYSTICK_HIDAPI_XBOX_ONE" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE* = "SDL_JOYSTICK_HIDAPI_XBOX_ONE" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE* = "SDL_JOYSTICK_HIDAPI_XBOX_ONE" 
when "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED" is static:
  const
    SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED* = "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED" 
else:
  let SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED* = "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED" 
when "SDL_JOYSTICK_IOKIT" is static:
  const
    SDL_HINT_JOYSTICK_IOKIT* = "SDL_JOYSTICK_IOKIT" 
else:
  let SDL_HINT_JOYSTICK_IOKIT* = "SDL_JOYSTICK_IOKIT" 
when "SDL_JOYSTICK_LINUX_CLASSIC" is static:
  const
    SDL_HINT_JOYSTICK_LINUX_CLASSIC* = "SDL_JOYSTICK_LINUX_CLASSIC" 
else:
  let SDL_HINT_JOYSTICK_LINUX_CLASSIC* = "SDL_JOYSTICK_LINUX_CLASSIC" 
when "SDL_JOYSTICK_LINUX_DEADZONES" is static:
  const
    SDL_HINT_JOYSTICK_LINUX_DEADZONES* = "SDL_JOYSTICK_LINUX_DEADZONES" 
else:
  let SDL_HINT_JOYSTICK_LINUX_DEADZONES* = "SDL_JOYSTICK_LINUX_DEADZONES" 
when "SDL_JOYSTICK_LINUX_DIGITAL_HATS" is static:
  const
    SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS* = "SDL_JOYSTICK_LINUX_DIGITAL_HATS" 
else:
  let SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS* = "SDL_JOYSTICK_LINUX_DIGITAL_HATS" 
when "SDL_JOYSTICK_LINUX_HAT_DEADZONES" is static:
  const
    SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES* = "SDL_JOYSTICK_LINUX_HAT_DEADZONES" 
else:
  let SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES* = "SDL_JOYSTICK_LINUX_HAT_DEADZONES" 
when "SDL_JOYSTICK_MFI" is static:
  const
    SDL_HINT_JOYSTICK_MFI* = "SDL_JOYSTICK_MFI" 
else:
  let SDL_HINT_JOYSTICK_MFI* = "SDL_JOYSTICK_MFI" 
when "SDL_JOYSTICK_RAWINPUT" is static:
  const
    SDL_HINT_JOYSTICK_RAWINPUT* = "SDL_JOYSTICK_RAWINPUT" 
else:
  let SDL_HINT_JOYSTICK_RAWINPUT* = "SDL_JOYSTICK_RAWINPUT" 
when "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT" is static:
  const
    SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT* = "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT" 
else:
  let SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT* = "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT" 
when "SDL_JOYSTICK_ROG_CHAKRAM" is static:
  const
    SDL_HINT_JOYSTICK_ROG_CHAKRAM* = "SDL_JOYSTICK_ROG_CHAKRAM" 
else:
  let SDL_HINT_JOYSTICK_ROG_CHAKRAM* = "SDL_JOYSTICK_ROG_CHAKRAM" 
when "SDL_JOYSTICK_THREAD" is static:
  const
    SDL_HINT_JOYSTICK_THREAD* = "SDL_JOYSTICK_THREAD" 
else:
  let SDL_HINT_JOYSTICK_THREAD* = "SDL_JOYSTICK_THREAD" 
when "SDL_JOYSTICK_THROTTLE_DEVICES" is static:
  const
    SDL_HINT_JOYSTICK_THROTTLE_DEVICES* = "SDL_JOYSTICK_THROTTLE_DEVICES" 
else:
  let SDL_HINT_JOYSTICK_THROTTLE_DEVICES* = "SDL_JOYSTICK_THROTTLE_DEVICES" 
when "SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED" is static:
  const
    SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED* = "SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED" 
else:
  let SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED* = "SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED" 
when "SDL_JOYSTICK_WGI" is static:
  const
    SDL_HINT_JOYSTICK_WGI* = "SDL_JOYSTICK_WGI" 
else:
  let SDL_HINT_JOYSTICK_WGI* = "SDL_JOYSTICK_WGI" 
when "SDL_JOYSTICK_WHEEL_DEVICES" is static:
  const
    SDL_HINT_JOYSTICK_WHEEL_DEVICES* = "SDL_JOYSTICK_WHEEL_DEVICES" 
else:
  let SDL_HINT_JOYSTICK_WHEEL_DEVICES* = "SDL_JOYSTICK_WHEEL_DEVICES" 
when "SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED" is static:
  const
    SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED* = "SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED" 
else:
  let SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED* = "SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED" 
when "SDL_JOYSTICK_ZERO_CENTERED_DEVICES" is static:
  const
    SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES* = "SDL_JOYSTICK_ZERO_CENTERED_DEVICES" 
else:
  let SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES* = "SDL_JOYSTICK_ZERO_CENTERED_DEVICES" 
when "SDL_KEYCODE_OPTIONS" is static:
  const
    SDL_HINT_KEYCODE_OPTIONS* = "SDL_KEYCODE_OPTIONS" 
else:
  let SDL_HINT_KEYCODE_OPTIONS* = "SDL_KEYCODE_OPTIONS" 
when "SDL_KMSDRM_DEVICE_INDEX" is static:
  const
    SDL_HINT_KMSDRM_DEVICE_INDEX* = "SDL_KMSDRM_DEVICE_INDEX" 
else:
  let SDL_HINT_KMSDRM_DEVICE_INDEX* = "SDL_KMSDRM_DEVICE_INDEX" 
when "SDL_KMSDRM_REQUIRE_DRM_MASTER" is static:
  const
    SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER* = "SDL_KMSDRM_REQUIRE_DRM_MASTER" 
else:
  let SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER* = "SDL_KMSDRM_REQUIRE_DRM_MASTER" 
when "SDL_LOGGING" is static:
  const
    SDL_HINT_LOGGING* = "SDL_LOGGING" 
else:
  let SDL_HINT_LOGGING* = "SDL_LOGGING" 
when "SDL_MAC_BACKGROUND_APP" is static:
  const
    SDL_HINT_MAC_BACKGROUND_APP* = "SDL_MAC_BACKGROUND_APP" 
else:
  let SDL_HINT_MAC_BACKGROUND_APP* = "SDL_MAC_BACKGROUND_APP" 
when "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK" is static:
  const
    SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK* = "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK" 
else:
  let SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK* = "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK" 
when "SDL_MAC_OPENGL_ASYNC_DISPATCH" is static:
  const
    SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH* = "SDL_MAC_OPENGL_ASYNC_DISPATCH" 
else:
  let SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH* = "SDL_MAC_OPENGL_ASYNC_DISPATCH" 
when "SDL_MAC_SCROLL_MOMENTUM" is static:
  const
    SDL_HINT_MAC_SCROLL_MOMENTUM* = "SDL_MAC_SCROLL_MOMENTUM" 
else:
  let SDL_HINT_MAC_SCROLL_MOMENTUM* = "SDL_MAC_SCROLL_MOMENTUM" 
when "SDL_MAIN_CALLBACK_RATE" is static:
  const
    SDL_HINT_MAIN_CALLBACK_RATE* = "SDL_MAIN_CALLBACK_RATE" 
else:
  let SDL_HINT_MAIN_CALLBACK_RATE* = "SDL_MAIN_CALLBACK_RATE" 
when "SDL_MOUSE_AUTO_CAPTURE" is static:
  const
    SDL_HINT_MOUSE_AUTO_CAPTURE* = "SDL_MOUSE_AUTO_CAPTURE" 
else:
  let SDL_HINT_MOUSE_AUTO_CAPTURE* = "SDL_MOUSE_AUTO_CAPTURE" 
when "SDL_MOUSE_DOUBLE_CLICK_RADIUS" is static:
  const
    SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS* = "SDL_MOUSE_DOUBLE_CLICK_RADIUS" 
else:
  let SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS* = "SDL_MOUSE_DOUBLE_CLICK_RADIUS" 
when "SDL_MOUSE_DOUBLE_CLICK_TIME" is static:
  const
    SDL_HINT_MOUSE_DOUBLE_CLICK_TIME* = "SDL_MOUSE_DOUBLE_CLICK_TIME" 
else:
  let SDL_HINT_MOUSE_DOUBLE_CLICK_TIME* = "SDL_MOUSE_DOUBLE_CLICK_TIME" 
when "SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE" is static:
  const
    SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE* = "SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE" 
else:
  let SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE* = "SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE" 
when "SDL_MOUSE_FOCUS_CLICKTHROUGH" is static:
  const
    SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH* = "SDL_MOUSE_FOCUS_CLICKTHROUGH" 
else:
  let SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH* = "SDL_MOUSE_FOCUS_CLICKTHROUGH" 
when "SDL_MOUSE_NORMAL_SPEED_SCALE" is static:
  const
    SDL_HINT_MOUSE_NORMAL_SPEED_SCALE* = "SDL_MOUSE_NORMAL_SPEED_SCALE" 
else:
  let SDL_HINT_MOUSE_NORMAL_SPEED_SCALE* = "SDL_MOUSE_NORMAL_SPEED_SCALE" 
when "SDL_MOUSE_RELATIVE_MODE_CENTER" is static:
  const
    SDL_HINT_MOUSE_RELATIVE_MODE_CENTER* = "SDL_MOUSE_RELATIVE_MODE_CENTER" 
else:
  let SDL_HINT_MOUSE_RELATIVE_MODE_CENTER* = "SDL_MOUSE_RELATIVE_MODE_CENTER" 
when "SDL_MOUSE_RELATIVE_MODE_WARP" is static:
  const
    SDL_HINT_MOUSE_RELATIVE_MODE_WARP* = "SDL_MOUSE_RELATIVE_MODE_WARP" 
else:
  let SDL_HINT_MOUSE_RELATIVE_MODE_WARP* = "SDL_MOUSE_RELATIVE_MODE_WARP" 
when "SDL_MOUSE_RELATIVE_SPEED_SCALE" is static:
  const
    SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE* = "SDL_MOUSE_RELATIVE_SPEED_SCALE" 
else:
  let SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE* = "SDL_MOUSE_RELATIVE_SPEED_SCALE" 
when "SDL_MOUSE_RELATIVE_SYSTEM_SCALE" is static:
  const
    SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE* = "SDL_MOUSE_RELATIVE_SYSTEM_SCALE" 
else:
  let SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE* = "SDL_MOUSE_RELATIVE_SYSTEM_SCALE" 
when "SDL_MOUSE_RELATIVE_WARP_MOTION" is static:
  const
    SDL_HINT_MOUSE_RELATIVE_WARP_MOTION* = "SDL_MOUSE_RELATIVE_WARP_MOTION" 
else:
  let SDL_HINT_MOUSE_RELATIVE_WARP_MOTION* = "SDL_MOUSE_RELATIVE_WARP_MOTION" 
when "SDL_MOUSE_RELATIVE_CURSOR_VISIBLE" is static:
  const
    SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE* = "SDL_MOUSE_RELATIVE_CURSOR_VISIBLE" 
else:
  let SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE* = "SDL_MOUSE_RELATIVE_CURSOR_VISIBLE" 
when "SDL_MOUSE_RELATIVE_CLIP_INTERVAL" is static:
  const
    SDL_HINT_MOUSE_RELATIVE_CLIP_INTERVAL* = "SDL_MOUSE_RELATIVE_CLIP_INTERVAL" 
else:
  let SDL_HINT_MOUSE_RELATIVE_CLIP_INTERVAL* = "SDL_MOUSE_RELATIVE_CLIP_INTERVAL" 
when "SDL_MOUSE_TOUCH_EVENTS" is static:
  const
    SDL_HINT_MOUSE_TOUCH_EVENTS* = "SDL_MOUSE_TOUCH_EVENTS" 
else:
  let SDL_HINT_MOUSE_TOUCH_EVENTS* = "SDL_MOUSE_TOUCH_EVENTS" 
when "SDL_MUTE_CONSOLE_KEYBOARD" is static:
  const
    SDL_HINT_MUTE_CONSOLE_KEYBOARD* = "SDL_MUTE_CONSOLE_KEYBOARD" 
else:
  let SDL_HINT_MUTE_CONSOLE_KEYBOARD* = "SDL_MUTE_CONSOLE_KEYBOARD" 
when "SDL_NO_SIGNAL_HANDLERS" is static:
  const
    SDL_HINT_NO_SIGNAL_HANDLERS* = "SDL_NO_SIGNAL_HANDLERS" 
else:
  let SDL_HINT_NO_SIGNAL_HANDLERS* = "SDL_NO_SIGNAL_HANDLERS" 
when "SDL_OPENGL_LIBRARY" is static:
  const
    SDL_HINT_OPENGL_LIBRARY* = "SDL_OPENGL_LIBRARY" 
else:
  let SDL_HINT_OPENGL_LIBRARY* = "SDL_OPENGL_LIBRARY" 
when "SDL_OPENGL_ES_DRIVER" is static:
  const
    SDL_HINT_OPENGL_ES_DRIVER* = "SDL_OPENGL_ES_DRIVER" 
else:
  let SDL_HINT_OPENGL_ES_DRIVER* = "SDL_OPENGL_ES_DRIVER" 
when "SDL_OPENVR_LIBRARY" is static:
  const
    SDL_HINT_OPENVR_LIBRARY* = "SDL_OPENVR_LIBRARY" 
else:
  let SDL_HINT_OPENVR_LIBRARY* = "SDL_OPENVR_LIBRARY" 
when "SDL_ORIENTATIONS" is static:
  const
    SDL_HINT_ORIENTATIONS* = "SDL_ORIENTATIONS" 
else:
  let SDL_HINT_ORIENTATIONS* = "SDL_ORIENTATIONS" 
when "SDL_POLL_SENTINEL" is static:
  const
    SDL_HINT_POLL_SENTINEL* = "SDL_POLL_SENTINEL" 
else:
  let SDL_HINT_POLL_SENTINEL* = "SDL_POLL_SENTINEL" 
when "SDL_PREFERRED_LOCALES" is static:
  const
    SDL_HINT_PREFERRED_LOCALES* = "SDL_PREFERRED_LOCALES" 
else:
  let SDL_HINT_PREFERRED_LOCALES* = "SDL_PREFERRED_LOCALES" 
when "SDL_QUIT_ON_LAST_WINDOW_CLOSE" is static:
  const
    SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE* = "SDL_QUIT_ON_LAST_WINDOW_CLOSE" 
else:
  let SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE* = "SDL_QUIT_ON_LAST_WINDOW_CLOSE" 
when "SDL_RENDER_DIRECT3D_THREADSAFE" is static:
  const
    SDL_HINT_RENDER_DIRECT3D_THREADSAFE* = "SDL_RENDER_DIRECT3D_THREADSAFE" 
else:
  let SDL_HINT_RENDER_DIRECT3D_THREADSAFE* = "SDL_RENDER_DIRECT3D_THREADSAFE" 
when "SDL_RENDER_DIRECT3D11_DEBUG" is static:
  const
    SDL_HINT_RENDER_DIRECT3D11_DEBUG* = "SDL_RENDER_DIRECT3D11_DEBUG" 
else:
  let SDL_HINT_RENDER_DIRECT3D11_DEBUG* = "SDL_RENDER_DIRECT3D11_DEBUG" 
when "SDL_RENDER_VULKAN_DEBUG" is static:
  const
    SDL_HINT_RENDER_VULKAN_DEBUG* = "SDL_RENDER_VULKAN_DEBUG" 
else:
  let SDL_HINT_RENDER_VULKAN_DEBUG* = "SDL_RENDER_VULKAN_DEBUG" 
when "SDL_RENDER_GPU_DEBUG" is static:
  const
    SDL_HINT_RENDER_GPU_DEBUG* = "SDL_RENDER_GPU_DEBUG" 
else:
  let SDL_HINT_RENDER_GPU_DEBUG* = "SDL_RENDER_GPU_DEBUG" 
when "SDL_RENDER_GPU_LOW_POWER" is static:
  const
    SDL_HINT_RENDER_GPU_LOW_POWER* = "SDL_RENDER_GPU_LOW_POWER" 
else:
  let SDL_HINT_RENDER_GPU_LOW_POWER* = "SDL_RENDER_GPU_LOW_POWER" 
when "SDL_RENDER_DRIVER" is static:
  const
    SDL_HINT_RENDER_DRIVER* = "SDL_RENDER_DRIVER" 
else:
  let SDL_HINT_RENDER_DRIVER* = "SDL_RENDER_DRIVER" 
when "SDL_RENDER_LINE_METHOD" is static:
  const
    SDL_HINT_RENDER_LINE_METHOD* = "SDL_RENDER_LINE_METHOD" 
else:
  let SDL_HINT_RENDER_LINE_METHOD* = "SDL_RENDER_LINE_METHOD" 
when "SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE" is static:
  const
    SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE* = "SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE" 
else:
  let SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE* = "SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE" 
when "SDL_RENDER_VSYNC" is static:
  const
    SDL_HINT_RENDER_VSYNC* = "SDL_RENDER_VSYNC" 
else:
  let SDL_HINT_RENDER_VSYNC* = "SDL_RENDER_VSYNC" 
when "SDL_RETURN_KEY_HIDES_IME" is static:
  const
    SDL_HINT_RETURN_KEY_HIDES_IME* = "SDL_RETURN_KEY_HIDES_IME" 
else:
  let SDL_HINT_RETURN_KEY_HIDES_IME* = "SDL_RETURN_KEY_HIDES_IME" 
when "SDL_ROG_GAMEPAD_MICE" is static:
  const
    SDL_HINT_ROG_GAMEPAD_MICE* = "SDL_ROG_GAMEPAD_MICE" 
else:
  let SDL_HINT_ROG_GAMEPAD_MICE* = "SDL_ROG_GAMEPAD_MICE" 
when "SDL_ROG_GAMEPAD_MICE_EXCLUDED" is static:
  const
    SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED* = "SDL_ROG_GAMEPAD_MICE_EXCLUDED" 
else:
  let SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED* = "SDL_ROG_GAMEPAD_MICE_EXCLUDED" 
when "SDL_RPI_VIDEO_LAYER" is static:
  const
    SDL_HINT_RPI_VIDEO_LAYER* = "SDL_RPI_VIDEO_LAYER" 
else:
  let SDL_HINT_RPI_VIDEO_LAYER* = "SDL_RPI_VIDEO_LAYER" 
when "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME" is static:
  const
    SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME* = "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME" 
else:
  let SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME* = "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME" 
when "SDL_SHUTDOWN_DBUS_ON_QUIT" is static:
  const
    SDL_HINT_SHUTDOWN_DBUS_ON_QUIT* = "SDL_SHUTDOWN_DBUS_ON_QUIT" 
else:
  let SDL_HINT_SHUTDOWN_DBUS_ON_QUIT* = "SDL_SHUTDOWN_DBUS_ON_QUIT" 
when "SDL_STORAGE_TITLE_DRIVER" is static:
  const
    SDL_HINT_STORAGE_TITLE_DRIVER* = "SDL_STORAGE_TITLE_DRIVER" 
else:
  let SDL_HINT_STORAGE_TITLE_DRIVER* = "SDL_STORAGE_TITLE_DRIVER" 
when "SDL_STORAGE_USER_DRIVER" is static:
  const
    SDL_HINT_STORAGE_USER_DRIVER* = "SDL_STORAGE_USER_DRIVER" 
else:
  let SDL_HINT_STORAGE_USER_DRIVER* = "SDL_STORAGE_USER_DRIVER" 
when "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL" is static:
  const
    SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL* = "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL" 
else:
  let SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL* = "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL" 
when "SDL_THREAD_PRIORITY_POLICY" is static:
  const
    SDL_HINT_THREAD_PRIORITY_POLICY* = "SDL_THREAD_PRIORITY_POLICY" 
else:
  let SDL_HINT_THREAD_PRIORITY_POLICY* = "SDL_THREAD_PRIORITY_POLICY" 
when "SDL_TIMER_RESOLUTION" is static:
  const
    SDL_HINT_TIMER_RESOLUTION* = "SDL_TIMER_RESOLUTION" 
else:
  let SDL_HINT_TIMER_RESOLUTION* = "SDL_TIMER_RESOLUTION" 
when "SDL_TOUCH_MOUSE_EVENTS" is static:
  const
    SDL_HINT_TOUCH_MOUSE_EVENTS* = "SDL_TOUCH_MOUSE_EVENTS" 
else:
  let SDL_HINT_TOUCH_MOUSE_EVENTS* = "SDL_TOUCH_MOUSE_EVENTS" 
when "SDL_TRACKPAD_IS_TOUCH_ONLY" is static:
  const
    SDL_HINT_TRACKPAD_IS_TOUCH_ONLY* = "SDL_TRACKPAD_IS_TOUCH_ONLY" 
else:
  let SDL_HINT_TRACKPAD_IS_TOUCH_ONLY* = "SDL_TRACKPAD_IS_TOUCH_ONLY" 
when "SDL_TV_REMOTE_AS_JOYSTICK" is static:
  const
    SDL_HINT_TV_REMOTE_AS_JOYSTICK* = "SDL_TV_REMOTE_AS_JOYSTICK" 
else:
  let SDL_HINT_TV_REMOTE_AS_JOYSTICK* = "SDL_TV_REMOTE_AS_JOYSTICK" 
when "SDL_VIDEO_ALLOW_SCREENSAVER" is static:
  const
    SDL_HINT_VIDEO_ALLOW_SCREENSAVER* = "SDL_VIDEO_ALLOW_SCREENSAVER" 
else:
  let SDL_HINT_VIDEO_ALLOW_SCREENSAVER* = "SDL_VIDEO_ALLOW_SCREENSAVER" 
when "SDL_VIDEO_DISPLAY_PRIORITY" is static:
  const
    SDL_HINT_VIDEO_DISPLAY_PRIORITY* = "SDL_VIDEO_DISPLAY_PRIORITY" 
else:
  let SDL_HINT_VIDEO_DISPLAY_PRIORITY* = "SDL_VIDEO_DISPLAY_PRIORITY" 
when "SDL_VIDEO_DOUBLE_BUFFER" is static:
  const
    SDL_HINT_VIDEO_DOUBLE_BUFFER* = "SDL_VIDEO_DOUBLE_BUFFER" 
else:
  let SDL_HINT_VIDEO_DOUBLE_BUFFER* = "SDL_VIDEO_DOUBLE_BUFFER" 
when "SDL_VIDEO_DRIVER" is static:
  const
    SDL_HINT_VIDEO_DRIVER* = "SDL_VIDEO_DRIVER" 
else:
  let SDL_HINT_VIDEO_DRIVER* = "SDL_VIDEO_DRIVER" 
when "SDL_VIDEO_DUMMY_SAVE_FRAMES" is static:
  const
    SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES* = "SDL_VIDEO_DUMMY_SAVE_FRAMES" 
else:
  let SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES* = "SDL_VIDEO_DUMMY_SAVE_FRAMES" 
when "SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK" is static:
  const
    SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK* = "SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK" 
else:
  let SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK* = "SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK" 
when "SDL_VIDEO_FORCE_EGL" is static:
  const
    SDL_HINT_VIDEO_FORCE_EGL* = "SDL_VIDEO_FORCE_EGL" 
else:
  let SDL_HINT_VIDEO_FORCE_EGL* = "SDL_VIDEO_FORCE_EGL" 
when "SDL_VIDEO_MAC_FULLSCREEN_SPACES" is static:
  const
    SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES* = "SDL_VIDEO_MAC_FULLSCREEN_SPACES" 
else:
  let SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES* = "SDL_VIDEO_MAC_FULLSCREEN_SPACES" 
when "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS" is static:
  const
    SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS* = "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS" 
else:
  let SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS* = "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS" 
when "SDL_VIDEO_OFFSCREEN_SAVE_FRAMES" is static:
  const
    SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES* = "SDL_VIDEO_OFFSCREEN_SAVE_FRAMES" 
else:
  let SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES* = "SDL_VIDEO_OFFSCREEN_SAVE_FRAMES" 
when "SDL_VIDEO_SYNC_WINDOW_OPERATIONS" is static:
  const
    SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS* = "SDL_VIDEO_SYNC_WINDOW_OPERATIONS" 
else:
  let SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS* = "SDL_VIDEO_SYNC_WINDOW_OPERATIONS" 
when "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR" is static:
  const
    SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR* = "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR" 
else:
  let SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR* = "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR" 
when "SDL_VIDEO_WAYLAND_MODE_EMULATION" is static:
  const
    SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION* = "SDL_VIDEO_WAYLAND_MODE_EMULATION" 
else:
  let SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION* = "SDL_VIDEO_WAYLAND_MODE_EMULATION" 
when "SDL_VIDEO_WAYLAND_MODE_SCALING" is static:
  const
    SDL_HINT_VIDEO_WAYLAND_MODE_SCALING* = "SDL_VIDEO_WAYLAND_MODE_SCALING" 
else:
  let SDL_HINT_VIDEO_WAYLAND_MODE_SCALING* = "SDL_VIDEO_WAYLAND_MODE_SCALING" 
when "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR" is static:
  const
    SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR* = "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR" 
else:
  let SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR* = "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR" 
when "SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY" is static:
  const
    SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY* = "SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY" 
else:
  let SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY* = "SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY" 
when "SDL_VIDEO_WIN_D3DCOMPILER" is static:
  const
    SDL_HINT_VIDEO_WIN_D3DCOMPILER* = "SDL_VIDEO_WIN_D3DCOMPILER" 
else:
  let SDL_HINT_VIDEO_WIN_D3DCOMPILER* = "SDL_VIDEO_WIN_D3DCOMPILER" 
when "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR" is static:
  const
    SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR* = "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR" 
else:
  let SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR* = "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR" 
when "SDL_VIDEO_X11_NET_WM_PING" is static:
  const
    SDL_HINT_VIDEO_X11_NET_WM_PING* = "SDL_VIDEO_X11_NET_WM_PING" 
else:
  let SDL_HINT_VIDEO_X11_NET_WM_PING* = "SDL_VIDEO_X11_NET_WM_PING" 
when "SDL_VIDEO_X11_NODIRECTCOLOR" is static:
  const
    SDL_HINT_VIDEO_X11_NODIRECTCOLOR* = "SDL_VIDEO_X11_NODIRECTCOLOR" 
else:
  let SDL_HINT_VIDEO_X11_NODIRECTCOLOR* = "SDL_VIDEO_X11_NODIRECTCOLOR" 
when "SDL_VIDEO_X11_SCALING_FACTOR" is static:
  const
    SDL_HINT_VIDEO_X11_SCALING_FACTOR* = "SDL_VIDEO_X11_SCALING_FACTOR" 
else:
  let SDL_HINT_VIDEO_X11_SCALING_FACTOR* = "SDL_VIDEO_X11_SCALING_FACTOR" 
when "SDL_VIDEO_X11_VISUALID" is static:
  const
    SDL_HINT_VIDEO_X11_VISUALID* = "SDL_VIDEO_X11_VISUALID" 
else:
  let SDL_HINT_VIDEO_X11_VISUALID* = "SDL_VIDEO_X11_VISUALID" 
when "SDL_VIDEO_X11_WINDOW_VISUALID" is static:
  const
    SDL_HINT_VIDEO_X11_WINDOW_VISUALID* = "SDL_VIDEO_X11_WINDOW_VISUALID" 
else:
  let SDL_HINT_VIDEO_X11_WINDOW_VISUALID* = "SDL_VIDEO_X11_WINDOW_VISUALID" 
when "SDL_VIDEO_X11_XRANDR" is static:
  const
    SDL_HINT_VIDEO_X11_XRANDR* = "SDL_VIDEO_X11_XRANDR" 
else:
  let SDL_HINT_VIDEO_X11_XRANDR* = "SDL_VIDEO_X11_XRANDR" 
when "SDL_VITA_ENABLE_BACK_TOUCH" is static:
  const
    SDL_HINT_VITA_ENABLE_BACK_TOUCH* = "SDL_VITA_ENABLE_BACK_TOUCH" 
else:
  let SDL_HINT_VITA_ENABLE_BACK_TOUCH* = "SDL_VITA_ENABLE_BACK_TOUCH" 
when "SDL_VITA_ENABLE_FRONT_TOUCH" is static:
  const
    SDL_HINT_VITA_ENABLE_FRONT_TOUCH* = "SDL_VITA_ENABLE_FRONT_TOUCH" 
else:
  let SDL_HINT_VITA_ENABLE_FRONT_TOUCH* = "SDL_VITA_ENABLE_FRONT_TOUCH" 
when "SDL_VITA_MODULE_PATH" is static:
  const
    SDL_HINT_VITA_MODULE_PATH* = "SDL_VITA_MODULE_PATH" 
else:
  let SDL_HINT_VITA_MODULE_PATH* = "SDL_VITA_MODULE_PATH" 
when "SDL_VITA_PVR_INIT" is static:
  const
    SDL_HINT_VITA_PVR_INIT* = "SDL_VITA_PVR_INIT" 
else:
  let SDL_HINT_VITA_PVR_INIT* = "SDL_VITA_PVR_INIT" 
when "SDL_VITA_RESOLUTION" is static:
  const
    SDL_HINT_VITA_RESOLUTION* = "SDL_VITA_RESOLUTION" 
else:
  let SDL_HINT_VITA_RESOLUTION* = "SDL_VITA_RESOLUTION" 
when "SDL_VITA_PVR_OPENGL" is static:
  const
    SDL_HINT_VITA_PVR_OPENGL* = "SDL_VITA_PVR_OPENGL" 
else:
  let SDL_HINT_VITA_PVR_OPENGL* = "SDL_VITA_PVR_OPENGL" 
when "SDL_VITA_TOUCH_MOUSE_DEVICE" is static:
  const
    SDL_HINT_VITA_TOUCH_MOUSE_DEVICE* = "SDL_VITA_TOUCH_MOUSE_DEVICE" 
else:
  let SDL_HINT_VITA_TOUCH_MOUSE_DEVICE* = "SDL_VITA_TOUCH_MOUSE_DEVICE" 
when "SDL_VULKAN_DISPLAY" is static:
  const
    SDL_HINT_VULKAN_DISPLAY* = "SDL_VULKAN_DISPLAY" 
else:
  let SDL_HINT_VULKAN_DISPLAY* = "SDL_VULKAN_DISPLAY" 
when "SDL_VULKAN_LIBRARY" is static:
  const
    SDL_HINT_VULKAN_LIBRARY* = "SDL_VULKAN_LIBRARY" 
else:
  let SDL_HINT_VULKAN_LIBRARY* = "SDL_VULKAN_LIBRARY" 
when "SDL_WAVE_FACT_CHUNK" is static:
  const
    SDL_HINT_WAVE_FACT_CHUNK* = "SDL_WAVE_FACT_CHUNK" 
else:
  let SDL_HINT_WAVE_FACT_CHUNK* = "SDL_WAVE_FACT_CHUNK" 
when "SDL_WAVE_CHUNK_LIMIT" is static:
  const
    SDL_HINT_WAVE_CHUNK_LIMIT* = "SDL_WAVE_CHUNK_LIMIT" 
else:
  let SDL_HINT_WAVE_CHUNK_LIMIT* = "SDL_WAVE_CHUNK_LIMIT" 
when "SDL_WAVE_RIFF_CHUNK_SIZE" is static:
  const
    SDL_HINT_WAVE_RIFF_CHUNK_SIZE* = "SDL_WAVE_RIFF_CHUNK_SIZE" 
else:
  let SDL_HINT_WAVE_RIFF_CHUNK_SIZE* = "SDL_WAVE_RIFF_CHUNK_SIZE" 
when "SDL_WAVE_TRUNCATION" is static:
  const
    SDL_HINT_WAVE_TRUNCATION* = "SDL_WAVE_TRUNCATION" 
else:
  let SDL_HINT_WAVE_TRUNCATION* = "SDL_WAVE_TRUNCATION" 
when "SDL_WINDOW_ACTIVATE_WHEN_RAISED" is static:
  const
    SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED* = "SDL_WINDOW_ACTIVATE_WHEN_RAISED" 
else:
  let SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED* = "SDL_WINDOW_ACTIVATE_WHEN_RAISED" 
when "SDL_WINDOW_ACTIVATE_WHEN_SHOWN" is static:
  const
    SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN* = "SDL_WINDOW_ACTIVATE_WHEN_SHOWN" 
else:
  let SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN* = "SDL_WINDOW_ACTIVATE_WHEN_SHOWN" 
when "SDL_WINDOW_ALLOW_TOPMOST" is static:
  const
    SDL_HINT_WINDOW_ALLOW_TOPMOST* = "SDL_WINDOW_ALLOW_TOPMOST" 
else:
  let SDL_HINT_WINDOW_ALLOW_TOPMOST* = "SDL_WINDOW_ALLOW_TOPMOST" 
when "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN" is static:
  const
    SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN* = "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN" 
else:
  let SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN* = "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN" 
when "SDL_WINDOWS_CLOSE_ON_ALT_F4" is static:
  const
    SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4* = "SDL_WINDOWS_CLOSE_ON_ALT_F4" 
else:
  let SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4* = "SDL_WINDOWS_CLOSE_ON_ALT_F4" 
when "SDL_WINDOWS_ENABLE_MENU_MNEMONICS" is static:
  const
    SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS* = "SDL_WINDOWS_ENABLE_MENU_MNEMONICS" 
else:
  let SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS* = "SDL_WINDOWS_ENABLE_MENU_MNEMONICS" 
when "SDL_WINDOWS_ENABLE_MESSAGELOOP" is static:
  const
    SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP* = "SDL_WINDOWS_ENABLE_MESSAGELOOP" 
else:
  let SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP* = "SDL_WINDOWS_ENABLE_MESSAGELOOP" 
when "SDL_WINDOWS_GAMEINPUT" is static:
  const
    SDL_HINT_WINDOWS_GAMEINPUT* = "SDL_WINDOWS_GAMEINPUT" 
else:
  let SDL_HINT_WINDOWS_GAMEINPUT* = "SDL_WINDOWS_GAMEINPUT" 
when "SDL_WINDOWS_RAW_KEYBOARD" is static:
  const
    SDL_HINT_WINDOWS_RAW_KEYBOARD* = "SDL_WINDOWS_RAW_KEYBOARD" 
else:
  let SDL_HINT_WINDOWS_RAW_KEYBOARD* = "SDL_WINDOWS_RAW_KEYBOARD" 
when "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL" is static:
  const
    SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL* = "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL" 
else:
  let SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL* = "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL" 
when "SDL_WINDOWS_INTRESOURCE_ICON" is static:
  const
    SDL_HINT_WINDOWS_INTRESOURCE_ICON* = "SDL_WINDOWS_INTRESOURCE_ICON" 
else:
  let SDL_HINT_WINDOWS_INTRESOURCE_ICON* = "SDL_WINDOWS_INTRESOURCE_ICON" 
when "SDL_WINDOWS_INTRESOURCE_ICON_SMALL" is static:
  const
    SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL* = "SDL_WINDOWS_INTRESOURCE_ICON_SMALL" 
else:
  let SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL* = "SDL_WINDOWS_INTRESOURCE_ICON_SMALL" 
when "SDL_WINDOWS_USE_D3D9EX" is static:
  const
    SDL_HINT_WINDOWS_USE_D3D9EX* = "SDL_WINDOWS_USE_D3D9EX" 
else:
  let SDL_HINT_WINDOWS_USE_D3D9EX* = "SDL_WINDOWS_USE_D3D9EX" 
when "SDL_WINDOWS_ERASE_BACKGROUND_MODE" is static:
  const
    SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE* = "SDL_WINDOWS_ERASE_BACKGROUND_MODE" 
else:
  let SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE* = "SDL_WINDOWS_ERASE_BACKGROUND_MODE" 
when "SDL_X11_FORCE_OVERRIDE_REDIRECT" is static:
  const
    SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT* = "SDL_X11_FORCE_OVERRIDE_REDIRECT" 
else:
  let SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT* = "SDL_X11_FORCE_OVERRIDE_REDIRECT" 
when "SDL_X11_WINDOW_TYPE" is static:
  const
    SDL_HINT_X11_WINDOW_TYPE* = "SDL_X11_WINDOW_TYPE" 
else:
  let SDL_HINT_X11_WINDOW_TYPE* = "SDL_X11_WINDOW_TYPE" 
when "SDL_X11_XCB_LIBRARY" is static:
  const
    SDL_HINT_X11_XCB_LIBRARY* = "SDL_X11_XCB_LIBRARY" 
else:
  let SDL_HINT_X11_XCB_LIBRARY* = "SDL_X11_XCB_LIBRARY" 
when "SDL_XINPUT_ENABLED" is static:
  const
    SDL_HINT_XINPUT_ENABLED* = "SDL_XINPUT_ENABLED" 
else:
  let SDL_HINT_XINPUT_ENABLED* = "SDL_XINPUT_ENABLED" 
when "SDL_ASSERT" is static:
  const
    SDL_HINT_ASSERT* = "SDL_ASSERT" 
else:
  let SDL_HINT_ASSERT* = "SDL_ASSERT" 
when cast[cuint](16'i64) is static:
  const
    SDL_INIT_AUDIO* = cast[cuint](16'i64) 
else:
  let SDL_INIT_AUDIO* = cast[cuint](16'i64) 
when cast[cuint](32'i64) is static:
  const
    SDL_INIT_VIDEO* = cast[cuint](32'i64) 
else:
  let SDL_INIT_VIDEO* = cast[cuint](32'i64) 
when cast[cuint](512'i64) is static:
  const
    SDL_INIT_JOYSTICK* = cast[cuint](512'i64) 
else:
  let SDL_INIT_JOYSTICK* = cast[cuint](512'i64) 
when cast[cuint](4096'i64) is static:
  const
    SDL_INIT_HAPTIC* = cast[cuint](4096'i64) 
else:
  let SDL_INIT_HAPTIC* = cast[cuint](4096'i64) 
when cast[cuint](8192'i64) is static:
  const
    SDL_INIT_GAMEPAD* = cast[cuint](8192'i64) 
else:
  let SDL_INIT_GAMEPAD* = cast[cuint](8192'i64) 
when cast[cuint](16384'i64) is static:
  const
    SDL_INIT_EVENTS* = cast[cuint](16384'i64) 
else:
  let SDL_INIT_EVENTS* = cast[cuint](16384'i64) 
when cast[cuint](32768'i64) is static:
  const
    SDL_INIT_SENSOR* = cast[cuint](32768'i64) 
else:
  let SDL_INIT_SENSOR* = cast[cuint](32768'i64) 
when cast[cuint](65536'i64) is static:
  const
    SDL_INIT_CAMERA* = cast[cuint](65536'i64) 
else:
  let SDL_INIT_CAMERA* = cast[cuint](65536'i64) 
when "SDL.app.metadata.name" is static:
  const
    SDL_PROP_APP_METADATA_NAME_STRING* = "SDL.app.metadata.name" 
else:
  let SDL_PROP_APP_METADATA_NAME_STRING* = "SDL.app.metadata.name" 
when "SDL.app.metadata.version" is static:
  const
    SDL_PROP_APP_METADATA_VERSION_STRING* = "SDL.app.metadata.version" 
else:
  let SDL_PROP_APP_METADATA_VERSION_STRING* = "SDL.app.metadata.version" 
when "SDL.app.metadata.identifier" is static:
  const
    SDL_PROP_APP_METADATA_IDENTIFIER_STRING* = "SDL.app.metadata.identifier" 
else:
  let SDL_PROP_APP_METADATA_IDENTIFIER_STRING* = "SDL.app.metadata.identifier" 
when "SDL.app.metadata.creator" is static:
  const
    SDL_PROP_APP_METADATA_CREATOR_STRING* = "SDL.app.metadata.creator" 
else:
  let SDL_PROP_APP_METADATA_CREATOR_STRING* = "SDL.app.metadata.creator" 
when "SDL.app.metadata.copyright" is static:
  const
    SDL_PROP_APP_METADATA_COPYRIGHT_STRING* = "SDL.app.metadata.copyright" 
else:
  let SDL_PROP_APP_METADATA_COPYRIGHT_STRING* = "SDL.app.metadata.copyright" 
when "SDL.app.metadata.url" is static:
  const
    SDL_PROP_APP_METADATA_URL_STRING* = "SDL.app.metadata.url" 
else:
  let SDL_PROP_APP_METADATA_URL_STRING* = "SDL.app.metadata.url" 
when "SDL.app.metadata.type" is static:
  const
    SDL_PROP_APP_METADATA_TYPE_STRING* = "SDL.app.metadata.type" 
else:
  let SDL_PROP_APP_METADATA_TYPE_STRING* = "SDL.app.metadata.type" 
when cast[cuint](16'i64) is static:
  const
    SDL_MESSAGEBOX_ERROR* = cast[cuint](16'i64) 
else:
  let SDL_MESSAGEBOX_ERROR* = cast[cuint](16'i64) 
when cast[cuint](32'i64) is static:
  const
    SDL_MESSAGEBOX_WARNING* = cast[cuint](32'i64) 
else:
  let SDL_MESSAGEBOX_WARNING* = cast[cuint](32'i64) 
when cast[cuint](64'i64) is static:
  const
    SDL_MESSAGEBOX_INFORMATION* = cast[cuint](64'i64) 
else:
  let SDL_MESSAGEBOX_INFORMATION* = cast[cuint](64'i64) 
when cast[cuint](128'i64) is static:
  const
    SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT* = cast[cuint](128'i64) 
else:
  let SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT* = cast[cuint](128'i64) 
when cast[cuint](256'i64) is static:
  const
    SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT* = cast[cuint](256'i64) 
else:
  let SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT* = cast[cuint](256'i64) 
when cast[cuint](1'i64) is static:
  const
    SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT* = cast[cuint](1'i64) 
else:
  let SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT* = cast[cuint](1'i64) 
when cast[cuint](2'i64) is static:
  const
    SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT* = cast[cuint](2'i64) 
else:
  let SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT* = cast[cuint](2'i64) 
when "SDL.process.create.args" is static:
  const
    SDL_PROP_PROCESS_CREATE_ARGS_POINTER* = "SDL.process.create.args" 
else:
  let SDL_PROP_PROCESS_CREATE_ARGS_POINTER* = "SDL.process.create.args" 
when "SDL.process.create.environment" is static:
  const
    SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER* = "SDL.process.create.environment" 
else:
  let SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER* = "SDL.process.create.environment" 
when "SDL.process.create.stdin_option" is static:
  const
    SDL_PROP_PROCESS_CREATE_STDIN_NUMBER* = "SDL.process.create.stdin_option" 
else:
  let SDL_PROP_PROCESS_CREATE_STDIN_NUMBER* = "SDL.process.create.stdin_option" 
when "SDL.process.create.stdin_source" is static:
  const
    SDL_PROP_PROCESS_CREATE_STDIN_POINTER* = "SDL.process.create.stdin_source" 
else:
  let SDL_PROP_PROCESS_CREATE_STDIN_POINTER* = "SDL.process.create.stdin_source" 
when "SDL.process.create.stdout_option" is static:
  const
    SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER* = "SDL.process.create.stdout_option" 
else:
  let SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER* = "SDL.process.create.stdout_option" 
when "SDL.process.create.stdout_source" is static:
  const
    SDL_PROP_PROCESS_CREATE_STDOUT_POINTER* = "SDL.process.create.stdout_source" 
else:
  let SDL_PROP_PROCESS_CREATE_STDOUT_POINTER* = "SDL.process.create.stdout_source" 
when "SDL.process.create.stderr_option" is static:
  const
    SDL_PROP_PROCESS_CREATE_STDERR_NUMBER* = "SDL.process.create.stderr_option" 
else:
  let SDL_PROP_PROCESS_CREATE_STDERR_NUMBER* = "SDL.process.create.stderr_option" 
when "SDL.process.create.stderr_source" is static:
  const
    SDL_PROP_PROCESS_CREATE_STDERR_POINTER* = "SDL.process.create.stderr_source" 
else:
  let SDL_PROP_PROCESS_CREATE_STDERR_POINTER* = "SDL.process.create.stderr_source" 
when "SDL.process.create.stderr_to_stdout" is static:
  const
    SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN* = "SDL.process.create.stderr_to_stdout" 
else:
  let SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN* = "SDL.process.create.stderr_to_stdout" 
when "SDL.process.create.background" is static:
  const
    SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN* = "SDL.process.create.background" 
else:
  let SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN* = "SDL.process.create.background" 
when "SDL.process.pid" is static:
  const
    SDL_PROP_PROCESS_PID_NUMBER* = "SDL.process.pid" 
else:
  let SDL_PROP_PROCESS_PID_NUMBER* = "SDL.process.pid" 
when "SDL.process.stdin" is static:
  const
    SDL_PROP_PROCESS_STDIN_POINTER* = "SDL.process.stdin" 
else:
  let SDL_PROP_PROCESS_STDIN_POINTER* = "SDL.process.stdin" 
when "SDL.process.stdout" is static:
  const
    SDL_PROP_PROCESS_STDOUT_POINTER* = "SDL.process.stdout" 
else:
  let SDL_PROP_PROCESS_STDOUT_POINTER* = "SDL.process.stdout" 
when "SDL.process.stderr" is static:
  const
    SDL_PROP_PROCESS_STDERR_POINTER* = "SDL.process.stderr" 
else:
  let SDL_PROP_PROCESS_STDERR_POINTER* = "SDL.process.stderr" 
when "SDL.process.background" is static:
  const
    SDL_PROP_PROCESS_BACKGROUND_BOOLEAN* = "SDL.process.background" 
else:
  let SDL_PROP_PROCESS_BACKGROUND_BOOLEAN* = "SDL.process.background" 
when "software" is static:
  const
    SDL_SOFTWARE_RENDERER* = "software" 
else:
  let SDL_SOFTWARE_RENDERER* = "software" 
when "SDL.renderer.create.name" is static:
  const
    SDL_PROP_RENDERER_CREATE_NAME_STRING* = "SDL.renderer.create.name" 
else:
  let SDL_PROP_RENDERER_CREATE_NAME_STRING* = "SDL.renderer.create.name" 
when "SDL.renderer.create.window" is static:
  const
    SDL_PROP_RENDERER_CREATE_WINDOW_POINTER* = "SDL.renderer.create.window" 
else:
  let SDL_PROP_RENDERER_CREATE_WINDOW_POINTER* = "SDL.renderer.create.window" 
when "SDL.renderer.create.surface" is static:
  const
    SDL_PROP_RENDERER_CREATE_SURFACE_POINTER* = "SDL.renderer.create.surface" 
else:
  let SDL_PROP_RENDERER_CREATE_SURFACE_POINTER* = "SDL.renderer.create.surface" 
when "SDL.renderer.create.output_colorspace" is static:
  const
    SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER* = "SDL.renderer.create.output_colorspace" 
else:
  let SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER* = "SDL.renderer.create.output_colorspace" 
when "SDL.renderer.create.present_vsync" is static:
  const
    SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER* = "SDL.renderer.create.present_vsync" 
else:
  let SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER* = "SDL.renderer.create.present_vsync" 
when "SDL.renderer.create.vulkan.instance" is static:
  const
    SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER* = "SDL.renderer.create.vulkan.instance" 
else:
  let SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER* = "SDL.renderer.create.vulkan.instance" 
when "SDL.renderer.create.vulkan.surface" is static:
  const
    SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER* = "SDL.renderer.create.vulkan.surface" 
else:
  let SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER* = "SDL.renderer.create.vulkan.surface" 
when "SDL.renderer.create.vulkan.physical_device" is static:
  const
    SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER* = "SDL.renderer.create.vulkan.physical_device" 
else:
  let SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER* = "SDL.renderer.create.vulkan.physical_device" 
when "SDL.renderer.create.vulkan.device" is static:
  const
    SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER* = "SDL.renderer.create.vulkan.device" 
else:
  let SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER* = "SDL.renderer.create.vulkan.device" 
when "SDL.renderer.create.vulkan.graphics_queue_family_index" is static:
  const
    SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER* = "SDL.renderer.create.vulkan.graphics_queue_family_index" 
else:
  let SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER* = "SDL.renderer.create.vulkan.graphics_queue_family_index" 
when "SDL.renderer.create.vulkan.present_queue_family_index" is static:
  const
    SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER* = "SDL.renderer.create.vulkan.present_queue_family_index" 
else:
  let SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER* = "SDL.renderer.create.vulkan.present_queue_family_index" 
when "SDL.renderer.name" is static:
  const
    SDL_PROP_RENDERER_NAME_STRING* = "SDL.renderer.name" 
else:
  let SDL_PROP_RENDERER_NAME_STRING* = "SDL.renderer.name" 
when "SDL.renderer.window" is static:
  const
    SDL_PROP_RENDERER_WINDOW_POINTER* = "SDL.renderer.window" 
else:
  let SDL_PROP_RENDERER_WINDOW_POINTER* = "SDL.renderer.window" 
when "SDL.renderer.surface" is static:
  const
    SDL_PROP_RENDERER_SURFACE_POINTER* = "SDL.renderer.surface" 
else:
  let SDL_PROP_RENDERER_SURFACE_POINTER* = "SDL.renderer.surface" 
when "SDL.renderer.vsync" is static:
  const
    SDL_PROP_RENDERER_VSYNC_NUMBER* = "SDL.renderer.vsync" 
else:
  let SDL_PROP_RENDERER_VSYNC_NUMBER* = "SDL.renderer.vsync" 
when "SDL.renderer.max_texture_size" is static:
  const
    SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER* = "SDL.renderer.max_texture_size" 
else:
  let SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER* = "SDL.renderer.max_texture_size" 
when "SDL.renderer.texture_formats" is static:
  const
    SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER* = "SDL.renderer.texture_formats" 
else:
  let SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER* = "SDL.renderer.texture_formats" 
when "SDL.renderer.output_colorspace" is static:
  const
    SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER* = "SDL.renderer.output_colorspace" 
else:
  let SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER* = "SDL.renderer.output_colorspace" 
when "SDL.renderer.HDR_enabled" is static:
  const
    SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN* = "SDL.renderer.HDR_enabled" 
else:
  let SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN* = "SDL.renderer.HDR_enabled" 
when "SDL.renderer.SDR_white_point" is static:
  const
    SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT* = "SDL.renderer.SDR_white_point" 
else:
  let SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT* = "SDL.renderer.SDR_white_point" 
when "SDL.renderer.HDR_headroom" is static:
  const
    SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT* = "SDL.renderer.HDR_headroom" 
else:
  let SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT* = "SDL.renderer.HDR_headroom" 
when "SDL.renderer.d3d9.device" is static:
  const
    SDL_PROP_RENDERER_D3D9_DEVICE_POINTER* = "SDL.renderer.d3d9.device" 
else:
  let SDL_PROP_RENDERER_D3D9_DEVICE_POINTER* = "SDL.renderer.d3d9.device" 
when "SDL.renderer.d3d11.device" is static:
  const
    SDL_PROP_RENDERER_D3D11_DEVICE_POINTER* = "SDL.renderer.d3d11.device" 
else:
  let SDL_PROP_RENDERER_D3D11_DEVICE_POINTER* = "SDL.renderer.d3d11.device" 
when "SDL.renderer.d3d11.swap_chain" is static:
  const
    SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER* = "SDL.renderer.d3d11.swap_chain" 
else:
  let SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER* = "SDL.renderer.d3d11.swap_chain" 
when "SDL.renderer.d3d12.device" is static:
  const
    SDL_PROP_RENDERER_D3D12_DEVICE_POINTER* = "SDL.renderer.d3d12.device" 
else:
  let SDL_PROP_RENDERER_D3D12_DEVICE_POINTER* = "SDL.renderer.d3d12.device" 
when "SDL.renderer.d3d12.swap_chain" is static:
  const
    SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER* = "SDL.renderer.d3d12.swap_chain" 
else:
  let SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER* = "SDL.renderer.d3d12.swap_chain" 
when "SDL.renderer.d3d12.command_queue" is static:
  const
    SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER* = "SDL.renderer.d3d12.command_queue" 
else:
  let SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER* = "SDL.renderer.d3d12.command_queue" 
when "SDL.renderer.vulkan.instance" is static:
  const
    SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER* = "SDL.renderer.vulkan.instance" 
else:
  let SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER* = "SDL.renderer.vulkan.instance" 
when "SDL.renderer.vulkan.surface" is static:
  const
    SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER* = "SDL.renderer.vulkan.surface" 
else:
  let SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER* = "SDL.renderer.vulkan.surface" 
when "SDL.renderer.vulkan.physical_device" is static:
  const
    SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER* = "SDL.renderer.vulkan.physical_device" 
else:
  let SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER* = "SDL.renderer.vulkan.physical_device" 
when "SDL.renderer.vulkan.device" is static:
  const
    SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER* = "SDL.renderer.vulkan.device" 
else:
  let SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER* = "SDL.renderer.vulkan.device" 
when "SDL.renderer.vulkan.graphics_queue_family_index" is static:
  const
    SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER* = "SDL.renderer.vulkan.graphics_queue_family_index" 
else:
  let SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER* = "SDL.renderer.vulkan.graphics_queue_family_index" 
when "SDL.renderer.vulkan.present_queue_family_index" is static:
  const
    SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER* = "SDL.renderer.vulkan.present_queue_family_index" 
else:
  let SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER* = "SDL.renderer.vulkan.present_queue_family_index" 
when "SDL.renderer.vulkan.swapchain_image_count" is static:
  const
    SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER* = "SDL.renderer.vulkan.swapchain_image_count" 
else:
  let SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER* = "SDL.renderer.vulkan.swapchain_image_count" 
when "SDL.texture.create.colorspace" is static:
  const
    SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER* = "SDL.texture.create.colorspace" 
else:
  let SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER* = "SDL.texture.create.colorspace" 
when "SDL.texture.create.format" is static:
  const
    SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER* = "SDL.texture.create.format" 
else:
  let SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER* = "SDL.texture.create.format" 
when "SDL.texture.create.access" is static:
  const
    SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER* = "SDL.texture.create.access" 
else:
  let SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER* = "SDL.texture.create.access" 
when "SDL.texture.create.width" is static:
  const
    SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER* = "SDL.texture.create.width" 
else:
  let SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER* = "SDL.texture.create.width" 
when "SDL.texture.create.height" is static:
  const
    SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER* = "SDL.texture.create.height" 
else:
  let SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER* = "SDL.texture.create.height" 
when "SDL.texture.create.SDR_white_point" is static:
  const
    SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT* = "SDL.texture.create.SDR_white_point" 
else:
  let SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT* = "SDL.texture.create.SDR_white_point" 
when "SDL.texture.create.HDR_headroom" is static:
  const
    SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT* = "SDL.texture.create.HDR_headroom" 
else:
  let SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT* = "SDL.texture.create.HDR_headroom" 
when "SDL.texture.create.d3d11.texture" is static:
  const
    SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER* = "SDL.texture.create.d3d11.texture" 
else:
  let SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER* = "SDL.texture.create.d3d11.texture" 
when "SDL.texture.create.d3d11.texture_u" is static:
  const
    SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER* = "SDL.texture.create.d3d11.texture_u" 
else:
  let SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER* = "SDL.texture.create.d3d11.texture_u" 
when "SDL.texture.create.d3d11.texture_v" is static:
  const
    SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER* = "SDL.texture.create.d3d11.texture_v" 
else:
  let SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER* = "SDL.texture.create.d3d11.texture_v" 
when "SDL.texture.create.d3d12.texture" is static:
  const
    SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER* = "SDL.texture.create.d3d12.texture" 
else:
  let SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER* = "SDL.texture.create.d3d12.texture" 
when "SDL.texture.create.d3d12.texture_u" is static:
  const
    SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER* = "SDL.texture.create.d3d12.texture_u" 
else:
  let SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER* = "SDL.texture.create.d3d12.texture_u" 
when "SDL.texture.create.d3d12.texture_v" is static:
  const
    SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER* = "SDL.texture.create.d3d12.texture_v" 
else:
  let SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER* = "SDL.texture.create.d3d12.texture_v" 
when "SDL.texture.create.metal.pixelbuffer" is static:
  const
    SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER* = "SDL.texture.create.metal.pixelbuffer" 
else:
  let SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER* = "SDL.texture.create.metal.pixelbuffer" 
when "SDL.texture.create.opengl.texture" is static:
  const
    SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER* = "SDL.texture.create.opengl.texture" 
else:
  let SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER* = "SDL.texture.create.opengl.texture" 
when "SDL.texture.create.opengl.texture_uv" is static:
  const
    SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER* = "SDL.texture.create.opengl.texture_uv" 
else:
  let SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER* = "SDL.texture.create.opengl.texture_uv" 
when "SDL.texture.create.opengl.texture_u" is static:
  const
    SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER* = "SDL.texture.create.opengl.texture_u" 
else:
  let SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER* = "SDL.texture.create.opengl.texture_u" 
when "SDL.texture.create.opengl.texture_v" is static:
  const
    SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER* = "SDL.texture.create.opengl.texture_v" 
else:
  let SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER* = "SDL.texture.create.opengl.texture_v" 
when "SDL.texture.create.opengles2.texture" is static:
  const
    SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER* = "SDL.texture.create.opengles2.texture" 
else:
  let SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER* = "SDL.texture.create.opengles2.texture" 
when "SDL.texture.create.opengles2.texture_uv" is static:
  const
    SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER* = "SDL.texture.create.opengles2.texture_uv" 
else:
  let SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER* = "SDL.texture.create.opengles2.texture_uv" 
when "SDL.texture.create.opengles2.texture_u" is static:
  const
    SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER* = "SDL.texture.create.opengles2.texture_u" 
else:
  let SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER* = "SDL.texture.create.opengles2.texture_u" 
when "SDL.texture.create.opengles2.texture_v" is static:
  const
    SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER* = "SDL.texture.create.opengles2.texture_v" 
else:
  let SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER* = "SDL.texture.create.opengles2.texture_v" 
when "SDL.texture.create.vulkan.texture" is static:
  const
    SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER* = "SDL.texture.create.vulkan.texture" 
else:
  let SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER* = "SDL.texture.create.vulkan.texture" 
when "SDL.texture.colorspace" is static:
  const
    SDL_PROP_TEXTURE_COLORSPACE_NUMBER* = "SDL.texture.colorspace" 
else:
  let SDL_PROP_TEXTURE_COLORSPACE_NUMBER* = "SDL.texture.colorspace" 
when "SDL.texture.format" is static:
  const
    SDL_PROP_TEXTURE_FORMAT_NUMBER* = "SDL.texture.format" 
else:
  let SDL_PROP_TEXTURE_FORMAT_NUMBER* = "SDL.texture.format" 
when "SDL.texture.access" is static:
  const
    SDL_PROP_TEXTURE_ACCESS_NUMBER* = "SDL.texture.access" 
else:
  let SDL_PROP_TEXTURE_ACCESS_NUMBER* = "SDL.texture.access" 
when "SDL.texture.width" is static:
  const
    SDL_PROP_TEXTURE_WIDTH_NUMBER* = "SDL.texture.width" 
else:
  let SDL_PROP_TEXTURE_WIDTH_NUMBER* = "SDL.texture.width" 
when "SDL.texture.height" is static:
  const
    SDL_PROP_TEXTURE_HEIGHT_NUMBER* = "SDL.texture.height" 
else:
  let SDL_PROP_TEXTURE_HEIGHT_NUMBER* = "SDL.texture.height" 
when "SDL.texture.SDR_white_point" is static:
  const
    SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT* = "SDL.texture.SDR_white_point" 
else:
  let SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT* = "SDL.texture.SDR_white_point" 
when "SDL.texture.HDR_headroom" is static:
  const
    SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT* = "SDL.texture.HDR_headroom" 
else:
  let SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT* = "SDL.texture.HDR_headroom" 
when "SDL.texture.d3d11.texture" is static:
  const
    SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER* = "SDL.texture.d3d11.texture" 
else:
  let SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER* = "SDL.texture.d3d11.texture" 
when "SDL.texture.d3d11.texture_u" is static:
  const
    SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER* = "SDL.texture.d3d11.texture_u" 
else:
  let SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER* = "SDL.texture.d3d11.texture_u" 
when "SDL.texture.d3d11.texture_v" is static:
  const
    SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER* = "SDL.texture.d3d11.texture_v" 
else:
  let SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER* = "SDL.texture.d3d11.texture_v" 
when "SDL.texture.d3d12.texture" is static:
  const
    SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER* = "SDL.texture.d3d12.texture" 
else:
  let SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER* = "SDL.texture.d3d12.texture" 
when "SDL.texture.d3d12.texture_u" is static:
  const
    SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER* = "SDL.texture.d3d12.texture_u" 
else:
  let SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER* = "SDL.texture.d3d12.texture_u" 
when "SDL.texture.d3d12.texture_v" is static:
  const
    SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER* = "SDL.texture.d3d12.texture_v" 
else:
  let SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER* = "SDL.texture.d3d12.texture_v" 
when "SDL.texture.opengl.texture" is static:
  const
    SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER* = "SDL.texture.opengl.texture" 
else:
  let SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER* = "SDL.texture.opengl.texture" 
when "SDL.texture.opengl.texture_uv" is static:
  const
    SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER* = "SDL.texture.opengl.texture_uv" 
else:
  let SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER* = "SDL.texture.opengl.texture_uv" 
when "SDL.texture.opengl.texture_u" is static:
  const
    SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER* = "SDL.texture.opengl.texture_u" 
else:
  let SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER* = "SDL.texture.opengl.texture_u" 
when "SDL.texture.opengl.texture_v" is static:
  const
    SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER* = "SDL.texture.opengl.texture_v" 
else:
  let SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER* = "SDL.texture.opengl.texture_v" 
when "SDL.texture.opengl.target" is static:
  const
    SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER* = "SDL.texture.opengl.target" 
else:
  let SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER* = "SDL.texture.opengl.target" 
when "SDL.texture.opengl.tex_w" is static:
  const
    SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT* = "SDL.texture.opengl.tex_w" 
else:
  let SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT* = "SDL.texture.opengl.tex_w" 
when "SDL.texture.opengl.tex_h" is static:
  const
    SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT* = "SDL.texture.opengl.tex_h" 
else:
  let SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT* = "SDL.texture.opengl.tex_h" 
when "SDL.texture.opengles2.texture" is static:
  const
    SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER* = "SDL.texture.opengles2.texture" 
else:
  let SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER* = "SDL.texture.opengles2.texture" 
when "SDL.texture.opengles2.texture_uv" is static:
  const
    SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER* = "SDL.texture.opengles2.texture_uv" 
else:
  let SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER* = "SDL.texture.opengles2.texture_uv" 
when "SDL.texture.opengles2.texture_u" is static:
  const
    SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER* = "SDL.texture.opengles2.texture_u" 
else:
  let SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER* = "SDL.texture.opengles2.texture_u" 
when "SDL.texture.opengles2.texture_v" is static:
  const
    SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER* = "SDL.texture.opengles2.texture_v" 
else:
  let SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER* = "SDL.texture.opengles2.texture_v" 
when "SDL.texture.opengles2.target" is static:
  const
    SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER* = "SDL.texture.opengles2.target" 
else:
  let SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER* = "SDL.texture.opengles2.target" 
when "SDL.texture.vulkan.texture" is static:
  const
    SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER* = "SDL.texture.vulkan.texture" 
else:
  let SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER* = "SDL.texture.vulkan.texture" 
when 0 is static:
  const
    SDL_RENDERER_VSYNC_DISABLED* = 0 
else:
  let SDL_RENDERER_VSYNC_DISABLED* = 0 
when -1 is static:
  const
    SDL_RENDERER_VSYNC_ADAPTIVE* = -1 
else:
  let SDL_RENDERER_VSYNC_ADAPTIVE* = -1 
when 8 is static:
  const
    SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE* = 8 
else:
  let SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE* = 8 
when 1000 is static:
  const
    SDL_MS_PER_SECOND* = 1000 
else:
  let SDL_MS_PER_SECOND* = 1000 
when 1000000 is static:
  const
    SDL_US_PER_SECOND* = 1000000 
else:
  let SDL_US_PER_SECOND* = 1000000 
when cast[clonglong](1000000000'i64) is static:
  const
    SDL_NS_PER_SECOND* = cast[clonglong](1000000000'i64) 
else:
  let SDL_NS_PER_SECOND* = cast[clonglong](1000000000'i64) 
when 1000000 is static:
  const
    SDL_NS_PER_MS* = 1000000 
else:
  let SDL_NS_PER_MS* = 1000000 
when 1000 is static:
  const
    SDL_NS_PER_US* = 1000    
else:
  let SDL_NS_PER_US* = 1000  
when 3 is static:
  const
    SDL_MAJOR_VERSION* = 3   
else:
  let SDL_MAJOR_VERSION* = 3 
when 1 is static:
  const
    SDL_MINOR_VERSION* = 1   
else:
  let SDL_MINOR_VERSION* = 1 
when 6 is static:
  const
    SDL_MICRO_VERSION* = 6   
else:
  let SDL_MICRO_VERSION* = 6 
when SDL_AtomicAdd_renamed_SDL_AddAtomicInt is typedesc:
  type
    SDL_AtomicAdd* = SDL_AtomicAdd_renamed_SDL_AddAtomicInt 
else:
  when SDL_AtomicAdd_renamed_SDL_AddAtomicInt is static:
    const
      SDL_AtomicAdd* = SDL_AtomicAdd_renamed_SDL_AddAtomicInt 
  else:
    let SDL_AtomicAdd* = SDL_AtomicAdd_renamed_SDL_AddAtomicInt 
when SDL_AtomicCAS_renamed_SDL_CompareAndSwapAtomicInt is typedesc:
  type
    SDL_AtomicCAS* = SDL_AtomicCAS_renamed_SDL_CompareAndSwapAtomicInt 
else:
  when SDL_AtomicCAS_renamed_SDL_CompareAndSwapAtomicInt is static:
    const
      SDL_AtomicCAS* = SDL_AtomicCAS_renamed_SDL_CompareAndSwapAtomicInt 
  else:
    let SDL_AtomicCAS* = SDL_AtomicCAS_renamed_SDL_CompareAndSwapAtomicInt 
when SDL_AtomicCASPtr_renamed_SDL_CompareAndSwapAtomicPointer is typedesc:
  type
    SDL_AtomicCASPtr* = SDL_AtomicCASPtr_renamed_SDL_CompareAndSwapAtomicPointer 
else:
  when SDL_AtomicCASPtr_renamed_SDL_CompareAndSwapAtomicPointer is static:
    const
      SDL_AtomicCASPtr* = SDL_AtomicCASPtr_renamed_SDL_CompareAndSwapAtomicPointer 
  else:
    let SDL_AtomicCASPtr* = SDL_AtomicCASPtr_renamed_SDL_CompareAndSwapAtomicPointer 
when SDL_AtomicGet_renamed_SDL_GetAtomicInt is typedesc:
  type
    SDL_AtomicGet* = SDL_AtomicGet_renamed_SDL_GetAtomicInt 
else:
  when SDL_AtomicGet_renamed_SDL_GetAtomicInt is static:
    const
      SDL_AtomicGet* = SDL_AtomicGet_renamed_SDL_GetAtomicInt 
  else:
    let SDL_AtomicGet* = SDL_AtomicGet_renamed_SDL_GetAtomicInt 
when SDL_AtomicGetPtr_renamed_SDL_GetAtomicPointer is typedesc:
  type
    SDL_AtomicGetPtr* = SDL_AtomicGetPtr_renamed_SDL_GetAtomicPointer 
else:
  when SDL_AtomicGetPtr_renamed_SDL_GetAtomicPointer is static:
    const
      SDL_AtomicGetPtr* = SDL_AtomicGetPtr_renamed_SDL_GetAtomicPointer 
  else:
    let SDL_AtomicGetPtr* = SDL_AtomicGetPtr_renamed_SDL_GetAtomicPointer 
when SDL_AtomicLock_renamed_SDL_LockSpinlock is typedesc:
  type
    SDL_AtomicLock* = SDL_AtomicLock_renamed_SDL_LockSpinlock 
else:
  when SDL_AtomicLock_renamed_SDL_LockSpinlock is static:
    const
      SDL_AtomicLock* = SDL_AtomicLock_renamed_SDL_LockSpinlock 
  else:
    let SDL_AtomicLock* = SDL_AtomicLock_renamed_SDL_LockSpinlock 
when SDL_AtomicSet_renamed_SDL_SetAtomicInt is typedesc:
  type
    SDL_AtomicSet* = SDL_AtomicSet_renamed_SDL_SetAtomicInt 
else:
  when SDL_AtomicSet_renamed_SDL_SetAtomicInt is static:
    const
      SDL_AtomicSet* = SDL_AtomicSet_renamed_SDL_SetAtomicInt 
  else:
    let SDL_AtomicSet* = SDL_AtomicSet_renamed_SDL_SetAtomicInt 
when SDL_AtomicSetPtr_renamed_SDL_SetAtomicPointer is typedesc:
  type
    SDL_AtomicSetPtr* = SDL_AtomicSetPtr_renamed_SDL_SetAtomicPointer 
else:
  when SDL_AtomicSetPtr_renamed_SDL_SetAtomicPointer is static:
    const
      SDL_AtomicSetPtr* = SDL_AtomicSetPtr_renamed_SDL_SetAtomicPointer 
  else:
    let SDL_AtomicSetPtr* = SDL_AtomicSetPtr_renamed_SDL_SetAtomicPointer 
when SDL_AtomicTryLock_renamed_SDL_TryLockSpinlock is typedesc:
  type
    SDL_AtomicTryLock* = SDL_AtomicTryLock_renamed_SDL_TryLockSpinlock 
else:
  when SDL_AtomicTryLock_renamed_SDL_TryLockSpinlock is static:
    const
      SDL_AtomicTryLock* = SDL_AtomicTryLock_renamed_SDL_TryLockSpinlock 
  else:
    let SDL_AtomicTryLock* = SDL_AtomicTryLock_renamed_SDL_TryLockSpinlock 
when SDL_AtomicUnlock_renamed_SDL_UnlockSpinlock is typedesc:
  type
    SDL_AtomicUnlock* = SDL_AtomicUnlock_renamed_SDL_UnlockSpinlock 
else:
  when SDL_AtomicUnlock_renamed_SDL_UnlockSpinlock is static:
    const
      SDL_AtomicUnlock* = SDL_AtomicUnlock_renamed_SDL_UnlockSpinlock 
  else:
    let SDL_AtomicUnlock* = SDL_AtomicUnlock_renamed_SDL_UnlockSpinlock 
when SDL_atomic_t_renamed_SDL_AtomicInt is typedesc:
  type
    SDL_atomic_t* = SDL_atomic_t_renamed_SDL_AtomicInt 
else:
  when SDL_atomic_t_renamed_SDL_AtomicInt is static:
    const
      SDL_atomic_t* = SDL_atomic_t_renamed_SDL_AtomicInt 
  else:
    let SDL_atomic_t* = SDL_atomic_t_renamed_SDL_AtomicInt 
when AUDIO_F32_renamed_SDL_AUDIO_F32LE is typedesc:
  type
    AUDIO_F32* = AUDIO_F32_renamed_SDL_AUDIO_F32LE 
else:
  when AUDIO_F32_renamed_SDL_AUDIO_F32LE is static:
    const
      AUDIO_F32* = AUDIO_F32_renamed_SDL_AUDIO_F32LE 
  else:
    let AUDIO_F32* = AUDIO_F32_renamed_SDL_AUDIO_F32LE 
when AUDIO_F32LSB_renamed_SDL_AUDIO_F32LE is typedesc:
  type
    AUDIO_F32LSB* = AUDIO_F32LSB_renamed_SDL_AUDIO_F32LE 
else:
  when AUDIO_F32LSB_renamed_SDL_AUDIO_F32LE is static:
    const
      AUDIO_F32LSB* = AUDIO_F32LSB_renamed_SDL_AUDIO_F32LE 
  else:
    let AUDIO_F32LSB* = AUDIO_F32LSB_renamed_SDL_AUDIO_F32LE 
when AUDIO_F32MSB_renamed_SDL_AUDIO_F32BE is typedesc:
  type
    AUDIO_F32MSB* = AUDIO_F32MSB_renamed_SDL_AUDIO_F32BE 
else:
  when AUDIO_F32MSB_renamed_SDL_AUDIO_F32BE is static:
    const
      AUDIO_F32MSB* = AUDIO_F32MSB_renamed_SDL_AUDIO_F32BE 
  else:
    let AUDIO_F32MSB* = AUDIO_F32MSB_renamed_SDL_AUDIO_F32BE 
when AUDIO_F32SYS_renamed_SDL_AUDIO_F32 is typedesc:
  type
    AUDIO_F32SYS* = AUDIO_F32SYS_renamed_SDL_AUDIO_F32 
else:
  when AUDIO_F32SYS_renamed_SDL_AUDIO_F32 is static:
    const
      AUDIO_F32SYS* = AUDIO_F32SYS_renamed_SDL_AUDIO_F32 
  else:
    let AUDIO_F32SYS* = AUDIO_F32SYS_renamed_SDL_AUDIO_F32 
when AUDIO_S16_renamed_SDL_AUDIO_S16LE is typedesc:
  type
    AUDIO_S16* = AUDIO_S16_renamed_SDL_AUDIO_S16LE 
else:
  when AUDIO_S16_renamed_SDL_AUDIO_S16LE is static:
    const
      AUDIO_S16* = AUDIO_S16_renamed_SDL_AUDIO_S16LE 
  else:
    let AUDIO_S16* = AUDIO_S16_renamed_SDL_AUDIO_S16LE 
when AUDIO_S16LSB_renamed_SDL_AUDIO_S16LE is typedesc:
  type
    AUDIO_S16LSB* = AUDIO_S16LSB_renamed_SDL_AUDIO_S16LE 
else:
  when AUDIO_S16LSB_renamed_SDL_AUDIO_S16LE is static:
    const
      AUDIO_S16LSB* = AUDIO_S16LSB_renamed_SDL_AUDIO_S16LE 
  else:
    let AUDIO_S16LSB* = AUDIO_S16LSB_renamed_SDL_AUDIO_S16LE 
when AUDIO_S16MSB_renamed_SDL_AUDIO_S16BE is typedesc:
  type
    AUDIO_S16MSB* = AUDIO_S16MSB_renamed_SDL_AUDIO_S16BE 
else:
  when AUDIO_S16MSB_renamed_SDL_AUDIO_S16BE is static:
    const
      AUDIO_S16MSB* = AUDIO_S16MSB_renamed_SDL_AUDIO_S16BE 
  else:
    let AUDIO_S16MSB* = AUDIO_S16MSB_renamed_SDL_AUDIO_S16BE 
when AUDIO_S16SYS_renamed_SDL_AUDIO_S16 is typedesc:
  type
    AUDIO_S16SYS* = AUDIO_S16SYS_renamed_SDL_AUDIO_S16 
else:
  when AUDIO_S16SYS_renamed_SDL_AUDIO_S16 is static:
    const
      AUDIO_S16SYS* = AUDIO_S16SYS_renamed_SDL_AUDIO_S16 
  else:
    let AUDIO_S16SYS* = AUDIO_S16SYS_renamed_SDL_AUDIO_S16 
when AUDIO_S32_renamed_SDL_AUDIO_S32LE is typedesc:
  type
    AUDIO_S32* = AUDIO_S32_renamed_SDL_AUDIO_S32LE 
else:
  when AUDIO_S32_renamed_SDL_AUDIO_S32LE is static:
    const
      AUDIO_S32* = AUDIO_S32_renamed_SDL_AUDIO_S32LE 
  else:
    let AUDIO_S32* = AUDIO_S32_renamed_SDL_AUDIO_S32LE 
when AUDIO_S32LSB_renamed_SDL_AUDIO_S32LE is typedesc:
  type
    AUDIO_S32LSB* = AUDIO_S32LSB_renamed_SDL_AUDIO_S32LE 
else:
  when AUDIO_S32LSB_renamed_SDL_AUDIO_S32LE is static:
    const
      AUDIO_S32LSB* = AUDIO_S32LSB_renamed_SDL_AUDIO_S32LE 
  else:
    let AUDIO_S32LSB* = AUDIO_S32LSB_renamed_SDL_AUDIO_S32LE 
when AUDIO_S32MSB_renamed_SDL_AUDIO_S32BE is typedesc:
  type
    AUDIO_S32MSB* = AUDIO_S32MSB_renamed_SDL_AUDIO_S32BE 
else:
  when AUDIO_S32MSB_renamed_SDL_AUDIO_S32BE is static:
    const
      AUDIO_S32MSB* = AUDIO_S32MSB_renamed_SDL_AUDIO_S32BE 
  else:
    let AUDIO_S32MSB* = AUDIO_S32MSB_renamed_SDL_AUDIO_S32BE 
when AUDIO_S32SYS_renamed_SDL_AUDIO_S32 is typedesc:
  type
    AUDIO_S32SYS* = AUDIO_S32SYS_renamed_SDL_AUDIO_S32 
else:
  when AUDIO_S32SYS_renamed_SDL_AUDIO_S32 is static:
    const
      AUDIO_S32SYS* = AUDIO_S32SYS_renamed_SDL_AUDIO_S32 
  else:
    let AUDIO_S32SYS* = AUDIO_S32SYS_renamed_SDL_AUDIO_S32 
when AUDIO_S8_renamed_SDL_AUDIO_S8 is typedesc:
  type
    AUDIO_S8* = AUDIO_S8_renamed_SDL_AUDIO_S8 
else:
  when AUDIO_S8_renamed_SDL_AUDIO_S8 is static:
    const
      AUDIO_S8* = AUDIO_S8_renamed_SDL_AUDIO_S8 
  else:
    let AUDIO_S8* = AUDIO_S8_renamed_SDL_AUDIO_S8 
when AUDIO_U8_renamed_SDL_AUDIO_U8 is typedesc:
  type
    AUDIO_U8* = AUDIO_U8_renamed_SDL_AUDIO_U8 
else:
  when AUDIO_U8_renamed_SDL_AUDIO_U8 is static:
    const
      AUDIO_U8* = AUDIO_U8_renamed_SDL_AUDIO_U8 
  else:
    let AUDIO_U8* = AUDIO_U8_renamed_SDL_AUDIO_U8 
when SDL_AudioStreamAvailable_renamed_SDL_GetAudioStreamAvailable is typedesc:
  type
    SDL_AudioStreamAvailable* = SDL_AudioStreamAvailable_renamed_SDL_GetAudioStreamAvailable 
else:
  when SDL_AudioStreamAvailable_renamed_SDL_GetAudioStreamAvailable is static:
    const
      SDL_AudioStreamAvailable* = SDL_AudioStreamAvailable_renamed_SDL_GetAudioStreamAvailable 
  else:
    let SDL_AudioStreamAvailable* = SDL_AudioStreamAvailable_renamed_SDL_GetAudioStreamAvailable 
when SDL_AudioStreamClear_renamed_SDL_ClearAudioStream is typedesc:
  type
    SDL_AudioStreamClear* = SDL_AudioStreamClear_renamed_SDL_ClearAudioStream 
else:
  when SDL_AudioStreamClear_renamed_SDL_ClearAudioStream is static:
    const
      SDL_AudioStreamClear* = SDL_AudioStreamClear_renamed_SDL_ClearAudioStream 
  else:
    let SDL_AudioStreamClear* = SDL_AudioStreamClear_renamed_SDL_ClearAudioStream 
when SDL_AudioStreamFlush_renamed_SDL_FlushAudioStream is typedesc:
  type
    SDL_AudioStreamFlush* = SDL_AudioStreamFlush_renamed_SDL_FlushAudioStream 
else:
  when SDL_AudioStreamFlush_renamed_SDL_FlushAudioStream is static:
    const
      SDL_AudioStreamFlush* = SDL_AudioStreamFlush_renamed_SDL_FlushAudioStream 
  else:
    let SDL_AudioStreamFlush* = SDL_AudioStreamFlush_renamed_SDL_FlushAudioStream 
when SDL_AudioStreamGet_renamed_SDL_GetAudioStreamData is typedesc:
  type
    SDL_AudioStreamGet* = SDL_AudioStreamGet_renamed_SDL_GetAudioStreamData 
else:
  when SDL_AudioStreamGet_renamed_SDL_GetAudioStreamData is static:
    const
      SDL_AudioStreamGet* = SDL_AudioStreamGet_renamed_SDL_GetAudioStreamData 
  else:
    let SDL_AudioStreamGet* = SDL_AudioStreamGet_renamed_SDL_GetAudioStreamData 
when SDL_AudioStreamPut_renamed_SDL_PutAudioStreamData is typedesc:
  type
    SDL_AudioStreamPut* = SDL_AudioStreamPut_renamed_SDL_PutAudioStreamData 
else:
  when SDL_AudioStreamPut_renamed_SDL_PutAudioStreamData is static:
    const
      SDL_AudioStreamPut* = SDL_AudioStreamPut_renamed_SDL_PutAudioStreamData 
  else:
    let SDL_AudioStreamPut* = SDL_AudioStreamPut_renamed_SDL_PutAudioStreamData 
when SDL_FreeAudioStream_renamed_SDL_DestroyAudioStream is typedesc:
  type
    SDL_FreeAudioStream* = SDL_FreeAudioStream_renamed_SDL_DestroyAudioStream 
else:
  when SDL_FreeAudioStream_renamed_SDL_DestroyAudioStream is static:
    const
      SDL_FreeAudioStream* = SDL_FreeAudioStream_renamed_SDL_DestroyAudioStream 
  else:
    let SDL_FreeAudioStream* = SDL_FreeAudioStream_renamed_SDL_DestroyAudioStream 
when SDL_FreeWAV_renamed_SDL_free is typedesc:
  type
    SDL_FreeWAV* = SDL_FreeWAV_renamed_SDL_free 
else:
  when SDL_FreeWAV_renamed_SDL_free is static:
    const
      SDL_FreeWAV* = SDL_FreeWAV_renamed_SDL_free 
  else:
    let SDL_FreeWAV* = SDL_FreeWAV_renamed_SDL_free 
when SDL_LoadWAV_RW_renamed_SDL_LoadWAV_IO is typedesc:
  type
    SDL_LoadWAV_RW* = SDL_LoadWAV_RW_renamed_SDL_LoadWAV_IO 
else:
  when SDL_LoadWAV_RW_renamed_SDL_LoadWAV_IO is static:
    const
      SDL_LoadWAV_RW* = SDL_LoadWAV_RW_renamed_SDL_LoadWAV_IO 
  else:
    let SDL_LoadWAV_RW* = SDL_LoadWAV_RW_renamed_SDL_LoadWAV_IO 
when SDL_MixAudioFormat_renamed_SDL_MixAudio is typedesc:
  type
    SDL_MixAudioFormat* = SDL_MixAudioFormat_renamed_SDL_MixAudio 
else:
  when SDL_MixAudioFormat_renamed_SDL_MixAudio is static:
    const
      SDL_MixAudioFormat* = SDL_MixAudioFormat_renamed_SDL_MixAudio 
  else:
    let SDL_MixAudioFormat* = SDL_MixAudioFormat_renamed_SDL_MixAudio 
when SDL_NewAudioStream_renamed_SDL_CreateAudioStream is typedesc:
  type
    SDL_NewAudioStream* = SDL_NewAudioStream_renamed_SDL_CreateAudioStream 
else:
  when SDL_NewAudioStream_renamed_SDL_CreateAudioStream is static:
    const
      SDL_NewAudioStream* = SDL_NewAudioStream_renamed_SDL_CreateAudioStream 
  else:
    let SDL_NewAudioStream* = SDL_NewAudioStream_renamed_SDL_CreateAudioStream 
when SDL_GetCPUCount_renamed_SDL_GetNumLogicalCPUCores is typedesc:
  type
    SDL_GetCPUCount* = SDL_GetCPUCount_renamed_SDL_GetNumLogicalCPUCores 
else:
  when SDL_GetCPUCount_renamed_SDL_GetNumLogicalCPUCores is static:
    const
      SDL_GetCPUCount* = SDL_GetCPUCount_renamed_SDL_GetNumLogicalCPUCores 
  else:
    let SDL_GetCPUCount* = SDL_GetCPUCount_renamed_SDL_GetNumLogicalCPUCores 
when SDL_SIMDGetAlignment_renamed_SDL_GetSIMDAlignment is typedesc:
  type
    SDL_SIMDGetAlignment* = SDL_SIMDGetAlignment_renamed_SDL_GetSIMDAlignment 
else:
  when SDL_SIMDGetAlignment_renamed_SDL_GetSIMDAlignment is static:
    const
      SDL_SIMDGetAlignment* = SDL_SIMDGetAlignment_renamed_SDL_GetSIMDAlignment 
  else:
    let SDL_SIMDGetAlignment* = SDL_SIMDGetAlignment_renamed_SDL_GetSIMDAlignment 
when SDL_SwapBE16_renamed_SDL_Swap16BE is typedesc:
  type
    SDL_SwapBE16* = SDL_SwapBE16_renamed_SDL_Swap16BE 
else:
  when SDL_SwapBE16_renamed_SDL_Swap16BE is static:
    const
      SDL_SwapBE16* = SDL_SwapBE16_renamed_SDL_Swap16BE 
  else:
    let SDL_SwapBE16* = SDL_SwapBE16_renamed_SDL_Swap16BE 
when SDL_SwapBE32_renamed_SDL_Swap32BE is typedesc:
  type
    SDL_SwapBE32* = SDL_SwapBE32_renamed_SDL_Swap32BE 
else:
  when SDL_SwapBE32_renamed_SDL_Swap32BE is static:
    const
      SDL_SwapBE32* = SDL_SwapBE32_renamed_SDL_Swap32BE 
  else:
    let SDL_SwapBE32* = SDL_SwapBE32_renamed_SDL_Swap32BE 
when SDL_SwapBE64_renamed_SDL_Swap64BE is typedesc:
  type
    SDL_SwapBE64* = SDL_SwapBE64_renamed_SDL_Swap64BE 
else:
  when SDL_SwapBE64_renamed_SDL_Swap64BE is static:
    const
      SDL_SwapBE64* = SDL_SwapBE64_renamed_SDL_Swap64BE 
  else:
    let SDL_SwapBE64* = SDL_SwapBE64_renamed_SDL_Swap64BE 
when SDL_SwapLE16_renamed_SDL_Swap16LE is typedesc:
  type
    SDL_SwapLE16* = SDL_SwapLE16_renamed_SDL_Swap16LE 
else:
  when SDL_SwapLE16_renamed_SDL_Swap16LE is static:
    const
      SDL_SwapLE16* = SDL_SwapLE16_renamed_SDL_Swap16LE 
  else:
    let SDL_SwapLE16* = SDL_SwapLE16_renamed_SDL_Swap16LE 
when SDL_SwapLE32_renamed_SDL_Swap32LE is typedesc:
  type
    SDL_SwapLE32* = SDL_SwapLE32_renamed_SDL_Swap32LE 
else:
  when SDL_SwapLE32_renamed_SDL_Swap32LE is static:
    const
      SDL_SwapLE32* = SDL_SwapLE32_renamed_SDL_Swap32LE 
  else:
    let SDL_SwapLE32* = SDL_SwapLE32_renamed_SDL_Swap32LE 
when SDL_SwapLE64_renamed_SDL_Swap64LE is typedesc:
  type
    SDL_SwapLE64* = SDL_SwapLE64_renamed_SDL_Swap64LE 
else:
  when SDL_SwapLE64_renamed_SDL_Swap64LE is static:
    const
      SDL_SwapLE64* = SDL_SwapLE64_renamed_SDL_Swap64LE 
  else:
    let SDL_SwapLE64* = SDL_SwapLE64_renamed_SDL_Swap64LE 
when SDL_APP_DIDENTERBACKGROUND_renamed_SDL_EVENT_DID_ENTER_BACKGROUND is
    typedesc:
  type
    SDL_APP_DIDENTERBACKGROUND* = SDL_APP_DIDENTERBACKGROUND_renamed_SDL_EVENT_DID_ENTER_BACKGROUND 
else:
  when SDL_APP_DIDENTERBACKGROUND_renamed_SDL_EVENT_DID_ENTER_BACKGROUND is
      static:
    const
      SDL_APP_DIDENTERBACKGROUND* = SDL_APP_DIDENTERBACKGROUND_renamed_SDL_EVENT_DID_ENTER_BACKGROUND 
  else:
    let SDL_APP_DIDENTERBACKGROUND* = SDL_APP_DIDENTERBACKGROUND_renamed_SDL_EVENT_DID_ENTER_BACKGROUND 
when SDL_APP_DIDENTERFOREGROUND_renamed_SDL_EVENT_DID_ENTER_FOREGROUND is
    typedesc:
  type
    SDL_APP_DIDENTERFOREGROUND* = SDL_APP_DIDENTERFOREGROUND_renamed_SDL_EVENT_DID_ENTER_FOREGROUND 
else:
  when SDL_APP_DIDENTERFOREGROUND_renamed_SDL_EVENT_DID_ENTER_FOREGROUND is
      static:
    const
      SDL_APP_DIDENTERFOREGROUND* = SDL_APP_DIDENTERFOREGROUND_renamed_SDL_EVENT_DID_ENTER_FOREGROUND 
  else:
    let SDL_APP_DIDENTERFOREGROUND* = SDL_APP_DIDENTERFOREGROUND_renamed_SDL_EVENT_DID_ENTER_FOREGROUND 
when SDL_APP_LOWMEMORY_renamed_SDL_EVENT_LOW_MEMORY is typedesc:
  type
    SDL_APP_LOWMEMORY* = SDL_APP_LOWMEMORY_renamed_SDL_EVENT_LOW_MEMORY 
else:
  when SDL_APP_LOWMEMORY_renamed_SDL_EVENT_LOW_MEMORY is static:
    const
      SDL_APP_LOWMEMORY* = SDL_APP_LOWMEMORY_renamed_SDL_EVENT_LOW_MEMORY 
  else:
    let SDL_APP_LOWMEMORY* = SDL_APP_LOWMEMORY_renamed_SDL_EVENT_LOW_MEMORY 
when SDL_APP_TERMINATING_renamed_SDL_EVENT_TERMINATING is typedesc:
  type
    SDL_APP_TERMINATING* = SDL_APP_TERMINATING_renamed_SDL_EVENT_TERMINATING 
else:
  when SDL_APP_TERMINATING_renamed_SDL_EVENT_TERMINATING is static:
    const
      SDL_APP_TERMINATING* = SDL_APP_TERMINATING_renamed_SDL_EVENT_TERMINATING 
  else:
    let SDL_APP_TERMINATING* = SDL_APP_TERMINATING_renamed_SDL_EVENT_TERMINATING 
when SDL_APP_WILLENTERBACKGROUND_renamed_SDL_EVENT_WILL_ENTER_BACKGROUND is
    typedesc:
  type
    SDL_APP_WILLENTERBACKGROUND* = SDL_APP_WILLENTERBACKGROUND_renamed_SDL_EVENT_WILL_ENTER_BACKGROUND 
else:
  when SDL_APP_WILLENTERBACKGROUND_renamed_SDL_EVENT_WILL_ENTER_BACKGROUND is
      static:
    const
      SDL_APP_WILLENTERBACKGROUND* = SDL_APP_WILLENTERBACKGROUND_renamed_SDL_EVENT_WILL_ENTER_BACKGROUND 
  else:
    let SDL_APP_WILLENTERBACKGROUND* = SDL_APP_WILLENTERBACKGROUND_renamed_SDL_EVENT_WILL_ENTER_BACKGROUND 
when SDL_APP_WILLENTERFOREGROUND_renamed_SDL_EVENT_WILL_ENTER_FOREGROUND is
    typedesc:
  type
    SDL_APP_WILLENTERFOREGROUND* = SDL_APP_WILLENTERFOREGROUND_renamed_SDL_EVENT_WILL_ENTER_FOREGROUND 
else:
  when SDL_APP_WILLENTERFOREGROUND_renamed_SDL_EVENT_WILL_ENTER_FOREGROUND is
      static:
    const
      SDL_APP_WILLENTERFOREGROUND* = SDL_APP_WILLENTERFOREGROUND_renamed_SDL_EVENT_WILL_ENTER_FOREGROUND 
  else:
    let SDL_APP_WILLENTERFOREGROUND* = SDL_APP_WILLENTERFOREGROUND_renamed_SDL_EVENT_WILL_ENTER_FOREGROUND 
when SDL_AUDIODEVICEADDED_renamed_SDL_EVENT_AUDIO_DEVICE_ADDED is typedesc:
  type
    SDL_AUDIODEVICEADDED* = SDL_AUDIODEVICEADDED_renamed_SDL_EVENT_AUDIO_DEVICE_ADDED 
else:
  when SDL_AUDIODEVICEADDED_renamed_SDL_EVENT_AUDIO_DEVICE_ADDED is static:
    const
      SDL_AUDIODEVICEADDED* = SDL_AUDIODEVICEADDED_renamed_SDL_EVENT_AUDIO_DEVICE_ADDED 
  else:
    let SDL_AUDIODEVICEADDED* = SDL_AUDIODEVICEADDED_renamed_SDL_EVENT_AUDIO_DEVICE_ADDED 
when SDL_AUDIODEVICEREMOVED_renamed_SDL_EVENT_AUDIO_DEVICE_REMOVED is typedesc:
  type
    SDL_AUDIODEVICEREMOVED* = SDL_AUDIODEVICEREMOVED_renamed_SDL_EVENT_AUDIO_DEVICE_REMOVED 
else:
  when SDL_AUDIODEVICEREMOVED_renamed_SDL_EVENT_AUDIO_DEVICE_REMOVED is static:
    const
      SDL_AUDIODEVICEREMOVED* = SDL_AUDIODEVICEREMOVED_renamed_SDL_EVENT_AUDIO_DEVICE_REMOVED 
  else:
    let SDL_AUDIODEVICEREMOVED* = SDL_AUDIODEVICEREMOVED_renamed_SDL_EVENT_AUDIO_DEVICE_REMOVED 
when SDL_CLIPBOARDUPDATE_renamed_SDL_EVENT_CLIPBOARD_UPDATE is typedesc:
  type
    SDL_CLIPBOARDUPDATE* = SDL_CLIPBOARDUPDATE_renamed_SDL_EVENT_CLIPBOARD_UPDATE 
else:
  when SDL_CLIPBOARDUPDATE_renamed_SDL_EVENT_CLIPBOARD_UPDATE is static:
    const
      SDL_CLIPBOARDUPDATE* = SDL_CLIPBOARDUPDATE_renamed_SDL_EVENT_CLIPBOARD_UPDATE 
  else:
    let SDL_CLIPBOARDUPDATE* = SDL_CLIPBOARDUPDATE_renamed_SDL_EVENT_CLIPBOARD_UPDATE 
when SDL_CONTROLLERAXISMOTION_renamed_SDL_EVENT_GAMEPAD_AXIS_MOTION is typedesc:
  type
    SDL_CONTROLLERAXISMOTION* = SDL_CONTROLLERAXISMOTION_renamed_SDL_EVENT_GAMEPAD_AXIS_MOTION 
else:
  when SDL_CONTROLLERAXISMOTION_renamed_SDL_EVENT_GAMEPAD_AXIS_MOTION is static:
    const
      SDL_CONTROLLERAXISMOTION* = SDL_CONTROLLERAXISMOTION_renamed_SDL_EVENT_GAMEPAD_AXIS_MOTION 
  else:
    let SDL_CONTROLLERAXISMOTION* = SDL_CONTROLLERAXISMOTION_renamed_SDL_EVENT_GAMEPAD_AXIS_MOTION 
when SDL_CONTROLLERBUTTONDOWN_renamed_SDL_EVENT_GAMEPAD_BUTTON_DOWN is typedesc:
  type
    SDL_CONTROLLERBUTTONDOWN* = SDL_CONTROLLERBUTTONDOWN_renamed_SDL_EVENT_GAMEPAD_BUTTON_DOWN 
else:
  when SDL_CONTROLLERBUTTONDOWN_renamed_SDL_EVENT_GAMEPAD_BUTTON_DOWN is static:
    const
      SDL_CONTROLLERBUTTONDOWN* = SDL_CONTROLLERBUTTONDOWN_renamed_SDL_EVENT_GAMEPAD_BUTTON_DOWN 
  else:
    let SDL_CONTROLLERBUTTONDOWN* = SDL_CONTROLLERBUTTONDOWN_renamed_SDL_EVENT_GAMEPAD_BUTTON_DOWN 
when SDL_CONTROLLERBUTTONUP_renamed_SDL_EVENT_GAMEPAD_BUTTON_UP is typedesc:
  type
    SDL_CONTROLLERBUTTONUP* = SDL_CONTROLLERBUTTONUP_renamed_SDL_EVENT_GAMEPAD_BUTTON_UP 
else:
  when SDL_CONTROLLERBUTTONUP_renamed_SDL_EVENT_GAMEPAD_BUTTON_UP is static:
    const
      SDL_CONTROLLERBUTTONUP* = SDL_CONTROLLERBUTTONUP_renamed_SDL_EVENT_GAMEPAD_BUTTON_UP 
  else:
    let SDL_CONTROLLERBUTTONUP* = SDL_CONTROLLERBUTTONUP_renamed_SDL_EVENT_GAMEPAD_BUTTON_UP 
when SDL_CONTROLLERDEVICEADDED_renamed_SDL_EVENT_GAMEPAD_ADDED is typedesc:
  type
    SDL_CONTROLLERDEVICEADDED* = SDL_CONTROLLERDEVICEADDED_renamed_SDL_EVENT_GAMEPAD_ADDED 
else:
  when SDL_CONTROLLERDEVICEADDED_renamed_SDL_EVENT_GAMEPAD_ADDED is static:
    const
      SDL_CONTROLLERDEVICEADDED* = SDL_CONTROLLERDEVICEADDED_renamed_SDL_EVENT_GAMEPAD_ADDED 
  else:
    let SDL_CONTROLLERDEVICEADDED* = SDL_CONTROLLERDEVICEADDED_renamed_SDL_EVENT_GAMEPAD_ADDED 
when SDL_CONTROLLERDEVICEREMAPPED_renamed_SDL_EVENT_GAMEPAD_REMAPPED is typedesc:
  type
    SDL_CONTROLLERDEVICEREMAPPED* = SDL_CONTROLLERDEVICEREMAPPED_renamed_SDL_EVENT_GAMEPAD_REMAPPED 
else:
  when SDL_CONTROLLERDEVICEREMAPPED_renamed_SDL_EVENT_GAMEPAD_REMAPPED is static:
    const
      SDL_CONTROLLERDEVICEREMAPPED* = SDL_CONTROLLERDEVICEREMAPPED_renamed_SDL_EVENT_GAMEPAD_REMAPPED 
  else:
    let SDL_CONTROLLERDEVICEREMAPPED* = SDL_CONTROLLERDEVICEREMAPPED_renamed_SDL_EVENT_GAMEPAD_REMAPPED 
when SDL_CONTROLLERDEVICEREMOVED_renamed_SDL_EVENT_GAMEPAD_REMOVED is typedesc:
  type
    SDL_CONTROLLERDEVICEREMOVED* = SDL_CONTROLLERDEVICEREMOVED_renamed_SDL_EVENT_GAMEPAD_REMOVED 
else:
  when SDL_CONTROLLERDEVICEREMOVED_renamed_SDL_EVENT_GAMEPAD_REMOVED is static:
    const
      SDL_CONTROLLERDEVICEREMOVED* = SDL_CONTROLLERDEVICEREMOVED_renamed_SDL_EVENT_GAMEPAD_REMOVED 
  else:
    let SDL_CONTROLLERDEVICEREMOVED* = SDL_CONTROLLERDEVICEREMOVED_renamed_SDL_EVENT_GAMEPAD_REMOVED 
when SDL_CONTROLLERSENSORUPDATE_renamed_SDL_EVENT_GAMEPAD_SENSOR_UPDATE is
    typedesc:
  type
    SDL_CONTROLLERSENSORUPDATE* = SDL_CONTROLLERSENSORUPDATE_renamed_SDL_EVENT_GAMEPAD_SENSOR_UPDATE 
else:
  when SDL_CONTROLLERSENSORUPDATE_renamed_SDL_EVENT_GAMEPAD_SENSOR_UPDATE is
      static:
    const
      SDL_CONTROLLERSENSORUPDATE* = SDL_CONTROLLERSENSORUPDATE_renamed_SDL_EVENT_GAMEPAD_SENSOR_UPDATE 
  else:
    let SDL_CONTROLLERSENSORUPDATE* = SDL_CONTROLLERSENSORUPDATE_renamed_SDL_EVENT_GAMEPAD_SENSOR_UPDATE 
when SDL_CONTROLLERSTEAMHANDLEUPDATED_renamed_SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED is
    typedesc:
  type
    SDL_CONTROLLERSTEAMHANDLEUPDATED* = SDL_CONTROLLERSTEAMHANDLEUPDATED_renamed_SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED 
else:
  when SDL_CONTROLLERSTEAMHANDLEUPDATED_renamed_SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED is
      static:
    const
      SDL_CONTROLLERSTEAMHANDLEUPDATED* = SDL_CONTROLLERSTEAMHANDLEUPDATED_renamed_SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED 
  else:
    let SDL_CONTROLLERSTEAMHANDLEUPDATED* = SDL_CONTROLLERSTEAMHANDLEUPDATED_renamed_SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED 
when SDL_CONTROLLERTOUCHPADDOWN_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN is
    typedesc:
  type
    SDL_CONTROLLERTOUCHPADDOWN* = SDL_CONTROLLERTOUCHPADDOWN_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN 
else:
  when SDL_CONTROLLERTOUCHPADDOWN_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN is
      static:
    const
      SDL_CONTROLLERTOUCHPADDOWN* = SDL_CONTROLLERTOUCHPADDOWN_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN 
  else:
    let SDL_CONTROLLERTOUCHPADDOWN* = SDL_CONTROLLERTOUCHPADDOWN_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN 
when SDL_CONTROLLERTOUCHPADMOTION_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION is
    typedesc:
  type
    SDL_CONTROLLERTOUCHPADMOTION* = SDL_CONTROLLERTOUCHPADMOTION_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION 
else:
  when SDL_CONTROLLERTOUCHPADMOTION_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION is
      static:
    const
      SDL_CONTROLLERTOUCHPADMOTION* = SDL_CONTROLLERTOUCHPADMOTION_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION 
  else:
    let SDL_CONTROLLERTOUCHPADMOTION* = SDL_CONTROLLERTOUCHPADMOTION_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION 
when SDL_CONTROLLERTOUCHPADUP_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_UP is typedesc:
  type
    SDL_CONTROLLERTOUCHPADUP* = SDL_CONTROLLERTOUCHPADUP_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_UP 
else:
  when SDL_CONTROLLERTOUCHPADUP_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_UP is static:
    const
      SDL_CONTROLLERTOUCHPADUP* = SDL_CONTROLLERTOUCHPADUP_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_UP 
  else:
    let SDL_CONTROLLERTOUCHPADUP* = SDL_CONTROLLERTOUCHPADUP_renamed_SDL_EVENT_GAMEPAD_TOUCHPAD_UP 
when SDL_ControllerAxisEvent_renamed_SDL_GamepadAxisEvent is typedesc:
  type
    SDL_ControllerAxisEvent* = SDL_ControllerAxisEvent_renamed_SDL_GamepadAxisEvent 
else:
  when SDL_ControllerAxisEvent_renamed_SDL_GamepadAxisEvent is static:
    const
      SDL_ControllerAxisEvent* = SDL_ControllerAxisEvent_renamed_SDL_GamepadAxisEvent 
  else:
    let SDL_ControllerAxisEvent* = SDL_ControllerAxisEvent_renamed_SDL_GamepadAxisEvent 
when SDL_ControllerButtonEvent_renamed_SDL_GamepadButtonEvent is typedesc:
  type
    SDL_ControllerButtonEvent* = SDL_ControllerButtonEvent_renamed_SDL_GamepadButtonEvent 
else:
  when SDL_ControllerButtonEvent_renamed_SDL_GamepadButtonEvent is static:
    const
      SDL_ControllerButtonEvent* = SDL_ControllerButtonEvent_renamed_SDL_GamepadButtonEvent 
  else:
    let SDL_ControllerButtonEvent* = SDL_ControllerButtonEvent_renamed_SDL_GamepadButtonEvent 
when SDL_ControllerDeviceEvent_renamed_SDL_GamepadDeviceEvent is typedesc:
  type
    SDL_ControllerDeviceEvent* = SDL_ControllerDeviceEvent_renamed_SDL_GamepadDeviceEvent 
else:
  when SDL_ControllerDeviceEvent_renamed_SDL_GamepadDeviceEvent is static:
    const
      SDL_ControllerDeviceEvent* = SDL_ControllerDeviceEvent_renamed_SDL_GamepadDeviceEvent 
  else:
    let SDL_ControllerDeviceEvent* = SDL_ControllerDeviceEvent_renamed_SDL_GamepadDeviceEvent 
when SDL_ControllerSensorEvent_renamed_SDL_GamepadSensorEvent is typedesc:
  type
    SDL_ControllerSensorEvent* = SDL_ControllerSensorEvent_renamed_SDL_GamepadSensorEvent 
else:
  when SDL_ControllerSensorEvent_renamed_SDL_GamepadSensorEvent is static:
    const
      SDL_ControllerSensorEvent* = SDL_ControllerSensorEvent_renamed_SDL_GamepadSensorEvent 
  else:
    let SDL_ControllerSensorEvent* = SDL_ControllerSensorEvent_renamed_SDL_GamepadSensorEvent 
when SDL_ControllerTouchpadEvent_renamed_SDL_GamepadTouchpadEvent is typedesc:
  type
    SDL_ControllerTouchpadEvent* = SDL_ControllerTouchpadEvent_renamed_SDL_GamepadTouchpadEvent 
else:
  when SDL_ControllerTouchpadEvent_renamed_SDL_GamepadTouchpadEvent is static:
    const
      SDL_ControllerTouchpadEvent* = SDL_ControllerTouchpadEvent_renamed_SDL_GamepadTouchpadEvent 
  else:
    let SDL_ControllerTouchpadEvent* = SDL_ControllerTouchpadEvent_renamed_SDL_GamepadTouchpadEvent 
when SDL_DISPLAYEVENT_CONNECTED_renamed_SDL_EVENT_DISPLAY_ADDED is typedesc:
  type
    SDL_DISPLAYEVENT_CONNECTED* = SDL_DISPLAYEVENT_CONNECTED_renamed_SDL_EVENT_DISPLAY_ADDED 
else:
  when SDL_DISPLAYEVENT_CONNECTED_renamed_SDL_EVENT_DISPLAY_ADDED is static:
    const
      SDL_DISPLAYEVENT_CONNECTED* = SDL_DISPLAYEVENT_CONNECTED_renamed_SDL_EVENT_DISPLAY_ADDED 
  else:
    let SDL_DISPLAYEVENT_CONNECTED* = SDL_DISPLAYEVENT_CONNECTED_renamed_SDL_EVENT_DISPLAY_ADDED 
when SDL_DISPLAYEVENT_DISCONNECTED_renamed_SDL_EVENT_DISPLAY_REMOVED is typedesc:
  type
    SDL_DISPLAYEVENT_DISCONNECTED* = SDL_DISPLAYEVENT_DISCONNECTED_renamed_SDL_EVENT_DISPLAY_REMOVED 
else:
  when SDL_DISPLAYEVENT_DISCONNECTED_renamed_SDL_EVENT_DISPLAY_REMOVED is static:
    const
      SDL_DISPLAYEVENT_DISCONNECTED* = SDL_DISPLAYEVENT_DISCONNECTED_renamed_SDL_EVENT_DISPLAY_REMOVED 
  else:
    let SDL_DISPLAYEVENT_DISCONNECTED* = SDL_DISPLAYEVENT_DISCONNECTED_renamed_SDL_EVENT_DISPLAY_REMOVED 
when SDL_DISPLAYEVENT_MOVED_renamed_SDL_EVENT_DISPLAY_MOVED is typedesc:
  type
    SDL_DISPLAYEVENT_MOVED* = SDL_DISPLAYEVENT_MOVED_renamed_SDL_EVENT_DISPLAY_MOVED 
else:
  when SDL_DISPLAYEVENT_MOVED_renamed_SDL_EVENT_DISPLAY_MOVED is static:
    const
      SDL_DISPLAYEVENT_MOVED* = SDL_DISPLAYEVENT_MOVED_renamed_SDL_EVENT_DISPLAY_MOVED 
  else:
    let SDL_DISPLAYEVENT_MOVED* = SDL_DISPLAYEVENT_MOVED_renamed_SDL_EVENT_DISPLAY_MOVED 
when SDL_DISPLAYEVENT_ORIENTATION_renamed_SDL_EVENT_DISPLAY_ORIENTATION is
    typedesc:
  type
    SDL_DISPLAYEVENT_ORIENTATION* = SDL_DISPLAYEVENT_ORIENTATION_renamed_SDL_EVENT_DISPLAY_ORIENTATION 
else:
  when SDL_DISPLAYEVENT_ORIENTATION_renamed_SDL_EVENT_DISPLAY_ORIENTATION is
      static:
    const
      SDL_DISPLAYEVENT_ORIENTATION* = SDL_DISPLAYEVENT_ORIENTATION_renamed_SDL_EVENT_DISPLAY_ORIENTATION 
  else:
    let SDL_DISPLAYEVENT_ORIENTATION* = SDL_DISPLAYEVENT_ORIENTATION_renamed_SDL_EVENT_DISPLAY_ORIENTATION 
when SDL_DROPBEGIN_renamed_SDL_EVENT_DROP_BEGIN is typedesc:
  type
    SDL_DROPBEGIN* = SDL_DROPBEGIN_renamed_SDL_EVENT_DROP_BEGIN 
else:
  when SDL_DROPBEGIN_renamed_SDL_EVENT_DROP_BEGIN is static:
    const
      SDL_DROPBEGIN* = SDL_DROPBEGIN_renamed_SDL_EVENT_DROP_BEGIN 
  else:
    let SDL_DROPBEGIN* = SDL_DROPBEGIN_renamed_SDL_EVENT_DROP_BEGIN 
when SDL_DROPCOMPLETE_renamed_SDL_EVENT_DROP_COMPLETE is typedesc:
  type
    SDL_DROPCOMPLETE* = SDL_DROPCOMPLETE_renamed_SDL_EVENT_DROP_COMPLETE 
else:
  when SDL_DROPCOMPLETE_renamed_SDL_EVENT_DROP_COMPLETE is static:
    const
      SDL_DROPCOMPLETE* = SDL_DROPCOMPLETE_renamed_SDL_EVENT_DROP_COMPLETE 
  else:
    let SDL_DROPCOMPLETE* = SDL_DROPCOMPLETE_renamed_SDL_EVENT_DROP_COMPLETE 
when SDL_DROPFILE_renamed_SDL_EVENT_DROP_FILE is typedesc:
  type
    SDL_DROPFILE* = SDL_DROPFILE_renamed_SDL_EVENT_DROP_FILE 
else:
  when SDL_DROPFILE_renamed_SDL_EVENT_DROP_FILE is static:
    const
      SDL_DROPFILE* = SDL_DROPFILE_renamed_SDL_EVENT_DROP_FILE 
  else:
    let SDL_DROPFILE* = SDL_DROPFILE_renamed_SDL_EVENT_DROP_FILE 
when SDL_DROPTEXT_renamed_SDL_EVENT_DROP_TEXT is typedesc:
  type
    SDL_DROPTEXT* = SDL_DROPTEXT_renamed_SDL_EVENT_DROP_TEXT 
else:
  when SDL_DROPTEXT_renamed_SDL_EVENT_DROP_TEXT is static:
    const
      SDL_DROPTEXT* = SDL_DROPTEXT_renamed_SDL_EVENT_DROP_TEXT 
  else:
    let SDL_DROPTEXT* = SDL_DROPTEXT_renamed_SDL_EVENT_DROP_TEXT 
when SDL_DelEventWatch_renamed_SDL_RemoveEventWatch is typedesc:
  type
    SDL_DelEventWatch* = SDL_DelEventWatch_renamed_SDL_RemoveEventWatch 
else:
  when SDL_DelEventWatch_renamed_SDL_RemoveEventWatch is static:
    const
      SDL_DelEventWatch* = SDL_DelEventWatch_renamed_SDL_RemoveEventWatch 
  else:
    let SDL_DelEventWatch* = SDL_DelEventWatch_renamed_SDL_RemoveEventWatch 
when SDL_FINGERDOWN_renamed_SDL_EVENT_FINGER_DOWN is typedesc:
  type
    SDL_FINGERDOWN* = SDL_FINGERDOWN_renamed_SDL_EVENT_FINGER_DOWN 
else:
  when SDL_FINGERDOWN_renamed_SDL_EVENT_FINGER_DOWN is static:
    const
      SDL_FINGERDOWN* = SDL_FINGERDOWN_renamed_SDL_EVENT_FINGER_DOWN 
  else:
    let SDL_FINGERDOWN* = SDL_FINGERDOWN_renamed_SDL_EVENT_FINGER_DOWN 
when SDL_FINGERMOTION_renamed_SDL_EVENT_FINGER_MOTION is typedesc:
  type
    SDL_FINGERMOTION* = SDL_FINGERMOTION_renamed_SDL_EVENT_FINGER_MOTION 
else:
  when SDL_FINGERMOTION_renamed_SDL_EVENT_FINGER_MOTION is static:
    const
      SDL_FINGERMOTION* = SDL_FINGERMOTION_renamed_SDL_EVENT_FINGER_MOTION 
  else:
    let SDL_FINGERMOTION* = SDL_FINGERMOTION_renamed_SDL_EVENT_FINGER_MOTION 
when SDL_FINGERUP_renamed_SDL_EVENT_FINGER_UP is typedesc:
  type
    SDL_FINGERUP* = SDL_FINGERUP_renamed_SDL_EVENT_FINGER_UP 
else:
  when SDL_FINGERUP_renamed_SDL_EVENT_FINGER_UP is static:
    const
      SDL_FINGERUP* = SDL_FINGERUP_renamed_SDL_EVENT_FINGER_UP 
  else:
    let SDL_FINGERUP* = SDL_FINGERUP_renamed_SDL_EVENT_FINGER_UP 
when SDL_FIRSTEVENT_renamed_SDL_EVENT_FIRST is typedesc:
  type
    SDL_FIRSTEVENT* = SDL_FIRSTEVENT_renamed_SDL_EVENT_FIRST 
else:
  when SDL_FIRSTEVENT_renamed_SDL_EVENT_FIRST is static:
    const
      SDL_FIRSTEVENT* = SDL_FIRSTEVENT_renamed_SDL_EVENT_FIRST 
  else:
    let SDL_FIRSTEVENT* = SDL_FIRSTEVENT_renamed_SDL_EVENT_FIRST 
when SDL_JOYAXISMOTION_renamed_SDL_EVENT_JOYSTICK_AXIS_MOTION is typedesc:
  type
    SDL_JOYAXISMOTION* = SDL_JOYAXISMOTION_renamed_SDL_EVENT_JOYSTICK_AXIS_MOTION 
else:
  when SDL_JOYAXISMOTION_renamed_SDL_EVENT_JOYSTICK_AXIS_MOTION is static:
    const
      SDL_JOYAXISMOTION* = SDL_JOYAXISMOTION_renamed_SDL_EVENT_JOYSTICK_AXIS_MOTION 
  else:
    let SDL_JOYAXISMOTION* = SDL_JOYAXISMOTION_renamed_SDL_EVENT_JOYSTICK_AXIS_MOTION 
when SDL_JOYBATTERYUPDATED_renamed_SDL_EVENT_JOYSTICK_BATTERY_UPDATED is
    typedesc:
  type
    SDL_JOYBATTERYUPDATED* = SDL_JOYBATTERYUPDATED_renamed_SDL_EVENT_JOYSTICK_BATTERY_UPDATED 
else:
  when SDL_JOYBATTERYUPDATED_renamed_SDL_EVENT_JOYSTICK_BATTERY_UPDATED is
      static:
    const
      SDL_JOYBATTERYUPDATED* = SDL_JOYBATTERYUPDATED_renamed_SDL_EVENT_JOYSTICK_BATTERY_UPDATED 
  else:
    let SDL_JOYBATTERYUPDATED* = SDL_JOYBATTERYUPDATED_renamed_SDL_EVENT_JOYSTICK_BATTERY_UPDATED 
when SDL_JOYBUTTONDOWN_renamed_SDL_EVENT_JOYSTICK_BUTTON_DOWN is typedesc:
  type
    SDL_JOYBUTTONDOWN* = SDL_JOYBUTTONDOWN_renamed_SDL_EVENT_JOYSTICK_BUTTON_DOWN 
else:
  when SDL_JOYBUTTONDOWN_renamed_SDL_EVENT_JOYSTICK_BUTTON_DOWN is static:
    const
      SDL_JOYBUTTONDOWN* = SDL_JOYBUTTONDOWN_renamed_SDL_EVENT_JOYSTICK_BUTTON_DOWN 
  else:
    let SDL_JOYBUTTONDOWN* = SDL_JOYBUTTONDOWN_renamed_SDL_EVENT_JOYSTICK_BUTTON_DOWN 
when SDL_JOYBUTTONUP_renamed_SDL_EVENT_JOYSTICK_BUTTON_UP is typedesc:
  type
    SDL_JOYBUTTONUP* = SDL_JOYBUTTONUP_renamed_SDL_EVENT_JOYSTICK_BUTTON_UP 
else:
  when SDL_JOYBUTTONUP_renamed_SDL_EVENT_JOYSTICK_BUTTON_UP is static:
    const
      SDL_JOYBUTTONUP* = SDL_JOYBUTTONUP_renamed_SDL_EVENT_JOYSTICK_BUTTON_UP 
  else:
    let SDL_JOYBUTTONUP* = SDL_JOYBUTTONUP_renamed_SDL_EVENT_JOYSTICK_BUTTON_UP 
when SDL_JOYDEVICEADDED_renamed_SDL_EVENT_JOYSTICK_ADDED is typedesc:
  type
    SDL_JOYDEVICEADDED* = SDL_JOYDEVICEADDED_renamed_SDL_EVENT_JOYSTICK_ADDED 
else:
  when SDL_JOYDEVICEADDED_renamed_SDL_EVENT_JOYSTICK_ADDED is static:
    const
      SDL_JOYDEVICEADDED* = SDL_JOYDEVICEADDED_renamed_SDL_EVENT_JOYSTICK_ADDED 
  else:
    let SDL_JOYDEVICEADDED* = SDL_JOYDEVICEADDED_renamed_SDL_EVENT_JOYSTICK_ADDED 
when SDL_JOYDEVICEREMOVED_renamed_SDL_EVENT_JOYSTICK_REMOVED is typedesc:
  type
    SDL_JOYDEVICEREMOVED* = SDL_JOYDEVICEREMOVED_renamed_SDL_EVENT_JOYSTICK_REMOVED 
else:
  when SDL_JOYDEVICEREMOVED_renamed_SDL_EVENT_JOYSTICK_REMOVED is static:
    const
      SDL_JOYDEVICEREMOVED* = SDL_JOYDEVICEREMOVED_renamed_SDL_EVENT_JOYSTICK_REMOVED 
  else:
    let SDL_JOYDEVICEREMOVED* = SDL_JOYDEVICEREMOVED_renamed_SDL_EVENT_JOYSTICK_REMOVED 
when SDL_JOYBALLMOTION_renamed_SDL_EVENT_JOYSTICK_BALL_MOTION is typedesc:
  type
    SDL_JOYBALLMOTION* = SDL_JOYBALLMOTION_renamed_SDL_EVENT_JOYSTICK_BALL_MOTION 
else:
  when SDL_JOYBALLMOTION_renamed_SDL_EVENT_JOYSTICK_BALL_MOTION is static:
    const
      SDL_JOYBALLMOTION* = SDL_JOYBALLMOTION_renamed_SDL_EVENT_JOYSTICK_BALL_MOTION 
  else:
    let SDL_JOYBALLMOTION* = SDL_JOYBALLMOTION_renamed_SDL_EVENT_JOYSTICK_BALL_MOTION 
when SDL_JOYHATMOTION_renamed_SDL_EVENT_JOYSTICK_HAT_MOTION is typedesc:
  type
    SDL_JOYHATMOTION* = SDL_JOYHATMOTION_renamed_SDL_EVENT_JOYSTICK_HAT_MOTION 
else:
  when SDL_JOYHATMOTION_renamed_SDL_EVENT_JOYSTICK_HAT_MOTION is static:
    const
      SDL_JOYHATMOTION* = SDL_JOYHATMOTION_renamed_SDL_EVENT_JOYSTICK_HAT_MOTION 
  else:
    let SDL_JOYHATMOTION* = SDL_JOYHATMOTION_renamed_SDL_EVENT_JOYSTICK_HAT_MOTION 
when SDL_KEYDOWN_renamed_SDL_EVENT_KEY_DOWN is typedesc:
  type
    SDL_KEYDOWN* = SDL_KEYDOWN_renamed_SDL_EVENT_KEY_DOWN 
else:
  when SDL_KEYDOWN_renamed_SDL_EVENT_KEY_DOWN is static:
    const
      SDL_KEYDOWN* = SDL_KEYDOWN_renamed_SDL_EVENT_KEY_DOWN 
  else:
    let SDL_KEYDOWN* = SDL_KEYDOWN_renamed_SDL_EVENT_KEY_DOWN 
when SDL_KEYMAPCHANGED_renamed_SDL_EVENT_KEYMAP_CHANGED is typedesc:
  type
    SDL_KEYMAPCHANGED* = SDL_KEYMAPCHANGED_renamed_SDL_EVENT_KEYMAP_CHANGED 
else:
  when SDL_KEYMAPCHANGED_renamed_SDL_EVENT_KEYMAP_CHANGED is static:
    const
      SDL_KEYMAPCHANGED* = SDL_KEYMAPCHANGED_renamed_SDL_EVENT_KEYMAP_CHANGED 
  else:
    let SDL_KEYMAPCHANGED* = SDL_KEYMAPCHANGED_renamed_SDL_EVENT_KEYMAP_CHANGED 
when SDL_KEYUP_renamed_SDL_EVENT_KEY_UP is typedesc:
  type
    SDL_KEYUP* = SDL_KEYUP_renamed_SDL_EVENT_KEY_UP 
else:
  when SDL_KEYUP_renamed_SDL_EVENT_KEY_UP is static:
    const
      SDL_KEYUP* = SDL_KEYUP_renamed_SDL_EVENT_KEY_UP 
  else:
    let SDL_KEYUP* = SDL_KEYUP_renamed_SDL_EVENT_KEY_UP 
when SDL_LASTEVENT_renamed_SDL_EVENT_LAST is typedesc:
  type
    SDL_LASTEVENT* = SDL_LASTEVENT_renamed_SDL_EVENT_LAST 
else:
  when SDL_LASTEVENT_renamed_SDL_EVENT_LAST is static:
    const
      SDL_LASTEVENT* = SDL_LASTEVENT_renamed_SDL_EVENT_LAST 
  else:
    let SDL_LASTEVENT* = SDL_LASTEVENT_renamed_SDL_EVENT_LAST 
when SDL_LOCALECHANGED_renamed_SDL_EVENT_LOCALE_CHANGED is typedesc:
  type
    SDL_LOCALECHANGED* = SDL_LOCALECHANGED_renamed_SDL_EVENT_LOCALE_CHANGED 
else:
  when SDL_LOCALECHANGED_renamed_SDL_EVENT_LOCALE_CHANGED is static:
    const
      SDL_LOCALECHANGED* = SDL_LOCALECHANGED_renamed_SDL_EVENT_LOCALE_CHANGED 
  else:
    let SDL_LOCALECHANGED* = SDL_LOCALECHANGED_renamed_SDL_EVENT_LOCALE_CHANGED 
when SDL_MOUSEBUTTONDOWN_renamed_SDL_EVENT_MOUSE_BUTTON_DOWN is typedesc:
  type
    SDL_MOUSEBUTTONDOWN* = SDL_MOUSEBUTTONDOWN_renamed_SDL_EVENT_MOUSE_BUTTON_DOWN 
else:
  when SDL_MOUSEBUTTONDOWN_renamed_SDL_EVENT_MOUSE_BUTTON_DOWN is static:
    const
      SDL_MOUSEBUTTONDOWN* = SDL_MOUSEBUTTONDOWN_renamed_SDL_EVENT_MOUSE_BUTTON_DOWN 
  else:
    let SDL_MOUSEBUTTONDOWN* = SDL_MOUSEBUTTONDOWN_renamed_SDL_EVENT_MOUSE_BUTTON_DOWN 
when SDL_MOUSEBUTTONUP_renamed_SDL_EVENT_MOUSE_BUTTON_UP is typedesc:
  type
    SDL_MOUSEBUTTONUP* = SDL_MOUSEBUTTONUP_renamed_SDL_EVENT_MOUSE_BUTTON_UP 
else:
  when SDL_MOUSEBUTTONUP_renamed_SDL_EVENT_MOUSE_BUTTON_UP is static:
    const
      SDL_MOUSEBUTTONUP* = SDL_MOUSEBUTTONUP_renamed_SDL_EVENT_MOUSE_BUTTON_UP 
  else:
    let SDL_MOUSEBUTTONUP* = SDL_MOUSEBUTTONUP_renamed_SDL_EVENT_MOUSE_BUTTON_UP 
when SDL_MOUSEMOTION_renamed_SDL_EVENT_MOUSE_MOTION is typedesc:
  type
    SDL_MOUSEMOTION* = SDL_MOUSEMOTION_renamed_SDL_EVENT_MOUSE_MOTION 
else:
  when SDL_MOUSEMOTION_renamed_SDL_EVENT_MOUSE_MOTION is static:
    const
      SDL_MOUSEMOTION* = SDL_MOUSEMOTION_renamed_SDL_EVENT_MOUSE_MOTION 
  else:
    let SDL_MOUSEMOTION* = SDL_MOUSEMOTION_renamed_SDL_EVENT_MOUSE_MOTION 
when SDL_MOUSEWHEEL_renamed_SDL_EVENT_MOUSE_WHEEL is typedesc:
  type
    SDL_MOUSEWHEEL* = SDL_MOUSEWHEEL_renamed_SDL_EVENT_MOUSE_WHEEL 
else:
  when SDL_MOUSEWHEEL_renamed_SDL_EVENT_MOUSE_WHEEL is static:
    const
      SDL_MOUSEWHEEL* = SDL_MOUSEWHEEL_renamed_SDL_EVENT_MOUSE_WHEEL 
  else:
    let SDL_MOUSEWHEEL* = SDL_MOUSEWHEEL_renamed_SDL_EVENT_MOUSE_WHEEL 
when SDL_POLLSENTINEL_renamed_SDL_EVENT_POLL_SENTINEL is typedesc:
  type
    SDL_POLLSENTINEL* = SDL_POLLSENTINEL_renamed_SDL_EVENT_POLL_SENTINEL 
else:
  when SDL_POLLSENTINEL_renamed_SDL_EVENT_POLL_SENTINEL is static:
    const
      SDL_POLLSENTINEL* = SDL_POLLSENTINEL_renamed_SDL_EVENT_POLL_SENTINEL 
  else:
    let SDL_POLLSENTINEL* = SDL_POLLSENTINEL_renamed_SDL_EVENT_POLL_SENTINEL 
when SDL_QUIT_renamed_SDL_EVENT_QUIT is typedesc:
  type
    SDL_QUIT* = SDL_QUIT_renamed_SDL_EVENT_QUIT 
else:
  when SDL_QUIT_renamed_SDL_EVENT_QUIT is static:
    const
      SDL_QUIT* = SDL_QUIT_renamed_SDL_EVENT_QUIT 
  else:
    let SDL_QUIT* = SDL_QUIT_renamed_SDL_EVENT_QUIT 
when SDL_RENDER_DEVICE_RESET_renamed_SDL_EVENT_RENDER_DEVICE_RESET is typedesc:
  type
    SDL_RENDER_DEVICE_RESET* = SDL_RENDER_DEVICE_RESET_renamed_SDL_EVENT_RENDER_DEVICE_RESET 
else:
  when SDL_RENDER_DEVICE_RESET_renamed_SDL_EVENT_RENDER_DEVICE_RESET is static:
    const
      SDL_RENDER_DEVICE_RESET* = SDL_RENDER_DEVICE_RESET_renamed_SDL_EVENT_RENDER_DEVICE_RESET 
  else:
    let SDL_RENDER_DEVICE_RESET* = SDL_RENDER_DEVICE_RESET_renamed_SDL_EVENT_RENDER_DEVICE_RESET 
when SDL_RENDER_TARGETS_RESET_renamed_SDL_EVENT_RENDER_TARGETS_RESET is typedesc:
  type
    SDL_RENDER_TARGETS_RESET* = SDL_RENDER_TARGETS_RESET_renamed_SDL_EVENT_RENDER_TARGETS_RESET 
else:
  when SDL_RENDER_TARGETS_RESET_renamed_SDL_EVENT_RENDER_TARGETS_RESET is static:
    const
      SDL_RENDER_TARGETS_RESET* = SDL_RENDER_TARGETS_RESET_renamed_SDL_EVENT_RENDER_TARGETS_RESET 
  else:
    let SDL_RENDER_TARGETS_RESET* = SDL_RENDER_TARGETS_RESET_renamed_SDL_EVENT_RENDER_TARGETS_RESET 
when SDL_SENSORUPDATE_renamed_SDL_EVENT_SENSOR_UPDATE is typedesc:
  type
    SDL_SENSORUPDATE* = SDL_SENSORUPDATE_renamed_SDL_EVENT_SENSOR_UPDATE 
else:
  when SDL_SENSORUPDATE_renamed_SDL_EVENT_SENSOR_UPDATE is static:
    const
      SDL_SENSORUPDATE* = SDL_SENSORUPDATE_renamed_SDL_EVENT_SENSOR_UPDATE 
  else:
    let SDL_SENSORUPDATE* = SDL_SENSORUPDATE_renamed_SDL_EVENT_SENSOR_UPDATE 
when SDL_TEXTEDITING_renamed_SDL_EVENT_TEXT_EDITING is typedesc:
  type
    SDL_TEXTEDITING* = SDL_TEXTEDITING_renamed_SDL_EVENT_TEXT_EDITING 
else:
  when SDL_TEXTEDITING_renamed_SDL_EVENT_TEXT_EDITING is static:
    const
      SDL_TEXTEDITING* = SDL_TEXTEDITING_renamed_SDL_EVENT_TEXT_EDITING 
  else:
    let SDL_TEXTEDITING* = SDL_TEXTEDITING_renamed_SDL_EVENT_TEXT_EDITING 
when SDL_TEXTEDITING_EXT_renamed_SDL_EVENT_TEXT_EDITING_EXT is typedesc:
  type
    SDL_TEXTEDITING_EXT* = SDL_TEXTEDITING_EXT_renamed_SDL_EVENT_TEXT_EDITING_EXT 
else:
  when SDL_TEXTEDITING_EXT_renamed_SDL_EVENT_TEXT_EDITING_EXT is static:
    const
      SDL_TEXTEDITING_EXT* = SDL_TEXTEDITING_EXT_renamed_SDL_EVENT_TEXT_EDITING_EXT 
  else:
    let SDL_TEXTEDITING_EXT* = SDL_TEXTEDITING_EXT_renamed_SDL_EVENT_TEXT_EDITING_EXT 
when SDL_TEXTINPUT_renamed_SDL_EVENT_TEXT_INPUT is typedesc:
  type
    SDL_TEXTINPUT* = SDL_TEXTINPUT_renamed_SDL_EVENT_TEXT_INPUT 
else:
  when SDL_TEXTINPUT_renamed_SDL_EVENT_TEXT_INPUT is static:
    const
      SDL_TEXTINPUT* = SDL_TEXTINPUT_renamed_SDL_EVENT_TEXT_INPUT 
  else:
    let SDL_TEXTINPUT* = SDL_TEXTINPUT_renamed_SDL_EVENT_TEXT_INPUT 
when SDL_USEREVENT_renamed_SDL_EVENT_USER is typedesc:
  type
    SDL_USEREVENT* = SDL_USEREVENT_renamed_SDL_EVENT_USER 
else:
  when SDL_USEREVENT_renamed_SDL_EVENT_USER is static:
    const
      SDL_USEREVENT* = SDL_USEREVENT_renamed_SDL_EVENT_USER 
  else:
    let SDL_USEREVENT* = SDL_USEREVENT_renamed_SDL_EVENT_USER 
when SDL_WINDOWEVENT_CLOSE_renamed_SDL_EVENT_WINDOW_CLOSE_REQUESTED is typedesc:
  type
    SDL_WINDOWEVENT_CLOSE* = SDL_WINDOWEVENT_CLOSE_renamed_SDL_EVENT_WINDOW_CLOSE_REQUESTED 
else:
  when SDL_WINDOWEVENT_CLOSE_renamed_SDL_EVENT_WINDOW_CLOSE_REQUESTED is static:
    const
      SDL_WINDOWEVENT_CLOSE* = SDL_WINDOWEVENT_CLOSE_renamed_SDL_EVENT_WINDOW_CLOSE_REQUESTED 
  else:
    let SDL_WINDOWEVENT_CLOSE* = SDL_WINDOWEVENT_CLOSE_renamed_SDL_EVENT_WINDOW_CLOSE_REQUESTED 
when SDL_WINDOWEVENT_DISPLAY_CHANGED_renamed_SDL_EVENT_WINDOW_DISPLAY_CHANGED is
    typedesc:
  type
    SDL_WINDOWEVENT_DISPLAY_CHANGED* = SDL_WINDOWEVENT_DISPLAY_CHANGED_renamed_SDL_EVENT_WINDOW_DISPLAY_CHANGED 
else:
  when SDL_WINDOWEVENT_DISPLAY_CHANGED_renamed_SDL_EVENT_WINDOW_DISPLAY_CHANGED is
      static:
    const
      SDL_WINDOWEVENT_DISPLAY_CHANGED* = SDL_WINDOWEVENT_DISPLAY_CHANGED_renamed_SDL_EVENT_WINDOW_DISPLAY_CHANGED 
  else:
    let SDL_WINDOWEVENT_DISPLAY_CHANGED* = SDL_WINDOWEVENT_DISPLAY_CHANGED_renamed_SDL_EVENT_WINDOW_DISPLAY_CHANGED 
when SDL_WINDOWEVENT_ENTER_renamed_SDL_EVENT_WINDOW_MOUSE_ENTER is typedesc:
  type
    SDL_WINDOWEVENT_ENTER* = SDL_WINDOWEVENT_ENTER_renamed_SDL_EVENT_WINDOW_MOUSE_ENTER 
else:
  when SDL_WINDOWEVENT_ENTER_renamed_SDL_EVENT_WINDOW_MOUSE_ENTER is static:
    const
      SDL_WINDOWEVENT_ENTER* = SDL_WINDOWEVENT_ENTER_renamed_SDL_EVENT_WINDOW_MOUSE_ENTER 
  else:
    let SDL_WINDOWEVENT_ENTER* = SDL_WINDOWEVENT_ENTER_renamed_SDL_EVENT_WINDOW_MOUSE_ENTER 
when SDL_WINDOWEVENT_EXPOSED_renamed_SDL_EVENT_WINDOW_EXPOSED is typedesc:
  type
    SDL_WINDOWEVENT_EXPOSED* = SDL_WINDOWEVENT_EXPOSED_renamed_SDL_EVENT_WINDOW_EXPOSED 
else:
  when SDL_WINDOWEVENT_EXPOSED_renamed_SDL_EVENT_WINDOW_EXPOSED is static:
    const
      SDL_WINDOWEVENT_EXPOSED* = SDL_WINDOWEVENT_EXPOSED_renamed_SDL_EVENT_WINDOW_EXPOSED 
  else:
    let SDL_WINDOWEVENT_EXPOSED* = SDL_WINDOWEVENT_EXPOSED_renamed_SDL_EVENT_WINDOW_EXPOSED 
when SDL_WINDOWEVENT_FOCUS_GAINED_renamed_SDL_EVENT_WINDOW_FOCUS_GAINED is
    typedesc:
  type
    SDL_WINDOWEVENT_FOCUS_GAINED* = SDL_WINDOWEVENT_FOCUS_GAINED_renamed_SDL_EVENT_WINDOW_FOCUS_GAINED 
else:
  when SDL_WINDOWEVENT_FOCUS_GAINED_renamed_SDL_EVENT_WINDOW_FOCUS_GAINED is
      static:
    const
      SDL_WINDOWEVENT_FOCUS_GAINED* = SDL_WINDOWEVENT_FOCUS_GAINED_renamed_SDL_EVENT_WINDOW_FOCUS_GAINED 
  else:
    let SDL_WINDOWEVENT_FOCUS_GAINED* = SDL_WINDOWEVENT_FOCUS_GAINED_renamed_SDL_EVENT_WINDOW_FOCUS_GAINED 
when SDL_WINDOWEVENT_FOCUS_LOST_renamed_SDL_EVENT_WINDOW_FOCUS_LOST is typedesc:
  type
    SDL_WINDOWEVENT_FOCUS_LOST* = SDL_WINDOWEVENT_FOCUS_LOST_renamed_SDL_EVENT_WINDOW_FOCUS_LOST 
else:
  when SDL_WINDOWEVENT_FOCUS_LOST_renamed_SDL_EVENT_WINDOW_FOCUS_LOST is static:
    const
      SDL_WINDOWEVENT_FOCUS_LOST* = SDL_WINDOWEVENT_FOCUS_LOST_renamed_SDL_EVENT_WINDOW_FOCUS_LOST 
  else:
    let SDL_WINDOWEVENT_FOCUS_LOST* = SDL_WINDOWEVENT_FOCUS_LOST_renamed_SDL_EVENT_WINDOW_FOCUS_LOST 
when SDL_WINDOWEVENT_HIDDEN_renamed_SDL_EVENT_WINDOW_HIDDEN is typedesc:
  type
    SDL_WINDOWEVENT_HIDDEN* = SDL_WINDOWEVENT_HIDDEN_renamed_SDL_EVENT_WINDOW_HIDDEN 
else:
  when SDL_WINDOWEVENT_HIDDEN_renamed_SDL_EVENT_WINDOW_HIDDEN is static:
    const
      SDL_WINDOWEVENT_HIDDEN* = SDL_WINDOWEVENT_HIDDEN_renamed_SDL_EVENT_WINDOW_HIDDEN 
  else:
    let SDL_WINDOWEVENT_HIDDEN* = SDL_WINDOWEVENT_HIDDEN_renamed_SDL_EVENT_WINDOW_HIDDEN 
when SDL_WINDOWEVENT_HIT_TEST_renamed_SDL_EVENT_WINDOW_HIT_TEST is typedesc:
  type
    SDL_WINDOWEVENT_HIT_TEST* = SDL_WINDOWEVENT_HIT_TEST_renamed_SDL_EVENT_WINDOW_HIT_TEST 
else:
  when SDL_WINDOWEVENT_HIT_TEST_renamed_SDL_EVENT_WINDOW_HIT_TEST is static:
    const
      SDL_WINDOWEVENT_HIT_TEST* = SDL_WINDOWEVENT_HIT_TEST_renamed_SDL_EVENT_WINDOW_HIT_TEST 
  else:
    let SDL_WINDOWEVENT_HIT_TEST* = SDL_WINDOWEVENT_HIT_TEST_renamed_SDL_EVENT_WINDOW_HIT_TEST 
when SDL_WINDOWEVENT_ICCPROF_CHANGED_renamed_SDL_EVENT_WINDOW_ICCPROF_CHANGED is
    typedesc:
  type
    SDL_WINDOWEVENT_ICCPROF_CHANGED* = SDL_WINDOWEVENT_ICCPROF_CHANGED_renamed_SDL_EVENT_WINDOW_ICCPROF_CHANGED 
else:
  when SDL_WINDOWEVENT_ICCPROF_CHANGED_renamed_SDL_EVENT_WINDOW_ICCPROF_CHANGED is
      static:
    const
      SDL_WINDOWEVENT_ICCPROF_CHANGED* = SDL_WINDOWEVENT_ICCPROF_CHANGED_renamed_SDL_EVENT_WINDOW_ICCPROF_CHANGED 
  else:
    let SDL_WINDOWEVENT_ICCPROF_CHANGED* = SDL_WINDOWEVENT_ICCPROF_CHANGED_renamed_SDL_EVENT_WINDOW_ICCPROF_CHANGED 
when SDL_WINDOWEVENT_LEAVE_renamed_SDL_EVENT_WINDOW_MOUSE_LEAVE is typedesc:
  type
    SDL_WINDOWEVENT_LEAVE* = SDL_WINDOWEVENT_LEAVE_renamed_SDL_EVENT_WINDOW_MOUSE_LEAVE 
else:
  when SDL_WINDOWEVENT_LEAVE_renamed_SDL_EVENT_WINDOW_MOUSE_LEAVE is static:
    const
      SDL_WINDOWEVENT_LEAVE* = SDL_WINDOWEVENT_LEAVE_renamed_SDL_EVENT_WINDOW_MOUSE_LEAVE 
  else:
    let SDL_WINDOWEVENT_LEAVE* = SDL_WINDOWEVENT_LEAVE_renamed_SDL_EVENT_WINDOW_MOUSE_LEAVE 
when SDL_WINDOWEVENT_MAXIMIZED_renamed_SDL_EVENT_WINDOW_MAXIMIZED is typedesc:
  type
    SDL_WINDOWEVENT_MAXIMIZED* = SDL_WINDOWEVENT_MAXIMIZED_renamed_SDL_EVENT_WINDOW_MAXIMIZED 
else:
  when SDL_WINDOWEVENT_MAXIMIZED_renamed_SDL_EVENT_WINDOW_MAXIMIZED is static:
    const
      SDL_WINDOWEVENT_MAXIMIZED* = SDL_WINDOWEVENT_MAXIMIZED_renamed_SDL_EVENT_WINDOW_MAXIMIZED 
  else:
    let SDL_WINDOWEVENT_MAXIMIZED* = SDL_WINDOWEVENT_MAXIMIZED_renamed_SDL_EVENT_WINDOW_MAXIMIZED 
when SDL_WINDOWEVENT_MINIMIZED_renamed_SDL_EVENT_WINDOW_MINIMIZED is typedesc:
  type
    SDL_WINDOWEVENT_MINIMIZED* = SDL_WINDOWEVENT_MINIMIZED_renamed_SDL_EVENT_WINDOW_MINIMIZED 
else:
  when SDL_WINDOWEVENT_MINIMIZED_renamed_SDL_EVENT_WINDOW_MINIMIZED is static:
    const
      SDL_WINDOWEVENT_MINIMIZED* = SDL_WINDOWEVENT_MINIMIZED_renamed_SDL_EVENT_WINDOW_MINIMIZED 
  else:
    let SDL_WINDOWEVENT_MINIMIZED* = SDL_WINDOWEVENT_MINIMIZED_renamed_SDL_EVENT_WINDOW_MINIMIZED 
when SDL_WINDOWEVENT_MOVED_renamed_SDL_EVENT_WINDOW_MOVED is typedesc:
  type
    SDL_WINDOWEVENT_MOVED* = SDL_WINDOWEVENT_MOVED_renamed_SDL_EVENT_WINDOW_MOVED 
else:
  when SDL_WINDOWEVENT_MOVED_renamed_SDL_EVENT_WINDOW_MOVED is static:
    const
      SDL_WINDOWEVENT_MOVED* = SDL_WINDOWEVENT_MOVED_renamed_SDL_EVENT_WINDOW_MOVED 
  else:
    let SDL_WINDOWEVENT_MOVED* = SDL_WINDOWEVENT_MOVED_renamed_SDL_EVENT_WINDOW_MOVED 
when SDL_WINDOWEVENT_RESIZED_renamed_SDL_EVENT_WINDOW_RESIZED is typedesc:
  type
    SDL_WINDOWEVENT_RESIZED* = SDL_WINDOWEVENT_RESIZED_renamed_SDL_EVENT_WINDOW_RESIZED 
else:
  when SDL_WINDOWEVENT_RESIZED_renamed_SDL_EVENT_WINDOW_RESIZED is static:
    const
      SDL_WINDOWEVENT_RESIZED* = SDL_WINDOWEVENT_RESIZED_renamed_SDL_EVENT_WINDOW_RESIZED 
  else:
    let SDL_WINDOWEVENT_RESIZED* = SDL_WINDOWEVENT_RESIZED_renamed_SDL_EVENT_WINDOW_RESIZED 
when SDL_WINDOWEVENT_RESTORED_renamed_SDL_EVENT_WINDOW_RESTORED is typedesc:
  type
    SDL_WINDOWEVENT_RESTORED* = SDL_WINDOWEVENT_RESTORED_renamed_SDL_EVENT_WINDOW_RESTORED 
else:
  when SDL_WINDOWEVENT_RESTORED_renamed_SDL_EVENT_WINDOW_RESTORED is static:
    const
      SDL_WINDOWEVENT_RESTORED* = SDL_WINDOWEVENT_RESTORED_renamed_SDL_EVENT_WINDOW_RESTORED 
  else:
    let SDL_WINDOWEVENT_RESTORED* = SDL_WINDOWEVENT_RESTORED_renamed_SDL_EVENT_WINDOW_RESTORED 
when SDL_WINDOWEVENT_SHOWN_renamed_SDL_EVENT_WINDOW_SHOWN is typedesc:
  type
    SDL_WINDOWEVENT_SHOWN* = SDL_WINDOWEVENT_SHOWN_renamed_SDL_EVENT_WINDOW_SHOWN 
else:
  when SDL_WINDOWEVENT_SHOWN_renamed_SDL_EVENT_WINDOW_SHOWN is static:
    const
      SDL_WINDOWEVENT_SHOWN* = SDL_WINDOWEVENT_SHOWN_renamed_SDL_EVENT_WINDOW_SHOWN 
  else:
    let SDL_WINDOWEVENT_SHOWN* = SDL_WINDOWEVENT_SHOWN_renamed_SDL_EVENT_WINDOW_SHOWN 
when SDL_WINDOWEVENT_SIZE_CHANGED_renamed_SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED is
    typedesc:
  type
    SDL_WINDOWEVENT_SIZE_CHANGED* = SDL_WINDOWEVENT_SIZE_CHANGED_renamed_SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED 
else:
  when SDL_WINDOWEVENT_SIZE_CHANGED_renamed_SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED is
      static:
    const
      SDL_WINDOWEVENT_SIZE_CHANGED* = SDL_WINDOWEVENT_SIZE_CHANGED_renamed_SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED 
  else:
    let SDL_WINDOWEVENT_SIZE_CHANGED* = SDL_WINDOWEVENT_SIZE_CHANGED_renamed_SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED 
when SDL_eventaction_renamed_SDL_EventAction is typedesc:
  type
    SDL_eventaction* = SDL_eventaction_renamed_SDL_EventAction 
else:
  when SDL_eventaction_renamed_SDL_EventAction is static:
    const
      SDL_eventaction* = SDL_eventaction_renamed_SDL_EventAction 
  else:
    let SDL_eventaction* = SDL_eventaction_renamed_SDL_EventAction 
when SDL_CONTROLLER_AXIS_INVALID_renamed_SDL_GAMEPAD_AXIS_INVALID is typedesc:
  type
    SDL_CONTROLLER_AXIS_INVALID* = SDL_CONTROLLER_AXIS_INVALID_renamed_SDL_GAMEPAD_AXIS_INVALID 
else:
  when SDL_CONTROLLER_AXIS_INVALID_renamed_SDL_GAMEPAD_AXIS_INVALID is static:
    const
      SDL_CONTROLLER_AXIS_INVALID* = SDL_CONTROLLER_AXIS_INVALID_renamed_SDL_GAMEPAD_AXIS_INVALID 
  else:
    let SDL_CONTROLLER_AXIS_INVALID* = SDL_CONTROLLER_AXIS_INVALID_renamed_SDL_GAMEPAD_AXIS_INVALID 
when SDL_CONTROLLER_AXIS_LEFTX_renamed_SDL_GAMEPAD_AXIS_LEFTX is typedesc:
  type
    SDL_CONTROLLER_AXIS_LEFTX* = SDL_CONTROLLER_AXIS_LEFTX_renamed_SDL_GAMEPAD_AXIS_LEFTX 
else:
  when SDL_CONTROLLER_AXIS_LEFTX_renamed_SDL_GAMEPAD_AXIS_LEFTX is static:
    const
      SDL_CONTROLLER_AXIS_LEFTX* = SDL_CONTROLLER_AXIS_LEFTX_renamed_SDL_GAMEPAD_AXIS_LEFTX 
  else:
    let SDL_CONTROLLER_AXIS_LEFTX* = SDL_CONTROLLER_AXIS_LEFTX_renamed_SDL_GAMEPAD_AXIS_LEFTX 
when SDL_CONTROLLER_AXIS_LEFTY_renamed_SDL_GAMEPAD_AXIS_LEFTY is typedesc:
  type
    SDL_CONTROLLER_AXIS_LEFTY* = SDL_CONTROLLER_AXIS_LEFTY_renamed_SDL_GAMEPAD_AXIS_LEFTY 
else:
  when SDL_CONTROLLER_AXIS_LEFTY_renamed_SDL_GAMEPAD_AXIS_LEFTY is static:
    const
      SDL_CONTROLLER_AXIS_LEFTY* = SDL_CONTROLLER_AXIS_LEFTY_renamed_SDL_GAMEPAD_AXIS_LEFTY 
  else:
    let SDL_CONTROLLER_AXIS_LEFTY* = SDL_CONTROLLER_AXIS_LEFTY_renamed_SDL_GAMEPAD_AXIS_LEFTY 
when SDL_CONTROLLER_AXIS_MAX_renamed_SDL_GAMEPAD_AXIS_COUNT is typedesc:
  type
    SDL_CONTROLLER_AXIS_MAX* = SDL_CONTROLLER_AXIS_MAX_renamed_SDL_GAMEPAD_AXIS_COUNT 
else:
  when SDL_CONTROLLER_AXIS_MAX_renamed_SDL_GAMEPAD_AXIS_COUNT is static:
    const
      SDL_CONTROLLER_AXIS_MAX* = SDL_CONTROLLER_AXIS_MAX_renamed_SDL_GAMEPAD_AXIS_COUNT 
  else:
    let SDL_CONTROLLER_AXIS_MAX* = SDL_CONTROLLER_AXIS_MAX_renamed_SDL_GAMEPAD_AXIS_COUNT 
when SDL_CONTROLLER_AXIS_RIGHTX_renamed_SDL_GAMEPAD_AXIS_RIGHTX is typedesc:
  type
    SDL_CONTROLLER_AXIS_RIGHTX* = SDL_CONTROLLER_AXIS_RIGHTX_renamed_SDL_GAMEPAD_AXIS_RIGHTX 
else:
  when SDL_CONTROLLER_AXIS_RIGHTX_renamed_SDL_GAMEPAD_AXIS_RIGHTX is static:
    const
      SDL_CONTROLLER_AXIS_RIGHTX* = SDL_CONTROLLER_AXIS_RIGHTX_renamed_SDL_GAMEPAD_AXIS_RIGHTX 
  else:
    let SDL_CONTROLLER_AXIS_RIGHTX* = SDL_CONTROLLER_AXIS_RIGHTX_renamed_SDL_GAMEPAD_AXIS_RIGHTX 
when SDL_CONTROLLER_AXIS_RIGHTY_renamed_SDL_GAMEPAD_AXIS_RIGHTY is typedesc:
  type
    SDL_CONTROLLER_AXIS_RIGHTY* = SDL_CONTROLLER_AXIS_RIGHTY_renamed_SDL_GAMEPAD_AXIS_RIGHTY 
else:
  when SDL_CONTROLLER_AXIS_RIGHTY_renamed_SDL_GAMEPAD_AXIS_RIGHTY is static:
    const
      SDL_CONTROLLER_AXIS_RIGHTY* = SDL_CONTROLLER_AXIS_RIGHTY_renamed_SDL_GAMEPAD_AXIS_RIGHTY 
  else:
    let SDL_CONTROLLER_AXIS_RIGHTY* = SDL_CONTROLLER_AXIS_RIGHTY_renamed_SDL_GAMEPAD_AXIS_RIGHTY 
when SDL_CONTROLLER_AXIS_TRIGGERLEFT_renamed_SDL_GAMEPAD_AXIS_LEFT_TRIGGER is
    typedesc:
  type
    SDL_CONTROLLER_AXIS_TRIGGERLEFT* = SDL_CONTROLLER_AXIS_TRIGGERLEFT_renamed_SDL_GAMEPAD_AXIS_LEFT_TRIGGER 
else:
  when SDL_CONTROLLER_AXIS_TRIGGERLEFT_renamed_SDL_GAMEPAD_AXIS_LEFT_TRIGGER is
      static:
    const
      SDL_CONTROLLER_AXIS_TRIGGERLEFT* = SDL_CONTROLLER_AXIS_TRIGGERLEFT_renamed_SDL_GAMEPAD_AXIS_LEFT_TRIGGER 
  else:
    let SDL_CONTROLLER_AXIS_TRIGGERLEFT* = SDL_CONTROLLER_AXIS_TRIGGERLEFT_renamed_SDL_GAMEPAD_AXIS_LEFT_TRIGGER 
when SDL_CONTROLLER_AXIS_TRIGGERRIGHT_renamed_SDL_GAMEPAD_AXIS_RIGHT_TRIGGER is
    typedesc:
  type
    SDL_CONTROLLER_AXIS_TRIGGERRIGHT* = SDL_CONTROLLER_AXIS_TRIGGERRIGHT_renamed_SDL_GAMEPAD_AXIS_RIGHT_TRIGGER 
else:
  when SDL_CONTROLLER_AXIS_TRIGGERRIGHT_renamed_SDL_GAMEPAD_AXIS_RIGHT_TRIGGER is
      static:
    const
      SDL_CONTROLLER_AXIS_TRIGGERRIGHT* = SDL_CONTROLLER_AXIS_TRIGGERRIGHT_renamed_SDL_GAMEPAD_AXIS_RIGHT_TRIGGER 
  else:
    let SDL_CONTROLLER_AXIS_TRIGGERRIGHT* = SDL_CONTROLLER_AXIS_TRIGGERRIGHT_renamed_SDL_GAMEPAD_AXIS_RIGHT_TRIGGER 
when SDL_CONTROLLER_BINDTYPE_AXIS_renamed_SDL_GAMEPAD_BINDTYPE_AXIS is typedesc:
  type
    SDL_CONTROLLER_BINDTYPE_AXIS* = SDL_CONTROLLER_BINDTYPE_AXIS_renamed_SDL_GAMEPAD_BINDTYPE_AXIS 
else:
  when SDL_CONTROLLER_BINDTYPE_AXIS_renamed_SDL_GAMEPAD_BINDTYPE_AXIS is static:
    const
      SDL_CONTROLLER_BINDTYPE_AXIS* = SDL_CONTROLLER_BINDTYPE_AXIS_renamed_SDL_GAMEPAD_BINDTYPE_AXIS 
  else:
    let SDL_CONTROLLER_BINDTYPE_AXIS* = SDL_CONTROLLER_BINDTYPE_AXIS_renamed_SDL_GAMEPAD_BINDTYPE_AXIS 
when SDL_CONTROLLER_BINDTYPE_BUTTON_renamed_SDL_GAMEPAD_BINDTYPE_BUTTON is
    typedesc:
  type
    SDL_CONTROLLER_BINDTYPE_BUTTON* = SDL_CONTROLLER_BINDTYPE_BUTTON_renamed_SDL_GAMEPAD_BINDTYPE_BUTTON 
else:
  when SDL_CONTROLLER_BINDTYPE_BUTTON_renamed_SDL_GAMEPAD_BINDTYPE_BUTTON is
      static:
    const
      SDL_CONTROLLER_BINDTYPE_BUTTON* = SDL_CONTROLLER_BINDTYPE_BUTTON_renamed_SDL_GAMEPAD_BINDTYPE_BUTTON 
  else:
    let SDL_CONTROLLER_BINDTYPE_BUTTON* = SDL_CONTROLLER_BINDTYPE_BUTTON_renamed_SDL_GAMEPAD_BINDTYPE_BUTTON 
when SDL_CONTROLLER_BINDTYPE_HAT_renamed_SDL_GAMEPAD_BINDTYPE_HAT is typedesc:
  type
    SDL_CONTROLLER_BINDTYPE_HAT* = SDL_CONTROLLER_BINDTYPE_HAT_renamed_SDL_GAMEPAD_BINDTYPE_HAT 
else:
  when SDL_CONTROLLER_BINDTYPE_HAT_renamed_SDL_GAMEPAD_BINDTYPE_HAT is static:
    const
      SDL_CONTROLLER_BINDTYPE_HAT* = SDL_CONTROLLER_BINDTYPE_HAT_renamed_SDL_GAMEPAD_BINDTYPE_HAT 
  else:
    let SDL_CONTROLLER_BINDTYPE_HAT* = SDL_CONTROLLER_BINDTYPE_HAT_renamed_SDL_GAMEPAD_BINDTYPE_HAT 
when SDL_CONTROLLER_BINDTYPE_NONE_renamed_SDL_GAMEPAD_BINDTYPE_NONE is typedesc:
  type
    SDL_CONTROLLER_BINDTYPE_NONE* = SDL_CONTROLLER_BINDTYPE_NONE_renamed_SDL_GAMEPAD_BINDTYPE_NONE 
else:
  when SDL_CONTROLLER_BINDTYPE_NONE_renamed_SDL_GAMEPAD_BINDTYPE_NONE is static:
    const
      SDL_CONTROLLER_BINDTYPE_NONE* = SDL_CONTROLLER_BINDTYPE_NONE_renamed_SDL_GAMEPAD_BINDTYPE_NONE 
  else:
    let SDL_CONTROLLER_BINDTYPE_NONE* = SDL_CONTROLLER_BINDTYPE_NONE_renamed_SDL_GAMEPAD_BINDTYPE_NONE 
when SDL_CONTROLLER_BUTTON_A_renamed_SDL_GAMEPAD_BUTTON_SOUTH is typedesc:
  type
    SDL_CONTROLLER_BUTTON_A* = SDL_CONTROLLER_BUTTON_A_renamed_SDL_GAMEPAD_BUTTON_SOUTH 
else:
  when SDL_CONTROLLER_BUTTON_A_renamed_SDL_GAMEPAD_BUTTON_SOUTH is static:
    const
      SDL_CONTROLLER_BUTTON_A* = SDL_CONTROLLER_BUTTON_A_renamed_SDL_GAMEPAD_BUTTON_SOUTH 
  else:
    let SDL_CONTROLLER_BUTTON_A* = SDL_CONTROLLER_BUTTON_A_renamed_SDL_GAMEPAD_BUTTON_SOUTH 
when SDL_CONTROLLER_BUTTON_B_renamed_SDL_GAMEPAD_BUTTON_EAST is typedesc:
  type
    SDL_CONTROLLER_BUTTON_B* = SDL_CONTROLLER_BUTTON_B_renamed_SDL_GAMEPAD_BUTTON_EAST 
else:
  when SDL_CONTROLLER_BUTTON_B_renamed_SDL_GAMEPAD_BUTTON_EAST is static:
    const
      SDL_CONTROLLER_BUTTON_B* = SDL_CONTROLLER_BUTTON_B_renamed_SDL_GAMEPAD_BUTTON_EAST 
  else:
    let SDL_CONTROLLER_BUTTON_B* = SDL_CONTROLLER_BUTTON_B_renamed_SDL_GAMEPAD_BUTTON_EAST 
when SDL_CONTROLLER_BUTTON_BACK_renamed_SDL_GAMEPAD_BUTTON_BACK is typedesc:
  type
    SDL_CONTROLLER_BUTTON_BACK* = SDL_CONTROLLER_BUTTON_BACK_renamed_SDL_GAMEPAD_BUTTON_BACK 
else:
  when SDL_CONTROLLER_BUTTON_BACK_renamed_SDL_GAMEPAD_BUTTON_BACK is static:
    const
      SDL_CONTROLLER_BUTTON_BACK* = SDL_CONTROLLER_BUTTON_BACK_renamed_SDL_GAMEPAD_BUTTON_BACK 
  else:
    let SDL_CONTROLLER_BUTTON_BACK* = SDL_CONTROLLER_BUTTON_BACK_renamed_SDL_GAMEPAD_BUTTON_BACK 
when SDL_CONTROLLER_BUTTON_DPAD_DOWN_renamed_SDL_GAMEPAD_BUTTON_DPAD_DOWN is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_DPAD_DOWN* = SDL_CONTROLLER_BUTTON_DPAD_DOWN_renamed_SDL_GAMEPAD_BUTTON_DPAD_DOWN 
else:
  when SDL_CONTROLLER_BUTTON_DPAD_DOWN_renamed_SDL_GAMEPAD_BUTTON_DPAD_DOWN is
      static:
    const
      SDL_CONTROLLER_BUTTON_DPAD_DOWN* = SDL_CONTROLLER_BUTTON_DPAD_DOWN_renamed_SDL_GAMEPAD_BUTTON_DPAD_DOWN 
  else:
    let SDL_CONTROLLER_BUTTON_DPAD_DOWN* = SDL_CONTROLLER_BUTTON_DPAD_DOWN_renamed_SDL_GAMEPAD_BUTTON_DPAD_DOWN 
when SDL_CONTROLLER_BUTTON_DPAD_LEFT_renamed_SDL_GAMEPAD_BUTTON_DPAD_LEFT is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_DPAD_LEFT* = SDL_CONTROLLER_BUTTON_DPAD_LEFT_renamed_SDL_GAMEPAD_BUTTON_DPAD_LEFT 
else:
  when SDL_CONTROLLER_BUTTON_DPAD_LEFT_renamed_SDL_GAMEPAD_BUTTON_DPAD_LEFT is
      static:
    const
      SDL_CONTROLLER_BUTTON_DPAD_LEFT* = SDL_CONTROLLER_BUTTON_DPAD_LEFT_renamed_SDL_GAMEPAD_BUTTON_DPAD_LEFT 
  else:
    let SDL_CONTROLLER_BUTTON_DPAD_LEFT* = SDL_CONTROLLER_BUTTON_DPAD_LEFT_renamed_SDL_GAMEPAD_BUTTON_DPAD_LEFT 
when SDL_CONTROLLER_BUTTON_DPAD_RIGHT_renamed_SDL_GAMEPAD_BUTTON_DPAD_RIGHT is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_DPAD_RIGHT* = SDL_CONTROLLER_BUTTON_DPAD_RIGHT_renamed_SDL_GAMEPAD_BUTTON_DPAD_RIGHT 
else:
  when SDL_CONTROLLER_BUTTON_DPAD_RIGHT_renamed_SDL_GAMEPAD_BUTTON_DPAD_RIGHT is
      static:
    const
      SDL_CONTROLLER_BUTTON_DPAD_RIGHT* = SDL_CONTROLLER_BUTTON_DPAD_RIGHT_renamed_SDL_GAMEPAD_BUTTON_DPAD_RIGHT 
  else:
    let SDL_CONTROLLER_BUTTON_DPAD_RIGHT* = SDL_CONTROLLER_BUTTON_DPAD_RIGHT_renamed_SDL_GAMEPAD_BUTTON_DPAD_RIGHT 
when SDL_CONTROLLER_BUTTON_DPAD_UP_renamed_SDL_GAMEPAD_BUTTON_DPAD_UP is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_DPAD_UP* = SDL_CONTROLLER_BUTTON_DPAD_UP_renamed_SDL_GAMEPAD_BUTTON_DPAD_UP 
else:
  when SDL_CONTROLLER_BUTTON_DPAD_UP_renamed_SDL_GAMEPAD_BUTTON_DPAD_UP is
      static:
    const
      SDL_CONTROLLER_BUTTON_DPAD_UP* = SDL_CONTROLLER_BUTTON_DPAD_UP_renamed_SDL_GAMEPAD_BUTTON_DPAD_UP 
  else:
    let SDL_CONTROLLER_BUTTON_DPAD_UP* = SDL_CONTROLLER_BUTTON_DPAD_UP_renamed_SDL_GAMEPAD_BUTTON_DPAD_UP 
when SDL_CONTROLLER_BUTTON_GUIDE_renamed_SDL_GAMEPAD_BUTTON_GUIDE is typedesc:
  type
    SDL_CONTROLLER_BUTTON_GUIDE* = SDL_CONTROLLER_BUTTON_GUIDE_renamed_SDL_GAMEPAD_BUTTON_GUIDE 
else:
  when SDL_CONTROLLER_BUTTON_GUIDE_renamed_SDL_GAMEPAD_BUTTON_GUIDE is static:
    const
      SDL_CONTROLLER_BUTTON_GUIDE* = SDL_CONTROLLER_BUTTON_GUIDE_renamed_SDL_GAMEPAD_BUTTON_GUIDE 
  else:
    let SDL_CONTROLLER_BUTTON_GUIDE* = SDL_CONTROLLER_BUTTON_GUIDE_renamed_SDL_GAMEPAD_BUTTON_GUIDE 
when SDL_CONTROLLER_BUTTON_INVALID_renamed_SDL_GAMEPAD_BUTTON_INVALID is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_INVALID* = SDL_CONTROLLER_BUTTON_INVALID_renamed_SDL_GAMEPAD_BUTTON_INVALID 
else:
  when SDL_CONTROLLER_BUTTON_INVALID_renamed_SDL_GAMEPAD_BUTTON_INVALID is
      static:
    const
      SDL_CONTROLLER_BUTTON_INVALID* = SDL_CONTROLLER_BUTTON_INVALID_renamed_SDL_GAMEPAD_BUTTON_INVALID 
  else:
    let SDL_CONTROLLER_BUTTON_INVALID* = SDL_CONTROLLER_BUTTON_INVALID_renamed_SDL_GAMEPAD_BUTTON_INVALID 
when SDL_CONTROLLER_BUTTON_LEFTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_LEFT_SHOULDER is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_LEFTSHOULDER* = SDL_CONTROLLER_BUTTON_LEFTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_LEFT_SHOULDER 
else:
  when SDL_CONTROLLER_BUTTON_LEFTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_LEFT_SHOULDER is
      static:
    const
      SDL_CONTROLLER_BUTTON_LEFTSHOULDER* = SDL_CONTROLLER_BUTTON_LEFTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_LEFT_SHOULDER 
  else:
    let SDL_CONTROLLER_BUTTON_LEFTSHOULDER* = SDL_CONTROLLER_BUTTON_LEFTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_LEFT_SHOULDER 
when SDL_CONTROLLER_BUTTON_LEFTSTICK_renamed_SDL_GAMEPAD_BUTTON_LEFT_STICK is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_LEFTSTICK* = SDL_CONTROLLER_BUTTON_LEFTSTICK_renamed_SDL_GAMEPAD_BUTTON_LEFT_STICK 
else:
  when SDL_CONTROLLER_BUTTON_LEFTSTICK_renamed_SDL_GAMEPAD_BUTTON_LEFT_STICK is
      static:
    const
      SDL_CONTROLLER_BUTTON_LEFTSTICK* = SDL_CONTROLLER_BUTTON_LEFTSTICK_renamed_SDL_GAMEPAD_BUTTON_LEFT_STICK 
  else:
    let SDL_CONTROLLER_BUTTON_LEFTSTICK* = SDL_CONTROLLER_BUTTON_LEFTSTICK_renamed_SDL_GAMEPAD_BUTTON_LEFT_STICK 
when SDL_CONTROLLER_BUTTON_MAX_renamed_SDL_GAMEPAD_BUTTON_COUNT is typedesc:
  type
    SDL_CONTROLLER_BUTTON_MAX* = SDL_CONTROLLER_BUTTON_MAX_renamed_SDL_GAMEPAD_BUTTON_COUNT 
else:
  when SDL_CONTROLLER_BUTTON_MAX_renamed_SDL_GAMEPAD_BUTTON_COUNT is static:
    const
      SDL_CONTROLLER_BUTTON_MAX* = SDL_CONTROLLER_BUTTON_MAX_renamed_SDL_GAMEPAD_BUTTON_COUNT 
  else:
    let SDL_CONTROLLER_BUTTON_MAX* = SDL_CONTROLLER_BUTTON_MAX_renamed_SDL_GAMEPAD_BUTTON_COUNT 
when SDL_CONTROLLER_BUTTON_MISC1_renamed_SDL_GAMEPAD_BUTTON_MISC1 is typedesc:
  type
    SDL_CONTROLLER_BUTTON_MISC1* = SDL_CONTROLLER_BUTTON_MISC1_renamed_SDL_GAMEPAD_BUTTON_MISC1 
else:
  when SDL_CONTROLLER_BUTTON_MISC1_renamed_SDL_GAMEPAD_BUTTON_MISC1 is static:
    const
      SDL_CONTROLLER_BUTTON_MISC1* = SDL_CONTROLLER_BUTTON_MISC1_renamed_SDL_GAMEPAD_BUTTON_MISC1 
  else:
    let SDL_CONTROLLER_BUTTON_MISC1* = SDL_CONTROLLER_BUTTON_MISC1_renamed_SDL_GAMEPAD_BUTTON_MISC1 
when SDL_CONTROLLER_BUTTON_PADDLE1_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_PADDLE1* = SDL_CONTROLLER_BUTTON_PADDLE1_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 
else:
  when SDL_CONTROLLER_BUTTON_PADDLE1_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 is
      static:
    const
      SDL_CONTROLLER_BUTTON_PADDLE1* = SDL_CONTROLLER_BUTTON_PADDLE1_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 
  else:
    let SDL_CONTROLLER_BUTTON_PADDLE1* = SDL_CONTROLLER_BUTTON_PADDLE1_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 
when SDL_CONTROLLER_BUTTON_PADDLE2_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_PADDLE2* = SDL_CONTROLLER_BUTTON_PADDLE2_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 
else:
  when SDL_CONTROLLER_BUTTON_PADDLE2_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 is
      static:
    const
      SDL_CONTROLLER_BUTTON_PADDLE2* = SDL_CONTROLLER_BUTTON_PADDLE2_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 
  else:
    let SDL_CONTROLLER_BUTTON_PADDLE2* = SDL_CONTROLLER_BUTTON_PADDLE2_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 
when SDL_CONTROLLER_BUTTON_PADDLE3_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_PADDLE3* = SDL_CONTROLLER_BUTTON_PADDLE3_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 
else:
  when SDL_CONTROLLER_BUTTON_PADDLE3_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 is
      static:
    const
      SDL_CONTROLLER_BUTTON_PADDLE3* = SDL_CONTROLLER_BUTTON_PADDLE3_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 
  else:
    let SDL_CONTROLLER_BUTTON_PADDLE3* = SDL_CONTROLLER_BUTTON_PADDLE3_renamed_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 
when SDL_CONTROLLER_BUTTON_PADDLE4_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_PADDLE4* = SDL_CONTROLLER_BUTTON_PADDLE4_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 
else:
  when SDL_CONTROLLER_BUTTON_PADDLE4_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 is
      static:
    const
      SDL_CONTROLLER_BUTTON_PADDLE4* = SDL_CONTROLLER_BUTTON_PADDLE4_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 
  else:
    let SDL_CONTROLLER_BUTTON_PADDLE4* = SDL_CONTROLLER_BUTTON_PADDLE4_renamed_SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 
when SDL_CONTROLLER_BUTTON_RIGHTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_RIGHTSHOULDER* = SDL_CONTROLLER_BUTTON_RIGHTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER 
else:
  when SDL_CONTROLLER_BUTTON_RIGHTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER is
      static:
    const
      SDL_CONTROLLER_BUTTON_RIGHTSHOULDER* = SDL_CONTROLLER_BUTTON_RIGHTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER 
  else:
    let SDL_CONTROLLER_BUTTON_RIGHTSHOULDER* = SDL_CONTROLLER_BUTTON_RIGHTSHOULDER_renamed_SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER 
when SDL_CONTROLLER_BUTTON_RIGHTSTICK_renamed_SDL_GAMEPAD_BUTTON_RIGHT_STICK is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_RIGHTSTICK* = SDL_CONTROLLER_BUTTON_RIGHTSTICK_renamed_SDL_GAMEPAD_BUTTON_RIGHT_STICK 
else:
  when SDL_CONTROLLER_BUTTON_RIGHTSTICK_renamed_SDL_GAMEPAD_BUTTON_RIGHT_STICK is
      static:
    const
      SDL_CONTROLLER_BUTTON_RIGHTSTICK* = SDL_CONTROLLER_BUTTON_RIGHTSTICK_renamed_SDL_GAMEPAD_BUTTON_RIGHT_STICK 
  else:
    let SDL_CONTROLLER_BUTTON_RIGHTSTICK* = SDL_CONTROLLER_BUTTON_RIGHTSTICK_renamed_SDL_GAMEPAD_BUTTON_RIGHT_STICK 
when SDL_CONTROLLER_BUTTON_START_renamed_SDL_GAMEPAD_BUTTON_START is typedesc:
  type
    SDL_CONTROLLER_BUTTON_START* = SDL_CONTROLLER_BUTTON_START_renamed_SDL_GAMEPAD_BUTTON_START 
else:
  when SDL_CONTROLLER_BUTTON_START_renamed_SDL_GAMEPAD_BUTTON_START is static:
    const
      SDL_CONTROLLER_BUTTON_START* = SDL_CONTROLLER_BUTTON_START_renamed_SDL_GAMEPAD_BUTTON_START 
  else:
    let SDL_CONTROLLER_BUTTON_START* = SDL_CONTROLLER_BUTTON_START_renamed_SDL_GAMEPAD_BUTTON_START 
when SDL_CONTROLLER_BUTTON_TOUCHPAD_renamed_SDL_GAMEPAD_BUTTON_TOUCHPAD is
    typedesc:
  type
    SDL_CONTROLLER_BUTTON_TOUCHPAD* = SDL_CONTROLLER_BUTTON_TOUCHPAD_renamed_SDL_GAMEPAD_BUTTON_TOUCHPAD 
else:
  when SDL_CONTROLLER_BUTTON_TOUCHPAD_renamed_SDL_GAMEPAD_BUTTON_TOUCHPAD is
      static:
    const
      SDL_CONTROLLER_BUTTON_TOUCHPAD* = SDL_CONTROLLER_BUTTON_TOUCHPAD_renamed_SDL_GAMEPAD_BUTTON_TOUCHPAD 
  else:
    let SDL_CONTROLLER_BUTTON_TOUCHPAD* = SDL_CONTROLLER_BUTTON_TOUCHPAD_renamed_SDL_GAMEPAD_BUTTON_TOUCHPAD 
when SDL_CONTROLLER_BUTTON_X_renamed_SDL_GAMEPAD_BUTTON_WEST is typedesc:
  type
    SDL_CONTROLLER_BUTTON_X* = SDL_CONTROLLER_BUTTON_X_renamed_SDL_GAMEPAD_BUTTON_WEST 
else:
  when SDL_CONTROLLER_BUTTON_X_renamed_SDL_GAMEPAD_BUTTON_WEST is static:
    const
      SDL_CONTROLLER_BUTTON_X* = SDL_CONTROLLER_BUTTON_X_renamed_SDL_GAMEPAD_BUTTON_WEST 
  else:
    let SDL_CONTROLLER_BUTTON_X* = SDL_CONTROLLER_BUTTON_X_renamed_SDL_GAMEPAD_BUTTON_WEST 
when SDL_CONTROLLER_BUTTON_Y_renamed_SDL_GAMEPAD_BUTTON_NORTH is typedesc:
  type
    SDL_CONTROLLER_BUTTON_Y* = SDL_CONTROLLER_BUTTON_Y_renamed_SDL_GAMEPAD_BUTTON_NORTH 
else:
  when SDL_CONTROLLER_BUTTON_Y_renamed_SDL_GAMEPAD_BUTTON_NORTH is static:
    const
      SDL_CONTROLLER_BUTTON_Y* = SDL_CONTROLLER_BUTTON_Y_renamed_SDL_GAMEPAD_BUTTON_NORTH 
  else:
    let SDL_CONTROLLER_BUTTON_Y* = SDL_CONTROLLER_BUTTON_Y_renamed_SDL_GAMEPAD_BUTTON_NORTH 
when SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT is
    typedesc:
  type
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT* = SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT 
else:
  when SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT is
      static:
    const
      SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT* = SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT 
  else:
    let SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT* = SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT 
when SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR is
    typedesc:
  type
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR* = SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR 
else:
  when SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR is
      static:
    const
      SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR* = SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR 
  else:
    let SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR* = SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR 
when SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT is
    typedesc:
  type
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT* = SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT 
else:
  when SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT is
      static:
    const
      SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT* = SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT 
  else:
    let SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT* = SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT 
when SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO is
    typedesc:
  type
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO* = SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO 
else:
  when SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO is
      static:
    const
      SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO* = SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO 
  else:
    let SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO* = SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO_renamed_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO 
when SDL_CONTROLLER_TYPE_PS3_renamed_SDL_GAMEPAD_TYPE_PS3 is typedesc:
  type
    SDL_CONTROLLER_TYPE_PS3* = SDL_CONTROLLER_TYPE_PS3_renamed_SDL_GAMEPAD_TYPE_PS3 
else:
  when SDL_CONTROLLER_TYPE_PS3_renamed_SDL_GAMEPAD_TYPE_PS3 is static:
    const
      SDL_CONTROLLER_TYPE_PS3* = SDL_CONTROLLER_TYPE_PS3_renamed_SDL_GAMEPAD_TYPE_PS3 
  else:
    let SDL_CONTROLLER_TYPE_PS3* = SDL_CONTROLLER_TYPE_PS3_renamed_SDL_GAMEPAD_TYPE_PS3 
when SDL_CONTROLLER_TYPE_PS4_renamed_SDL_GAMEPAD_TYPE_PS4 is typedesc:
  type
    SDL_CONTROLLER_TYPE_PS4* = SDL_CONTROLLER_TYPE_PS4_renamed_SDL_GAMEPAD_TYPE_PS4 
else:
  when SDL_CONTROLLER_TYPE_PS4_renamed_SDL_GAMEPAD_TYPE_PS4 is static:
    const
      SDL_CONTROLLER_TYPE_PS4* = SDL_CONTROLLER_TYPE_PS4_renamed_SDL_GAMEPAD_TYPE_PS4 
  else:
    let SDL_CONTROLLER_TYPE_PS4* = SDL_CONTROLLER_TYPE_PS4_renamed_SDL_GAMEPAD_TYPE_PS4 
when SDL_CONTROLLER_TYPE_PS5_renamed_SDL_GAMEPAD_TYPE_PS5 is typedesc:
  type
    SDL_CONTROLLER_TYPE_PS5* = SDL_CONTROLLER_TYPE_PS5_renamed_SDL_GAMEPAD_TYPE_PS5 
else:
  when SDL_CONTROLLER_TYPE_PS5_renamed_SDL_GAMEPAD_TYPE_PS5 is static:
    const
      SDL_CONTROLLER_TYPE_PS5* = SDL_CONTROLLER_TYPE_PS5_renamed_SDL_GAMEPAD_TYPE_PS5 
  else:
    let SDL_CONTROLLER_TYPE_PS5* = SDL_CONTROLLER_TYPE_PS5_renamed_SDL_GAMEPAD_TYPE_PS5 
when SDL_CONTROLLER_TYPE_UNKNOWN_renamed_SDL_GAMEPAD_TYPE_STANDARD is typedesc:
  type
    SDL_CONTROLLER_TYPE_UNKNOWN* = SDL_CONTROLLER_TYPE_UNKNOWN_renamed_SDL_GAMEPAD_TYPE_STANDARD 
else:
  when SDL_CONTROLLER_TYPE_UNKNOWN_renamed_SDL_GAMEPAD_TYPE_STANDARD is static:
    const
      SDL_CONTROLLER_TYPE_UNKNOWN* = SDL_CONTROLLER_TYPE_UNKNOWN_renamed_SDL_GAMEPAD_TYPE_STANDARD 
  else:
    let SDL_CONTROLLER_TYPE_UNKNOWN* = SDL_CONTROLLER_TYPE_UNKNOWN_renamed_SDL_GAMEPAD_TYPE_STANDARD 
when SDL_CONTROLLER_TYPE_VIRTUAL_renamed_SDL_GAMEPAD_TYPE_VIRTUAL is typedesc:
  type
    SDL_CONTROLLER_TYPE_VIRTUAL* = SDL_CONTROLLER_TYPE_VIRTUAL_renamed_SDL_GAMEPAD_TYPE_VIRTUAL 
else:
  when SDL_CONTROLLER_TYPE_VIRTUAL_renamed_SDL_GAMEPAD_TYPE_VIRTUAL is static:
    const
      SDL_CONTROLLER_TYPE_VIRTUAL* = SDL_CONTROLLER_TYPE_VIRTUAL_renamed_SDL_GAMEPAD_TYPE_VIRTUAL 
  else:
    let SDL_CONTROLLER_TYPE_VIRTUAL* = SDL_CONTROLLER_TYPE_VIRTUAL_renamed_SDL_GAMEPAD_TYPE_VIRTUAL 
when SDL_CONTROLLER_TYPE_XBOX360_renamed_SDL_GAMEPAD_TYPE_XBOX360 is typedesc:
  type
    SDL_CONTROLLER_TYPE_XBOX360* = SDL_CONTROLLER_TYPE_XBOX360_renamed_SDL_GAMEPAD_TYPE_XBOX360 
else:
  when SDL_CONTROLLER_TYPE_XBOX360_renamed_SDL_GAMEPAD_TYPE_XBOX360 is static:
    const
      SDL_CONTROLLER_TYPE_XBOX360* = SDL_CONTROLLER_TYPE_XBOX360_renamed_SDL_GAMEPAD_TYPE_XBOX360 
  else:
    let SDL_CONTROLLER_TYPE_XBOX360* = SDL_CONTROLLER_TYPE_XBOX360_renamed_SDL_GAMEPAD_TYPE_XBOX360 
when SDL_CONTROLLER_TYPE_XBOXONE_renamed_SDL_GAMEPAD_TYPE_XBOXONE is typedesc:
  type
    SDL_CONTROLLER_TYPE_XBOXONE* = SDL_CONTROLLER_TYPE_XBOXONE_renamed_SDL_GAMEPAD_TYPE_XBOXONE 
else:
  when SDL_CONTROLLER_TYPE_XBOXONE_renamed_SDL_GAMEPAD_TYPE_XBOXONE is static:
    const
      SDL_CONTROLLER_TYPE_XBOXONE* = SDL_CONTROLLER_TYPE_XBOXONE_renamed_SDL_GAMEPAD_TYPE_XBOXONE 
  else:
    let SDL_CONTROLLER_TYPE_XBOXONE* = SDL_CONTROLLER_TYPE_XBOXONE_renamed_SDL_GAMEPAD_TYPE_XBOXONE 
when SDL_GameController_renamed_SDL_Gamepad is typedesc:
  type
    SDL_GameController* = SDL_GameController_renamed_SDL_Gamepad 
else:
  when SDL_GameController_renamed_SDL_Gamepad is static:
    const
      SDL_GameController* = SDL_GameController_renamed_SDL_Gamepad 
  else:
    let SDL_GameController* = SDL_GameController_renamed_SDL_Gamepad 
when SDL_GameControllerAddMapping_renamed_SDL_AddGamepadMapping is typedesc:
  type
    SDL_GameControllerAddMapping* = SDL_GameControllerAddMapping_renamed_SDL_AddGamepadMapping 
else:
  when SDL_GameControllerAddMapping_renamed_SDL_AddGamepadMapping is static:
    const
      SDL_GameControllerAddMapping* = SDL_GameControllerAddMapping_renamed_SDL_AddGamepadMapping 
  else:
    let SDL_GameControllerAddMapping* = SDL_GameControllerAddMapping_renamed_SDL_AddGamepadMapping 
when SDL_GameControllerAddMappingsFromFile_renamed_SDL_AddGamepadMappingsFromFile is
    typedesc:
  type
    SDL_GameControllerAddMappingsFromFile* = SDL_GameControllerAddMappingsFromFile_renamed_SDL_AddGamepadMappingsFromFile 
else:
  when SDL_GameControllerAddMappingsFromFile_renamed_SDL_AddGamepadMappingsFromFile is
      static:
    const
      SDL_GameControllerAddMappingsFromFile* = SDL_GameControllerAddMappingsFromFile_renamed_SDL_AddGamepadMappingsFromFile 
  else:
    let SDL_GameControllerAddMappingsFromFile* = SDL_GameControllerAddMappingsFromFile_renamed_SDL_AddGamepadMappingsFromFile 
when SDL_GameControllerAddMappingsFromRW_renamed_SDL_AddGamepadMappingsFromIO is
    typedesc:
  type
    SDL_GameControllerAddMappingsFromRW* = SDL_GameControllerAddMappingsFromRW_renamed_SDL_AddGamepadMappingsFromIO 
else:
  when SDL_GameControllerAddMappingsFromRW_renamed_SDL_AddGamepadMappingsFromIO is
      static:
    const
      SDL_GameControllerAddMappingsFromRW* = SDL_GameControllerAddMappingsFromRW_renamed_SDL_AddGamepadMappingsFromIO 
  else:
    let SDL_GameControllerAddMappingsFromRW* = SDL_GameControllerAddMappingsFromRW_renamed_SDL_AddGamepadMappingsFromIO 
when SDL_GameControllerAxis_renamed_SDL_GamepadAxis is typedesc:
  type
    SDL_GameControllerAxis* = SDL_GameControllerAxis_renamed_SDL_GamepadAxis 
else:
  when SDL_GameControllerAxis_renamed_SDL_GamepadAxis is static:
    const
      SDL_GameControllerAxis* = SDL_GameControllerAxis_renamed_SDL_GamepadAxis 
  else:
    let SDL_GameControllerAxis* = SDL_GameControllerAxis_renamed_SDL_GamepadAxis 
when SDL_GameControllerBindType_renamed_SDL_GamepadBindingType is typedesc:
  type
    SDL_GameControllerBindType* = SDL_GameControllerBindType_renamed_SDL_GamepadBindingType 
else:
  when SDL_GameControllerBindType_renamed_SDL_GamepadBindingType is static:
    const
      SDL_GameControllerBindType* = SDL_GameControllerBindType_renamed_SDL_GamepadBindingType 
  else:
    let SDL_GameControllerBindType* = SDL_GameControllerBindType_renamed_SDL_GamepadBindingType 
when SDL_GameControllerButton_renamed_SDL_GamepadButton is typedesc:
  type
    SDL_GameControllerButton* = SDL_GameControllerButton_renamed_SDL_GamepadButton 
else:
  when SDL_GameControllerButton_renamed_SDL_GamepadButton is static:
    const
      SDL_GameControllerButton* = SDL_GameControllerButton_renamed_SDL_GamepadButton 
  else:
    let SDL_GameControllerButton* = SDL_GameControllerButton_renamed_SDL_GamepadButton 
when SDL_GameControllerClose_renamed_SDL_CloseGamepad is typedesc:
  type
    SDL_GameControllerClose* = SDL_GameControllerClose_renamed_SDL_CloseGamepad 
else:
  when SDL_GameControllerClose_renamed_SDL_CloseGamepad is static:
    const
      SDL_GameControllerClose* = SDL_GameControllerClose_renamed_SDL_CloseGamepad 
  else:
    let SDL_GameControllerClose* = SDL_GameControllerClose_renamed_SDL_CloseGamepad 
when SDL_GameControllerFromInstanceID_renamed_SDL_GetGamepadFromID is typedesc:
  type
    SDL_GameControllerFromInstanceID* = SDL_GameControllerFromInstanceID_renamed_SDL_GetGamepadFromID 
else:
  when SDL_GameControllerFromInstanceID_renamed_SDL_GetGamepadFromID is static:
    const
      SDL_GameControllerFromInstanceID* = SDL_GameControllerFromInstanceID_renamed_SDL_GetGamepadFromID 
  else:
    let SDL_GameControllerFromInstanceID* = SDL_GameControllerFromInstanceID_renamed_SDL_GetGamepadFromID 
when SDL_GameControllerFromPlayerIndex_renamed_SDL_GetGamepadFromPlayerIndex is
    typedesc:
  type
    SDL_GameControllerFromPlayerIndex* = SDL_GameControllerFromPlayerIndex_renamed_SDL_GetGamepadFromPlayerIndex 
else:
  when SDL_GameControllerFromPlayerIndex_renamed_SDL_GetGamepadFromPlayerIndex is
      static:
    const
      SDL_GameControllerFromPlayerIndex* = SDL_GameControllerFromPlayerIndex_renamed_SDL_GetGamepadFromPlayerIndex 
  else:
    let SDL_GameControllerFromPlayerIndex* = SDL_GameControllerFromPlayerIndex_renamed_SDL_GetGamepadFromPlayerIndex 
when SDL_GameControllerGetAppleSFSymbolsNameForAxis_renamed_SDL_GetGamepadAppleSFSymbolsNameForAxis is
    typedesc:
  type
    SDL_GameControllerGetAppleSFSymbolsNameForAxis* = SDL_GameControllerGetAppleSFSymbolsNameForAxis_renamed_SDL_GetGamepadAppleSFSymbolsNameForAxis 
else:
  when SDL_GameControllerGetAppleSFSymbolsNameForAxis_renamed_SDL_GetGamepadAppleSFSymbolsNameForAxis is
      static:
    const
      SDL_GameControllerGetAppleSFSymbolsNameForAxis* = SDL_GameControllerGetAppleSFSymbolsNameForAxis_renamed_SDL_GetGamepadAppleSFSymbolsNameForAxis 
  else:
    let SDL_GameControllerGetAppleSFSymbolsNameForAxis* = SDL_GameControllerGetAppleSFSymbolsNameForAxis_renamed_SDL_GetGamepadAppleSFSymbolsNameForAxis 
when SDL_GameControllerGetAppleSFSymbolsNameForButton_renamed_SDL_GetGamepadAppleSFSymbolsNameForButton is
    typedesc:
  type
    SDL_GameControllerGetAppleSFSymbolsNameForButton* = SDL_GameControllerGetAppleSFSymbolsNameForButton_renamed_SDL_GetGamepadAppleSFSymbolsNameForButton 
else:
  when SDL_GameControllerGetAppleSFSymbolsNameForButton_renamed_SDL_GetGamepadAppleSFSymbolsNameForButton is
      static:
    const
      SDL_GameControllerGetAppleSFSymbolsNameForButton* = SDL_GameControllerGetAppleSFSymbolsNameForButton_renamed_SDL_GetGamepadAppleSFSymbolsNameForButton 
  else:
    let SDL_GameControllerGetAppleSFSymbolsNameForButton* = SDL_GameControllerGetAppleSFSymbolsNameForButton_renamed_SDL_GetGamepadAppleSFSymbolsNameForButton 
when SDL_GameControllerGetAttached_renamed_SDL_GamepadConnected is typedesc:
  type
    SDL_GameControllerGetAttached* = SDL_GameControllerGetAttached_renamed_SDL_GamepadConnected 
else:
  when SDL_GameControllerGetAttached_renamed_SDL_GamepadConnected is static:
    const
      SDL_GameControllerGetAttached* = SDL_GameControllerGetAttached_renamed_SDL_GamepadConnected 
  else:
    let SDL_GameControllerGetAttached* = SDL_GameControllerGetAttached_renamed_SDL_GamepadConnected 
when SDL_GameControllerGetAxis_renamed_SDL_GetGamepadAxis is typedesc:
  type
    SDL_GameControllerGetAxis* = SDL_GameControllerGetAxis_renamed_SDL_GetGamepadAxis 
else:
  when SDL_GameControllerGetAxis_renamed_SDL_GetGamepadAxis is static:
    const
      SDL_GameControllerGetAxis* = SDL_GameControllerGetAxis_renamed_SDL_GetGamepadAxis 
  else:
    let SDL_GameControllerGetAxis* = SDL_GameControllerGetAxis_renamed_SDL_GetGamepadAxis 
when SDL_GameControllerGetAxisFromString_renamed_SDL_GetGamepadAxisFromString is
    typedesc:
  type
    SDL_GameControllerGetAxisFromString* = SDL_GameControllerGetAxisFromString_renamed_SDL_GetGamepadAxisFromString 
else:
  when SDL_GameControllerGetAxisFromString_renamed_SDL_GetGamepadAxisFromString is
      static:
    const
      SDL_GameControllerGetAxisFromString* = SDL_GameControllerGetAxisFromString_renamed_SDL_GetGamepadAxisFromString 
  else:
    let SDL_GameControllerGetAxisFromString* = SDL_GameControllerGetAxisFromString_renamed_SDL_GetGamepadAxisFromString 
when SDL_GameControllerGetButton_renamed_SDL_GetGamepadButton is typedesc:
  type
    SDL_GameControllerGetButton* = SDL_GameControllerGetButton_renamed_SDL_GetGamepadButton 
else:
  when SDL_GameControllerGetButton_renamed_SDL_GetGamepadButton is static:
    const
      SDL_GameControllerGetButton* = SDL_GameControllerGetButton_renamed_SDL_GetGamepadButton 
  else:
    let SDL_GameControllerGetButton* = SDL_GameControllerGetButton_renamed_SDL_GetGamepadButton 
when SDL_GameControllerGetButtonFromString_renamed_SDL_GetGamepadButtonFromString is
    typedesc:
  type
    SDL_GameControllerGetButtonFromString* = SDL_GameControllerGetButtonFromString_renamed_SDL_GetGamepadButtonFromString 
else:
  when SDL_GameControllerGetButtonFromString_renamed_SDL_GetGamepadButtonFromString is
      static:
    const
      SDL_GameControllerGetButtonFromString* = SDL_GameControllerGetButtonFromString_renamed_SDL_GetGamepadButtonFromString 
  else:
    let SDL_GameControllerGetButtonFromString* = SDL_GameControllerGetButtonFromString_renamed_SDL_GetGamepadButtonFromString 
when SDL_GameControllerGetFirmwareVersion_renamed_SDL_GetGamepadFirmwareVersion is
    typedesc:
  type
    SDL_GameControllerGetFirmwareVersion* = SDL_GameControllerGetFirmwareVersion_renamed_SDL_GetGamepadFirmwareVersion 
else:
  when SDL_GameControllerGetFirmwareVersion_renamed_SDL_GetGamepadFirmwareVersion is
      static:
    const
      SDL_GameControllerGetFirmwareVersion* = SDL_GameControllerGetFirmwareVersion_renamed_SDL_GetGamepadFirmwareVersion 
  else:
    let SDL_GameControllerGetFirmwareVersion* = SDL_GameControllerGetFirmwareVersion_renamed_SDL_GetGamepadFirmwareVersion 
when SDL_GameControllerGetJoystick_renamed_SDL_GetGamepadJoystick is typedesc:
  type
    SDL_GameControllerGetJoystick* = SDL_GameControllerGetJoystick_renamed_SDL_GetGamepadJoystick 
else:
  when SDL_GameControllerGetJoystick_renamed_SDL_GetGamepadJoystick is static:
    const
      SDL_GameControllerGetJoystick* = SDL_GameControllerGetJoystick_renamed_SDL_GetGamepadJoystick 
  else:
    let SDL_GameControllerGetJoystick* = SDL_GameControllerGetJoystick_renamed_SDL_GetGamepadJoystick 
when SDL_GameControllerGetNumTouchpadFingers_renamed_SDL_GetNumGamepadTouchpadFingers is
    typedesc:
  type
    SDL_GameControllerGetNumTouchpadFingers* = SDL_GameControllerGetNumTouchpadFingers_renamed_SDL_GetNumGamepadTouchpadFingers 
else:
  when SDL_GameControllerGetNumTouchpadFingers_renamed_SDL_GetNumGamepadTouchpadFingers is
      static:
    const
      SDL_GameControllerGetNumTouchpadFingers* = SDL_GameControllerGetNumTouchpadFingers_renamed_SDL_GetNumGamepadTouchpadFingers 
  else:
    let SDL_GameControllerGetNumTouchpadFingers* = SDL_GameControllerGetNumTouchpadFingers_renamed_SDL_GetNumGamepadTouchpadFingers 
when SDL_GameControllerGetNumTouchpads_renamed_SDL_GetNumGamepadTouchpads is
    typedesc:
  type
    SDL_GameControllerGetNumTouchpads* = SDL_GameControllerGetNumTouchpads_renamed_SDL_GetNumGamepadTouchpads 
else:
  when SDL_GameControllerGetNumTouchpads_renamed_SDL_GetNumGamepadTouchpads is
      static:
    const
      SDL_GameControllerGetNumTouchpads* = SDL_GameControllerGetNumTouchpads_renamed_SDL_GetNumGamepadTouchpads 
  else:
    let SDL_GameControllerGetNumTouchpads* = SDL_GameControllerGetNumTouchpads_renamed_SDL_GetNumGamepadTouchpads 
when SDL_GameControllerGetPlayerIndex_renamed_SDL_GetGamepadPlayerIndex is
    typedesc:
  type
    SDL_GameControllerGetPlayerIndex* = SDL_GameControllerGetPlayerIndex_renamed_SDL_GetGamepadPlayerIndex 
else:
  when SDL_GameControllerGetPlayerIndex_renamed_SDL_GetGamepadPlayerIndex is
      static:
    const
      SDL_GameControllerGetPlayerIndex* = SDL_GameControllerGetPlayerIndex_renamed_SDL_GetGamepadPlayerIndex 
  else:
    let SDL_GameControllerGetPlayerIndex* = SDL_GameControllerGetPlayerIndex_renamed_SDL_GetGamepadPlayerIndex 
when SDL_GameControllerGetProduct_renamed_SDL_GetGamepadProduct is typedesc:
  type
    SDL_GameControllerGetProduct* = SDL_GameControllerGetProduct_renamed_SDL_GetGamepadProduct 
else:
  when SDL_GameControllerGetProduct_renamed_SDL_GetGamepadProduct is static:
    const
      SDL_GameControllerGetProduct* = SDL_GameControllerGetProduct_renamed_SDL_GetGamepadProduct 
  else:
    let SDL_GameControllerGetProduct* = SDL_GameControllerGetProduct_renamed_SDL_GetGamepadProduct 
when SDL_GameControllerGetProductVersion_renamed_SDL_GetGamepadProductVersion is
    typedesc:
  type
    SDL_GameControllerGetProductVersion* = SDL_GameControllerGetProductVersion_renamed_SDL_GetGamepadProductVersion 
else:
  when SDL_GameControllerGetProductVersion_renamed_SDL_GetGamepadProductVersion is
      static:
    const
      SDL_GameControllerGetProductVersion* = SDL_GameControllerGetProductVersion_renamed_SDL_GetGamepadProductVersion 
  else:
    let SDL_GameControllerGetProductVersion* = SDL_GameControllerGetProductVersion_renamed_SDL_GetGamepadProductVersion 
when SDL_GameControllerGetSensorData_renamed_SDL_GetGamepadSensorData is
    typedesc:
  type
    SDL_GameControllerGetSensorData* = SDL_GameControllerGetSensorData_renamed_SDL_GetGamepadSensorData 
else:
  when SDL_GameControllerGetSensorData_renamed_SDL_GetGamepadSensorData is
      static:
    const
      SDL_GameControllerGetSensorData* = SDL_GameControllerGetSensorData_renamed_SDL_GetGamepadSensorData 
  else:
    let SDL_GameControllerGetSensorData* = SDL_GameControllerGetSensorData_renamed_SDL_GetGamepadSensorData 
when SDL_GameControllerGetSensorDataRate_renamed_SDL_GetGamepadSensorDataRate is
    typedesc:
  type
    SDL_GameControllerGetSensorDataRate* = SDL_GameControllerGetSensorDataRate_renamed_SDL_GetGamepadSensorDataRate 
else:
  when SDL_GameControllerGetSensorDataRate_renamed_SDL_GetGamepadSensorDataRate is
      static:
    const
      SDL_GameControllerGetSensorDataRate* = SDL_GameControllerGetSensorDataRate_renamed_SDL_GetGamepadSensorDataRate 
  else:
    let SDL_GameControllerGetSensorDataRate* = SDL_GameControllerGetSensorDataRate_renamed_SDL_GetGamepadSensorDataRate 
when SDL_GameControllerGetSerial_renamed_SDL_GetGamepadSerial is typedesc:
  type
    SDL_GameControllerGetSerial* = SDL_GameControllerGetSerial_renamed_SDL_GetGamepadSerial 
else:
  when SDL_GameControllerGetSerial_renamed_SDL_GetGamepadSerial is static:
    const
      SDL_GameControllerGetSerial* = SDL_GameControllerGetSerial_renamed_SDL_GetGamepadSerial 
  else:
    let SDL_GameControllerGetSerial* = SDL_GameControllerGetSerial_renamed_SDL_GetGamepadSerial 
when SDL_GameControllerGetSteamHandle_renamed_SDL_GetGamepadSteamHandle is
    typedesc:
  type
    SDL_GameControllerGetSteamHandle* = SDL_GameControllerGetSteamHandle_renamed_SDL_GetGamepadSteamHandle 
else:
  when SDL_GameControllerGetSteamHandle_renamed_SDL_GetGamepadSteamHandle is
      static:
    const
      SDL_GameControllerGetSteamHandle* = SDL_GameControllerGetSteamHandle_renamed_SDL_GetGamepadSteamHandle 
  else:
    let SDL_GameControllerGetSteamHandle* = SDL_GameControllerGetSteamHandle_renamed_SDL_GetGamepadSteamHandle 
when SDL_GameControllerGetStringForAxis_renamed_SDL_GetGamepadStringForAxis is
    typedesc:
  type
    SDL_GameControllerGetStringForAxis* = SDL_GameControllerGetStringForAxis_renamed_SDL_GetGamepadStringForAxis 
else:
  when SDL_GameControllerGetStringForAxis_renamed_SDL_GetGamepadStringForAxis is
      static:
    const
      SDL_GameControllerGetStringForAxis* = SDL_GameControllerGetStringForAxis_renamed_SDL_GetGamepadStringForAxis 
  else:
    let SDL_GameControllerGetStringForAxis* = SDL_GameControllerGetStringForAxis_renamed_SDL_GetGamepadStringForAxis 
when SDL_GameControllerGetStringForButton_renamed_SDL_GetGamepadStringForButton is
    typedesc:
  type
    SDL_GameControllerGetStringForButton* = SDL_GameControllerGetStringForButton_renamed_SDL_GetGamepadStringForButton 
else:
  when SDL_GameControllerGetStringForButton_renamed_SDL_GetGamepadStringForButton is
      static:
    const
      SDL_GameControllerGetStringForButton* = SDL_GameControllerGetStringForButton_renamed_SDL_GetGamepadStringForButton 
  else:
    let SDL_GameControllerGetStringForButton* = SDL_GameControllerGetStringForButton_renamed_SDL_GetGamepadStringForButton 
when SDL_GameControllerGetTouchpadFinger_renamed_SDL_GetGamepadTouchpadFinger is
    typedesc:
  type
    SDL_GameControllerGetTouchpadFinger* = SDL_GameControllerGetTouchpadFinger_renamed_SDL_GetGamepadTouchpadFinger 
else:
  when SDL_GameControllerGetTouchpadFinger_renamed_SDL_GetGamepadTouchpadFinger is
      static:
    const
      SDL_GameControllerGetTouchpadFinger* = SDL_GameControllerGetTouchpadFinger_renamed_SDL_GetGamepadTouchpadFinger 
  else:
    let SDL_GameControllerGetTouchpadFinger* = SDL_GameControllerGetTouchpadFinger_renamed_SDL_GetGamepadTouchpadFinger 
when SDL_GameControllerGetType_renamed_SDL_GetGamepadType is typedesc:
  type
    SDL_GameControllerGetType* = SDL_GameControllerGetType_renamed_SDL_GetGamepadType 
else:
  when SDL_GameControllerGetType_renamed_SDL_GetGamepadType is static:
    const
      SDL_GameControllerGetType* = SDL_GameControllerGetType_renamed_SDL_GetGamepadType 
  else:
    let SDL_GameControllerGetType* = SDL_GameControllerGetType_renamed_SDL_GetGamepadType 
when SDL_GameControllerGetVendor_renamed_SDL_GetGamepadVendor is typedesc:
  type
    SDL_GameControllerGetVendor* = SDL_GameControllerGetVendor_renamed_SDL_GetGamepadVendor 
else:
  when SDL_GameControllerGetVendor_renamed_SDL_GetGamepadVendor is static:
    const
      SDL_GameControllerGetVendor* = SDL_GameControllerGetVendor_renamed_SDL_GetGamepadVendor 
  else:
    let SDL_GameControllerGetVendor* = SDL_GameControllerGetVendor_renamed_SDL_GetGamepadVendor 
when SDL_GameControllerHasAxis_renamed_SDL_GamepadHasAxis is typedesc:
  type
    SDL_GameControllerHasAxis* = SDL_GameControllerHasAxis_renamed_SDL_GamepadHasAxis 
else:
  when SDL_GameControllerHasAxis_renamed_SDL_GamepadHasAxis is static:
    const
      SDL_GameControllerHasAxis* = SDL_GameControllerHasAxis_renamed_SDL_GamepadHasAxis 
  else:
    let SDL_GameControllerHasAxis* = SDL_GameControllerHasAxis_renamed_SDL_GamepadHasAxis 
when SDL_GameControllerHasButton_renamed_SDL_GamepadHasButton is typedesc:
  type
    SDL_GameControllerHasButton* = SDL_GameControllerHasButton_renamed_SDL_GamepadHasButton 
else:
  when SDL_GameControllerHasButton_renamed_SDL_GamepadHasButton is static:
    const
      SDL_GameControllerHasButton* = SDL_GameControllerHasButton_renamed_SDL_GamepadHasButton 
  else:
    let SDL_GameControllerHasButton* = SDL_GameControllerHasButton_renamed_SDL_GamepadHasButton 
when SDL_GameControllerHasSensor_renamed_SDL_GamepadHasSensor is typedesc:
  type
    SDL_GameControllerHasSensor* = SDL_GameControllerHasSensor_renamed_SDL_GamepadHasSensor 
else:
  when SDL_GameControllerHasSensor_renamed_SDL_GamepadHasSensor is static:
    const
      SDL_GameControllerHasSensor* = SDL_GameControllerHasSensor_renamed_SDL_GamepadHasSensor 
  else:
    let SDL_GameControllerHasSensor* = SDL_GameControllerHasSensor_renamed_SDL_GamepadHasSensor 
when SDL_GameControllerIsSensorEnabled_renamed_SDL_GamepadSensorEnabled is
    typedesc:
  type
    SDL_GameControllerIsSensorEnabled* = SDL_GameControllerIsSensorEnabled_renamed_SDL_GamepadSensorEnabled 
else:
  when SDL_GameControllerIsSensorEnabled_renamed_SDL_GamepadSensorEnabled is
      static:
    const
      SDL_GameControllerIsSensorEnabled* = SDL_GameControllerIsSensorEnabled_renamed_SDL_GamepadSensorEnabled 
  else:
    let SDL_GameControllerIsSensorEnabled* = SDL_GameControllerIsSensorEnabled_renamed_SDL_GamepadSensorEnabled 
when SDL_GameControllerMapping_renamed_SDL_GetGamepadMapping is typedesc:
  type
    SDL_GameControllerMapping* = SDL_GameControllerMapping_renamed_SDL_GetGamepadMapping 
else:
  when SDL_GameControllerMapping_renamed_SDL_GetGamepadMapping is static:
    const
      SDL_GameControllerMapping* = SDL_GameControllerMapping_renamed_SDL_GetGamepadMapping 
  else:
    let SDL_GameControllerMapping* = SDL_GameControllerMapping_renamed_SDL_GetGamepadMapping 
when SDL_GameControllerMappingForDeviceIndex_renamed_SDL_GetGamepadMappingForDeviceIndex is
    typedesc:
  type
    SDL_GameControllerMappingForDeviceIndex* = SDL_GameControllerMappingForDeviceIndex_renamed_SDL_GetGamepadMappingForDeviceIndex 
else:
  when SDL_GameControllerMappingForDeviceIndex_renamed_SDL_GetGamepadMappingForDeviceIndex is
      static:
    const
      SDL_GameControllerMappingForDeviceIndex* = SDL_GameControllerMappingForDeviceIndex_renamed_SDL_GetGamepadMappingForDeviceIndex 
  else:
    let SDL_GameControllerMappingForDeviceIndex* = SDL_GameControllerMappingForDeviceIndex_renamed_SDL_GetGamepadMappingForDeviceIndex 
when SDL_GameControllerMappingForGUID_renamed_SDL_GetGamepadMappingForGUID is
    typedesc:
  type
    SDL_GameControllerMappingForGUID* = SDL_GameControllerMappingForGUID_renamed_SDL_GetGamepadMappingForGUID 
else:
  when SDL_GameControllerMappingForGUID_renamed_SDL_GetGamepadMappingForGUID is
      static:
    const
      SDL_GameControllerMappingForGUID* = SDL_GameControllerMappingForGUID_renamed_SDL_GetGamepadMappingForGUID 
  else:
    let SDL_GameControllerMappingForGUID* = SDL_GameControllerMappingForGUID_renamed_SDL_GetGamepadMappingForGUID 
when SDL_GameControllerName_renamed_SDL_GetGamepadName is typedesc:
  type
    SDL_GameControllerName* = SDL_GameControllerName_renamed_SDL_GetGamepadName 
else:
  when SDL_GameControllerName_renamed_SDL_GetGamepadName is static:
    const
      SDL_GameControllerName* = SDL_GameControllerName_renamed_SDL_GetGamepadName 
  else:
    let SDL_GameControllerName* = SDL_GameControllerName_renamed_SDL_GetGamepadName 
when SDL_GameControllerOpen_renamed_SDL_OpenGamepad is typedesc:
  type
    SDL_GameControllerOpen* = SDL_GameControllerOpen_renamed_SDL_OpenGamepad 
else:
  when SDL_GameControllerOpen_renamed_SDL_OpenGamepad is static:
    const
      SDL_GameControllerOpen* = SDL_GameControllerOpen_renamed_SDL_OpenGamepad 
  else:
    let SDL_GameControllerOpen* = SDL_GameControllerOpen_renamed_SDL_OpenGamepad 
when SDL_GameControllerPath_renamed_SDL_GetGamepadPath is typedesc:
  type
    SDL_GameControllerPath* = SDL_GameControllerPath_renamed_SDL_GetGamepadPath 
else:
  when SDL_GameControllerPath_renamed_SDL_GetGamepadPath is static:
    const
      SDL_GameControllerPath* = SDL_GameControllerPath_renamed_SDL_GetGamepadPath 
  else:
    let SDL_GameControllerPath* = SDL_GameControllerPath_renamed_SDL_GetGamepadPath 
when SDL_GameControllerRumble_renamed_SDL_RumbleGamepad is typedesc:
  type
    SDL_GameControllerRumble* = SDL_GameControllerRumble_renamed_SDL_RumbleGamepad 
else:
  when SDL_GameControllerRumble_renamed_SDL_RumbleGamepad is static:
    const
      SDL_GameControllerRumble* = SDL_GameControllerRumble_renamed_SDL_RumbleGamepad 
  else:
    let SDL_GameControllerRumble* = SDL_GameControllerRumble_renamed_SDL_RumbleGamepad 
when SDL_GameControllerRumbleTriggers_renamed_SDL_RumbleGamepadTriggers is
    typedesc:
  type
    SDL_GameControllerRumbleTriggers* = SDL_GameControllerRumbleTriggers_renamed_SDL_RumbleGamepadTriggers 
else:
  when SDL_GameControllerRumbleTriggers_renamed_SDL_RumbleGamepadTriggers is
      static:
    const
      SDL_GameControllerRumbleTriggers* = SDL_GameControllerRumbleTriggers_renamed_SDL_RumbleGamepadTriggers 
  else:
    let SDL_GameControllerRumbleTriggers* = SDL_GameControllerRumbleTriggers_renamed_SDL_RumbleGamepadTriggers 
when SDL_GameControllerSendEffect_renamed_SDL_SendGamepadEffect is typedesc:
  type
    SDL_GameControllerSendEffect* = SDL_GameControllerSendEffect_renamed_SDL_SendGamepadEffect 
else:
  when SDL_GameControllerSendEffect_renamed_SDL_SendGamepadEffect is static:
    const
      SDL_GameControllerSendEffect* = SDL_GameControllerSendEffect_renamed_SDL_SendGamepadEffect 
  else:
    let SDL_GameControllerSendEffect* = SDL_GameControllerSendEffect_renamed_SDL_SendGamepadEffect 
when SDL_GameControllerSetLED_renamed_SDL_SetGamepadLED is typedesc:
  type
    SDL_GameControllerSetLED* = SDL_GameControllerSetLED_renamed_SDL_SetGamepadLED 
else:
  when SDL_GameControllerSetLED_renamed_SDL_SetGamepadLED is static:
    const
      SDL_GameControllerSetLED* = SDL_GameControllerSetLED_renamed_SDL_SetGamepadLED 
  else:
    let SDL_GameControllerSetLED* = SDL_GameControllerSetLED_renamed_SDL_SetGamepadLED 
when SDL_GameControllerSetPlayerIndex_renamed_SDL_SetGamepadPlayerIndex is
    typedesc:
  type
    SDL_GameControllerSetPlayerIndex* = SDL_GameControllerSetPlayerIndex_renamed_SDL_SetGamepadPlayerIndex 
else:
  when SDL_GameControllerSetPlayerIndex_renamed_SDL_SetGamepadPlayerIndex is
      static:
    const
      SDL_GameControllerSetPlayerIndex* = SDL_GameControllerSetPlayerIndex_renamed_SDL_SetGamepadPlayerIndex 
  else:
    let SDL_GameControllerSetPlayerIndex* = SDL_GameControllerSetPlayerIndex_renamed_SDL_SetGamepadPlayerIndex 
when SDL_GameControllerSetSensorEnabled_renamed_SDL_SetGamepadSensorEnabled is
    typedesc:
  type
    SDL_GameControllerSetSensorEnabled* = SDL_GameControllerSetSensorEnabled_renamed_SDL_SetGamepadSensorEnabled 
else:
  when SDL_GameControllerSetSensorEnabled_renamed_SDL_SetGamepadSensorEnabled is
      static:
    const
      SDL_GameControllerSetSensorEnabled* = SDL_GameControllerSetSensorEnabled_renamed_SDL_SetGamepadSensorEnabled 
  else:
    let SDL_GameControllerSetSensorEnabled* = SDL_GameControllerSetSensorEnabled_renamed_SDL_SetGamepadSensorEnabled 
when SDL_GameControllerType_renamed_SDL_GamepadType is typedesc:
  type
    SDL_GameControllerType* = SDL_GameControllerType_renamed_SDL_GamepadType 
else:
  when SDL_GameControllerType_renamed_SDL_GamepadType is static:
    const
      SDL_GameControllerType* = SDL_GameControllerType_renamed_SDL_GamepadType 
  else:
    let SDL_GameControllerType* = SDL_GameControllerType_renamed_SDL_GamepadType 
when SDL_GameControllerUpdate_renamed_SDL_UpdateGamepads is typedesc:
  type
    SDL_GameControllerUpdate* = SDL_GameControllerUpdate_renamed_SDL_UpdateGamepads 
else:
  when SDL_GameControllerUpdate_renamed_SDL_UpdateGamepads is static:
    const
      SDL_GameControllerUpdate* = SDL_GameControllerUpdate_renamed_SDL_UpdateGamepads 
  else:
    let SDL_GameControllerUpdate* = SDL_GameControllerUpdate_renamed_SDL_UpdateGamepads 
when SDL_INIT_GAMECONTROLLER_renamed_SDL_INIT_GAMEPAD is typedesc:
  type
    SDL_INIT_GAMECONTROLLER* = SDL_INIT_GAMECONTROLLER_renamed_SDL_INIT_GAMEPAD 
else:
  when SDL_INIT_GAMECONTROLLER_renamed_SDL_INIT_GAMEPAD is static:
    const
      SDL_INIT_GAMECONTROLLER* = SDL_INIT_GAMECONTROLLER_renamed_SDL_INIT_GAMEPAD 
  else:
    let SDL_INIT_GAMECONTROLLER* = SDL_INIT_GAMECONTROLLER_renamed_SDL_INIT_GAMEPAD 
when SDL_IsGameController_renamed_SDL_IsGamepad is typedesc:
  type
    SDL_IsGameController* = SDL_IsGameController_renamed_SDL_IsGamepad 
else:
  when SDL_IsGameController_renamed_SDL_IsGamepad is static:
    const
      SDL_IsGameController* = SDL_IsGameController_renamed_SDL_IsGamepad 
  else:
    let SDL_IsGameController* = SDL_IsGameController_renamed_SDL_IsGamepad 
when SDL_GUIDFromString_renamed_SDL_StringToGUID is typedesc:
  type
    SDL_GUIDFromString* = SDL_GUIDFromString_renamed_SDL_StringToGUID 
else:
  when SDL_GUIDFromString_renamed_SDL_StringToGUID is static:
    const
      SDL_GUIDFromString* = SDL_GUIDFromString_renamed_SDL_StringToGUID 
  else:
    let SDL_GUIDFromString* = SDL_GUIDFromString_renamed_SDL_StringToGUID 
when SDL_HapticClose_renamed_SDL_CloseHaptic is typedesc:
  type
    SDL_HapticClose* = SDL_HapticClose_renamed_SDL_CloseHaptic 
else:
  when SDL_HapticClose_renamed_SDL_CloseHaptic is static:
    const
      SDL_HapticClose* = SDL_HapticClose_renamed_SDL_CloseHaptic 
  else:
    let SDL_HapticClose* = SDL_HapticClose_renamed_SDL_CloseHaptic 
when SDL_HapticDestroyEffect_renamed_SDL_DestroyHapticEffect is typedesc:
  type
    SDL_HapticDestroyEffect* = SDL_HapticDestroyEffect_renamed_SDL_DestroyHapticEffect 
else:
  when SDL_HapticDestroyEffect_renamed_SDL_DestroyHapticEffect is static:
    const
      SDL_HapticDestroyEffect* = SDL_HapticDestroyEffect_renamed_SDL_DestroyHapticEffect 
  else:
    let SDL_HapticDestroyEffect* = SDL_HapticDestroyEffect_renamed_SDL_DestroyHapticEffect 
when SDL_HapticGetEffectStatus_renamed_SDL_GetHapticEffectStatus is typedesc:
  type
    SDL_HapticGetEffectStatus* = SDL_HapticGetEffectStatus_renamed_SDL_GetHapticEffectStatus 
else:
  when SDL_HapticGetEffectStatus_renamed_SDL_GetHapticEffectStatus is static:
    const
      SDL_HapticGetEffectStatus* = SDL_HapticGetEffectStatus_renamed_SDL_GetHapticEffectStatus 
  else:
    let SDL_HapticGetEffectStatus* = SDL_HapticGetEffectStatus_renamed_SDL_GetHapticEffectStatus 
when SDL_HapticNewEffect_renamed_SDL_CreateHapticEffect is typedesc:
  type
    SDL_HapticNewEffect* = SDL_HapticNewEffect_renamed_SDL_CreateHapticEffect 
else:
  when SDL_HapticNewEffect_renamed_SDL_CreateHapticEffect is static:
    const
      SDL_HapticNewEffect* = SDL_HapticNewEffect_renamed_SDL_CreateHapticEffect 
  else:
    let SDL_HapticNewEffect* = SDL_HapticNewEffect_renamed_SDL_CreateHapticEffect 
when SDL_HapticNumAxes_renamed_SDL_GetNumHapticAxes is typedesc:
  type
    SDL_HapticNumAxes* = SDL_HapticNumAxes_renamed_SDL_GetNumHapticAxes 
else:
  when SDL_HapticNumAxes_renamed_SDL_GetNumHapticAxes is static:
    const
      SDL_HapticNumAxes* = SDL_HapticNumAxes_renamed_SDL_GetNumHapticAxes 
  else:
    let SDL_HapticNumAxes* = SDL_HapticNumAxes_renamed_SDL_GetNumHapticAxes 
when SDL_HapticNumEffects_renamed_SDL_GetMaxHapticEffects is typedesc:
  type
    SDL_HapticNumEffects* = SDL_HapticNumEffects_renamed_SDL_GetMaxHapticEffects 
else:
  when SDL_HapticNumEffects_renamed_SDL_GetMaxHapticEffects is static:
    const
      SDL_HapticNumEffects* = SDL_HapticNumEffects_renamed_SDL_GetMaxHapticEffects 
  else:
    let SDL_HapticNumEffects* = SDL_HapticNumEffects_renamed_SDL_GetMaxHapticEffects 
when SDL_HapticNumEffectsPlaying_renamed_SDL_GetMaxHapticEffectsPlaying is
    typedesc:
  type
    SDL_HapticNumEffectsPlaying* = SDL_HapticNumEffectsPlaying_renamed_SDL_GetMaxHapticEffectsPlaying 
else:
  when SDL_HapticNumEffectsPlaying_renamed_SDL_GetMaxHapticEffectsPlaying is
      static:
    const
      SDL_HapticNumEffectsPlaying* = SDL_HapticNumEffectsPlaying_renamed_SDL_GetMaxHapticEffectsPlaying 
  else:
    let SDL_HapticNumEffectsPlaying* = SDL_HapticNumEffectsPlaying_renamed_SDL_GetMaxHapticEffectsPlaying 
when SDL_HapticOpen_renamed_SDL_OpenHaptic is typedesc:
  type
    SDL_HapticOpen* = SDL_HapticOpen_renamed_SDL_OpenHaptic 
else:
  when SDL_HapticOpen_renamed_SDL_OpenHaptic is static:
    const
      SDL_HapticOpen* = SDL_HapticOpen_renamed_SDL_OpenHaptic 
  else:
    let SDL_HapticOpen* = SDL_HapticOpen_renamed_SDL_OpenHaptic 
when SDL_HapticOpenFromJoystick_renamed_SDL_OpenHapticFromJoystick is typedesc:
  type
    SDL_HapticOpenFromJoystick* = SDL_HapticOpenFromJoystick_renamed_SDL_OpenHapticFromJoystick 
else:
  when SDL_HapticOpenFromJoystick_renamed_SDL_OpenHapticFromJoystick is static:
    const
      SDL_HapticOpenFromJoystick* = SDL_HapticOpenFromJoystick_renamed_SDL_OpenHapticFromJoystick 
  else:
    let SDL_HapticOpenFromJoystick* = SDL_HapticOpenFromJoystick_renamed_SDL_OpenHapticFromJoystick 
when SDL_HapticOpenFromMouse_renamed_SDL_OpenHapticFromMouse is typedesc:
  type
    SDL_HapticOpenFromMouse* = SDL_HapticOpenFromMouse_renamed_SDL_OpenHapticFromMouse 
else:
  when SDL_HapticOpenFromMouse_renamed_SDL_OpenHapticFromMouse is static:
    const
      SDL_HapticOpenFromMouse* = SDL_HapticOpenFromMouse_renamed_SDL_OpenHapticFromMouse 
  else:
    let SDL_HapticOpenFromMouse* = SDL_HapticOpenFromMouse_renamed_SDL_OpenHapticFromMouse 
when SDL_HapticPause_renamed_SDL_PauseHaptic is typedesc:
  type
    SDL_HapticPause* = SDL_HapticPause_renamed_SDL_PauseHaptic 
else:
  when SDL_HapticPause_renamed_SDL_PauseHaptic is static:
    const
      SDL_HapticPause* = SDL_HapticPause_renamed_SDL_PauseHaptic 
  else:
    let SDL_HapticPause* = SDL_HapticPause_renamed_SDL_PauseHaptic 
when SDL_HapticQuery_renamed_SDL_GetHapticFeatures is typedesc:
  type
    SDL_HapticQuery* = SDL_HapticQuery_renamed_SDL_GetHapticFeatures 
else:
  when SDL_HapticQuery_renamed_SDL_GetHapticFeatures is static:
    const
      SDL_HapticQuery* = SDL_HapticQuery_renamed_SDL_GetHapticFeatures 
  else:
    let SDL_HapticQuery* = SDL_HapticQuery_renamed_SDL_GetHapticFeatures 
when SDL_HapticRumbleInit_renamed_SDL_InitHapticRumble is typedesc:
  type
    SDL_HapticRumbleInit* = SDL_HapticRumbleInit_renamed_SDL_InitHapticRumble 
else:
  when SDL_HapticRumbleInit_renamed_SDL_InitHapticRumble is static:
    const
      SDL_HapticRumbleInit* = SDL_HapticRumbleInit_renamed_SDL_InitHapticRumble 
  else:
    let SDL_HapticRumbleInit* = SDL_HapticRumbleInit_renamed_SDL_InitHapticRumble 
when SDL_HapticRumblePlay_renamed_SDL_PlayHapticRumble is typedesc:
  type
    SDL_HapticRumblePlay* = SDL_HapticRumblePlay_renamed_SDL_PlayHapticRumble 
else:
  when SDL_HapticRumblePlay_renamed_SDL_PlayHapticRumble is static:
    const
      SDL_HapticRumblePlay* = SDL_HapticRumblePlay_renamed_SDL_PlayHapticRumble 
  else:
    let SDL_HapticRumblePlay* = SDL_HapticRumblePlay_renamed_SDL_PlayHapticRumble 
when SDL_HapticRumbleStop_renamed_SDL_StopHapticRumble is typedesc:
  type
    SDL_HapticRumbleStop* = SDL_HapticRumbleStop_renamed_SDL_StopHapticRumble 
else:
  when SDL_HapticRumbleStop_renamed_SDL_StopHapticRumble is static:
    const
      SDL_HapticRumbleStop* = SDL_HapticRumbleStop_renamed_SDL_StopHapticRumble 
  else:
    let SDL_HapticRumbleStop* = SDL_HapticRumbleStop_renamed_SDL_StopHapticRumble 
when SDL_HapticRunEffect_renamed_SDL_RunHapticEffect is typedesc:
  type
    SDL_HapticRunEffect* = SDL_HapticRunEffect_renamed_SDL_RunHapticEffect 
else:
  when SDL_HapticRunEffect_renamed_SDL_RunHapticEffect is static:
    const
      SDL_HapticRunEffect* = SDL_HapticRunEffect_renamed_SDL_RunHapticEffect 
  else:
    let SDL_HapticRunEffect* = SDL_HapticRunEffect_renamed_SDL_RunHapticEffect 
when SDL_HapticSetAutocenter_renamed_SDL_SetHapticAutocenter is typedesc:
  type
    SDL_HapticSetAutocenter* = SDL_HapticSetAutocenter_renamed_SDL_SetHapticAutocenter 
else:
  when SDL_HapticSetAutocenter_renamed_SDL_SetHapticAutocenter is static:
    const
      SDL_HapticSetAutocenter* = SDL_HapticSetAutocenter_renamed_SDL_SetHapticAutocenter 
  else:
    let SDL_HapticSetAutocenter* = SDL_HapticSetAutocenter_renamed_SDL_SetHapticAutocenter 
when SDL_HapticSetGain_renamed_SDL_SetHapticGain is typedesc:
  type
    SDL_HapticSetGain* = SDL_HapticSetGain_renamed_SDL_SetHapticGain 
else:
  when SDL_HapticSetGain_renamed_SDL_SetHapticGain is static:
    const
      SDL_HapticSetGain* = SDL_HapticSetGain_renamed_SDL_SetHapticGain 
  else:
    let SDL_HapticSetGain* = SDL_HapticSetGain_renamed_SDL_SetHapticGain 
when SDL_HapticStopAll_renamed_SDL_StopHapticEffects is typedesc:
  type
    SDL_HapticStopAll* = SDL_HapticStopAll_renamed_SDL_StopHapticEffects 
else:
  when SDL_HapticStopAll_renamed_SDL_StopHapticEffects is static:
    const
      SDL_HapticStopAll* = SDL_HapticStopAll_renamed_SDL_StopHapticEffects 
  else:
    let SDL_HapticStopAll* = SDL_HapticStopAll_renamed_SDL_StopHapticEffects 
when SDL_HapticStopEffect_renamed_SDL_StopHapticEffect is typedesc:
  type
    SDL_HapticStopEffect* = SDL_HapticStopEffect_renamed_SDL_StopHapticEffect 
else:
  when SDL_HapticStopEffect_renamed_SDL_StopHapticEffect is static:
    const
      SDL_HapticStopEffect* = SDL_HapticStopEffect_renamed_SDL_StopHapticEffect 
  else:
    let SDL_HapticStopEffect* = SDL_HapticStopEffect_renamed_SDL_StopHapticEffect 
when SDL_HapticUnpause_renamed_SDL_ResumeHaptic is typedesc:
  type
    SDL_HapticUnpause* = SDL_HapticUnpause_renamed_SDL_ResumeHaptic 
else:
  when SDL_HapticUnpause_renamed_SDL_ResumeHaptic is static:
    const
      SDL_HapticUnpause* = SDL_HapticUnpause_renamed_SDL_ResumeHaptic 
  else:
    let SDL_HapticUnpause* = SDL_HapticUnpause_renamed_SDL_ResumeHaptic 
when SDL_HapticUpdateEffect_renamed_SDL_UpdateHapticEffect is typedesc:
  type
    SDL_HapticUpdateEffect* = SDL_HapticUpdateEffect_renamed_SDL_UpdateHapticEffect 
else:
  when SDL_HapticUpdateEffect_renamed_SDL_UpdateHapticEffect is static:
    const
      SDL_HapticUpdateEffect* = SDL_HapticUpdateEffect_renamed_SDL_UpdateHapticEffect 
  else:
    let SDL_HapticUpdateEffect* = SDL_HapticUpdateEffect_renamed_SDL_UpdateHapticEffect 
when SDL_JoystickIsHaptic_renamed_SDL_IsJoystickHaptic is typedesc:
  type
    SDL_JoystickIsHaptic* = SDL_JoystickIsHaptic_renamed_SDL_IsJoystickHaptic 
else:
  when SDL_JoystickIsHaptic_renamed_SDL_IsJoystickHaptic is static:
    const
      SDL_JoystickIsHaptic* = SDL_JoystickIsHaptic_renamed_SDL_IsJoystickHaptic 
  else:
    let SDL_JoystickIsHaptic* = SDL_JoystickIsHaptic_renamed_SDL_IsJoystickHaptic 
when SDL_MouseIsHaptic_renamed_SDL_IsMouseHaptic is typedesc:
  type
    SDL_MouseIsHaptic* = SDL_MouseIsHaptic_renamed_SDL_IsMouseHaptic 
else:
  when SDL_MouseIsHaptic_renamed_SDL_IsMouseHaptic is static:
    const
      SDL_MouseIsHaptic* = SDL_MouseIsHaptic_renamed_SDL_IsMouseHaptic 
  else:
    let SDL_MouseIsHaptic* = SDL_MouseIsHaptic_renamed_SDL_IsMouseHaptic 
when SDL_DelHintCallback_renamed_SDL_RemoveHintCallback is typedesc:
  type
    SDL_DelHintCallback* = SDL_DelHintCallback_renamed_SDL_RemoveHintCallback 
else:
  when SDL_DelHintCallback_renamed_SDL_RemoveHintCallback is static:
    const
      SDL_DelHintCallback* = SDL_DelHintCallback_renamed_SDL_RemoveHintCallback 
  else:
    let SDL_DelHintCallback* = SDL_DelHintCallback_renamed_SDL_RemoveHintCallback 
when SDL_HINT_ALLOW_TOPMOST_renamed_SDL_HINT_WINDOW_ALLOW_TOPMOST is typedesc:
  type
    SDL_HINT_ALLOW_TOPMOST* = SDL_HINT_ALLOW_TOPMOST_renamed_SDL_HINT_WINDOW_ALLOW_TOPMOST 
else:
  when SDL_HINT_ALLOW_TOPMOST_renamed_SDL_HINT_WINDOW_ALLOW_TOPMOST is static:
    const
      SDL_HINT_ALLOW_TOPMOST* = SDL_HINT_ALLOW_TOPMOST_renamed_SDL_HINT_WINDOW_ALLOW_TOPMOST 
  else:
    let SDL_HINT_ALLOW_TOPMOST* = SDL_HINT_ALLOW_TOPMOST_renamed_SDL_HINT_WINDOW_ALLOW_TOPMOST 
when SDL_HINT_DIRECTINPUT_ENABLED_renamed_SDL_HINT_JOYSTICK_DIRECTINPUT is
    typedesc:
  type
    SDL_HINT_DIRECTINPUT_ENABLED* = SDL_HINT_DIRECTINPUT_ENABLED_renamed_SDL_HINT_JOYSTICK_DIRECTINPUT 
else:
  when SDL_HINT_DIRECTINPUT_ENABLED_renamed_SDL_HINT_JOYSTICK_DIRECTINPUT is
      static:
    const
      SDL_HINT_DIRECTINPUT_ENABLED* = SDL_HINT_DIRECTINPUT_ENABLED_renamed_SDL_HINT_JOYSTICK_DIRECTINPUT 
  else:
    let SDL_HINT_DIRECTINPUT_ENABLED* = SDL_HINT_DIRECTINPUT_ENABLED_renamed_SDL_HINT_JOYSTICK_DIRECTINPUT 
when SDL_HINT_GDK_TEXTINPUT_DEFAULT_renamed_SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT is
    typedesc:
  type
    SDL_HINT_GDK_TEXTINPUT_DEFAULT* = SDL_HINT_GDK_TEXTINPUT_DEFAULT_renamed_SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT 
else:
  when SDL_HINT_GDK_TEXTINPUT_DEFAULT_renamed_SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT is
      static:
    const
      SDL_HINT_GDK_TEXTINPUT_DEFAULT* = SDL_HINT_GDK_TEXTINPUT_DEFAULT_renamed_SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT 
  else:
    let SDL_HINT_GDK_TEXTINPUT_DEFAULT* = SDL_HINT_GDK_TEXTINPUT_DEFAULT_renamed_SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT 
when SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE_renamed_SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE is
    typedesc:
  type
    SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE* = SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE_renamed_SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE 
else:
  when SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE_renamed_SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE is
      static:
    const
      SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE* = SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE_renamed_SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE 
  else:
    let SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE* = SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE_renamed_SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE 
when SDL_HINT_LINUX_DIGITAL_HATS_renamed_SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS is
    typedesc:
  type
    SDL_HINT_LINUX_DIGITAL_HATS* = SDL_HINT_LINUX_DIGITAL_HATS_renamed_SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS 
else:
  when SDL_HINT_LINUX_DIGITAL_HATS_renamed_SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS is
      static:
    const
      SDL_HINT_LINUX_DIGITAL_HATS* = SDL_HINT_LINUX_DIGITAL_HATS_renamed_SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS 
  else:
    let SDL_HINT_LINUX_DIGITAL_HATS* = SDL_HINT_LINUX_DIGITAL_HATS_renamed_SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS 
when SDL_HINT_LINUX_HAT_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES is
    typedesc:
  type
    SDL_HINT_LINUX_HAT_DEADZONES* = SDL_HINT_LINUX_HAT_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES 
else:
  when SDL_HINT_LINUX_HAT_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES is
      static:
    const
      SDL_HINT_LINUX_HAT_DEADZONES* = SDL_HINT_LINUX_HAT_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES 
  else:
    let SDL_HINT_LINUX_HAT_DEADZONES* = SDL_HINT_LINUX_HAT_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES 
when SDL_HINT_LINUX_JOYSTICK_CLASSIC_renamed_SDL_HINT_JOYSTICK_LINUX_CLASSIC is
    typedesc:
  type
    SDL_HINT_LINUX_JOYSTICK_CLASSIC* = SDL_HINT_LINUX_JOYSTICK_CLASSIC_renamed_SDL_HINT_JOYSTICK_LINUX_CLASSIC 
else:
  when SDL_HINT_LINUX_JOYSTICK_CLASSIC_renamed_SDL_HINT_JOYSTICK_LINUX_CLASSIC is
      static:
    const
      SDL_HINT_LINUX_JOYSTICK_CLASSIC* = SDL_HINT_LINUX_JOYSTICK_CLASSIC_renamed_SDL_HINT_JOYSTICK_LINUX_CLASSIC 
  else:
    let SDL_HINT_LINUX_JOYSTICK_CLASSIC* = SDL_HINT_LINUX_JOYSTICK_CLASSIC_renamed_SDL_HINT_JOYSTICK_LINUX_CLASSIC 
when SDL_HINT_LINUX_JOYSTICK_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_DEADZONES is
    typedesc:
  type
    SDL_HINT_LINUX_JOYSTICK_DEADZONES* = SDL_HINT_LINUX_JOYSTICK_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_DEADZONES 
else:
  when SDL_HINT_LINUX_JOYSTICK_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_DEADZONES is
      static:
    const
      SDL_HINT_LINUX_JOYSTICK_DEADZONES* = SDL_HINT_LINUX_JOYSTICK_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_DEADZONES 
  else:
    let SDL_HINT_LINUX_JOYSTICK_DEADZONES* = SDL_HINT_LINUX_JOYSTICK_DEADZONES_renamed_SDL_HINT_JOYSTICK_LINUX_DEADZONES 
when SDL_JOYSTICK_TYPE_GAMECONTROLLER_renamed_SDL_JOYSTICK_TYPE_GAMEPAD is
    typedesc:
  type
    SDL_JOYSTICK_TYPE_GAMECONTROLLER* = SDL_JOYSTICK_TYPE_GAMECONTROLLER_renamed_SDL_JOYSTICK_TYPE_GAMEPAD 
else:
  when SDL_JOYSTICK_TYPE_GAMECONTROLLER_renamed_SDL_JOYSTICK_TYPE_GAMEPAD is
      static:
    const
      SDL_JOYSTICK_TYPE_GAMECONTROLLER* = SDL_JOYSTICK_TYPE_GAMECONTROLLER_renamed_SDL_JOYSTICK_TYPE_GAMEPAD 
  else:
    let SDL_JOYSTICK_TYPE_GAMECONTROLLER* = SDL_JOYSTICK_TYPE_GAMECONTROLLER_renamed_SDL_JOYSTICK_TYPE_GAMEPAD 
when SDL_JoystickAttachVirtualEx_renamed_SDL_AttachVirtualJoystick is typedesc:
  type
    SDL_JoystickAttachVirtualEx* = SDL_JoystickAttachVirtualEx_renamed_SDL_AttachVirtualJoystick 
else:
  when SDL_JoystickAttachVirtualEx_renamed_SDL_AttachVirtualJoystick is static:
    const
      SDL_JoystickAttachVirtualEx* = SDL_JoystickAttachVirtualEx_renamed_SDL_AttachVirtualJoystick 
  else:
    let SDL_JoystickAttachVirtualEx* = SDL_JoystickAttachVirtualEx_renamed_SDL_AttachVirtualJoystick 
when SDL_JoystickClose_renamed_SDL_CloseJoystick is typedesc:
  type
    SDL_JoystickClose* = SDL_JoystickClose_renamed_SDL_CloseJoystick 
else:
  when SDL_JoystickClose_renamed_SDL_CloseJoystick is static:
    const
      SDL_JoystickClose* = SDL_JoystickClose_renamed_SDL_CloseJoystick 
  else:
    let SDL_JoystickClose* = SDL_JoystickClose_renamed_SDL_CloseJoystick 
when SDL_JoystickDetachVirtual_renamed_SDL_DetachVirtualJoystick is typedesc:
  type
    SDL_JoystickDetachVirtual* = SDL_JoystickDetachVirtual_renamed_SDL_DetachVirtualJoystick 
else:
  when SDL_JoystickDetachVirtual_renamed_SDL_DetachVirtualJoystick is static:
    const
      SDL_JoystickDetachVirtual* = SDL_JoystickDetachVirtual_renamed_SDL_DetachVirtualJoystick 
  else:
    let SDL_JoystickDetachVirtual* = SDL_JoystickDetachVirtual_renamed_SDL_DetachVirtualJoystick 
when SDL_JoystickFromInstanceID_renamed_SDL_GetJoystickFromID is typedesc:
  type
    SDL_JoystickFromInstanceID* = SDL_JoystickFromInstanceID_renamed_SDL_GetJoystickFromID 
else:
  when SDL_JoystickFromInstanceID_renamed_SDL_GetJoystickFromID is static:
    const
      SDL_JoystickFromInstanceID* = SDL_JoystickFromInstanceID_renamed_SDL_GetJoystickFromID 
  else:
    let SDL_JoystickFromInstanceID* = SDL_JoystickFromInstanceID_renamed_SDL_GetJoystickFromID 
when SDL_JoystickFromPlayerIndex_renamed_SDL_GetJoystickFromPlayerIndex is
    typedesc:
  type
    SDL_JoystickFromPlayerIndex* = SDL_JoystickFromPlayerIndex_renamed_SDL_GetJoystickFromPlayerIndex 
else:
  when SDL_JoystickFromPlayerIndex_renamed_SDL_GetJoystickFromPlayerIndex is
      static:
    const
      SDL_JoystickFromPlayerIndex* = SDL_JoystickFromPlayerIndex_renamed_SDL_GetJoystickFromPlayerIndex 
  else:
    let SDL_JoystickFromPlayerIndex* = SDL_JoystickFromPlayerIndex_renamed_SDL_GetJoystickFromPlayerIndex 
when SDL_JoystickGUID_renamed_SDL_GUID is typedesc:
  type
    SDL_JoystickGUID* = SDL_JoystickGUID_renamed_SDL_GUID 
else:
  when SDL_JoystickGUID_renamed_SDL_GUID is static:
    const
      SDL_JoystickGUID* = SDL_JoystickGUID_renamed_SDL_GUID 
  else:
    let SDL_JoystickGUID* = SDL_JoystickGUID_renamed_SDL_GUID 
when SDL_JoystickGetAttached_renamed_SDL_JoystickConnected is typedesc:
  type
    SDL_JoystickGetAttached* = SDL_JoystickGetAttached_renamed_SDL_JoystickConnected 
else:
  when SDL_JoystickGetAttached_renamed_SDL_JoystickConnected is static:
    const
      SDL_JoystickGetAttached* = SDL_JoystickGetAttached_renamed_SDL_JoystickConnected 
  else:
    let SDL_JoystickGetAttached* = SDL_JoystickGetAttached_renamed_SDL_JoystickConnected 
when SDL_JoystickGetAxis_renamed_SDL_GetJoystickAxis is typedesc:
  type
    SDL_JoystickGetAxis* = SDL_JoystickGetAxis_renamed_SDL_GetJoystickAxis 
else:
  when SDL_JoystickGetAxis_renamed_SDL_GetJoystickAxis is static:
    const
      SDL_JoystickGetAxis* = SDL_JoystickGetAxis_renamed_SDL_GetJoystickAxis 
  else:
    let SDL_JoystickGetAxis* = SDL_JoystickGetAxis_renamed_SDL_GetJoystickAxis 
when SDL_JoystickGetAxisInitialState_renamed_SDL_GetJoystickAxisInitialState is
    typedesc:
  type
    SDL_JoystickGetAxisInitialState* = SDL_JoystickGetAxisInitialState_renamed_SDL_GetJoystickAxisInitialState 
else:
  when SDL_JoystickGetAxisInitialState_renamed_SDL_GetJoystickAxisInitialState is
      static:
    const
      SDL_JoystickGetAxisInitialState* = SDL_JoystickGetAxisInitialState_renamed_SDL_GetJoystickAxisInitialState 
  else:
    let SDL_JoystickGetAxisInitialState* = SDL_JoystickGetAxisInitialState_renamed_SDL_GetJoystickAxisInitialState 
when SDL_JoystickGetBall_renamed_SDL_GetJoystickBall is typedesc:
  type
    SDL_JoystickGetBall* = SDL_JoystickGetBall_renamed_SDL_GetJoystickBall 
else:
  when SDL_JoystickGetBall_renamed_SDL_GetJoystickBall is static:
    const
      SDL_JoystickGetBall* = SDL_JoystickGetBall_renamed_SDL_GetJoystickBall 
  else:
    let SDL_JoystickGetBall* = SDL_JoystickGetBall_renamed_SDL_GetJoystickBall 
when SDL_JoystickGetButton_renamed_SDL_GetJoystickButton is typedesc:
  type
    SDL_JoystickGetButton* = SDL_JoystickGetButton_renamed_SDL_GetJoystickButton 
else:
  when SDL_JoystickGetButton_renamed_SDL_GetJoystickButton is static:
    const
      SDL_JoystickGetButton* = SDL_JoystickGetButton_renamed_SDL_GetJoystickButton 
  else:
    let SDL_JoystickGetButton* = SDL_JoystickGetButton_renamed_SDL_GetJoystickButton 
when SDL_JoystickGetFirmwareVersion_renamed_SDL_GetJoystickFirmwareVersion is
    typedesc:
  type
    SDL_JoystickGetFirmwareVersion* = SDL_JoystickGetFirmwareVersion_renamed_SDL_GetJoystickFirmwareVersion 
else:
  when SDL_JoystickGetFirmwareVersion_renamed_SDL_GetJoystickFirmwareVersion is
      static:
    const
      SDL_JoystickGetFirmwareVersion* = SDL_JoystickGetFirmwareVersion_renamed_SDL_GetJoystickFirmwareVersion 
  else:
    let SDL_JoystickGetFirmwareVersion* = SDL_JoystickGetFirmwareVersion_renamed_SDL_GetJoystickFirmwareVersion 
when SDL_JoystickGetGUID_renamed_SDL_GetJoystickGUID is typedesc:
  type
    SDL_JoystickGetGUID* = SDL_JoystickGetGUID_renamed_SDL_GetJoystickGUID 
else:
  when SDL_JoystickGetGUID_renamed_SDL_GetJoystickGUID is static:
    const
      SDL_JoystickGetGUID* = SDL_JoystickGetGUID_renamed_SDL_GetJoystickGUID 
  else:
    let SDL_JoystickGetGUID* = SDL_JoystickGetGUID_renamed_SDL_GetJoystickGUID 
when SDL_JoystickGetGUIDFromString_renamed_SDL_GUIDFromString is typedesc:
  type
    SDL_JoystickGetGUIDFromString* = SDL_JoystickGetGUIDFromString_renamed_SDL_GUIDFromString 
else:
  when SDL_JoystickGetGUIDFromString_renamed_SDL_GUIDFromString is static:
    const
      SDL_JoystickGetGUIDFromString* = SDL_JoystickGetGUIDFromString_renamed_SDL_GUIDFromString 
  else:
    let SDL_JoystickGetGUIDFromString* = SDL_JoystickGetGUIDFromString_renamed_SDL_GUIDFromString 
when SDL_JoystickGetHat_renamed_SDL_GetJoystickHat is typedesc:
  type
    SDL_JoystickGetHat* = SDL_JoystickGetHat_renamed_SDL_GetJoystickHat 
else:
  when SDL_JoystickGetHat_renamed_SDL_GetJoystickHat is static:
    const
      SDL_JoystickGetHat* = SDL_JoystickGetHat_renamed_SDL_GetJoystickHat 
  else:
    let SDL_JoystickGetHat* = SDL_JoystickGetHat_renamed_SDL_GetJoystickHat 
when SDL_JoystickGetPlayerIndex_renamed_SDL_GetJoystickPlayerIndex is typedesc:
  type
    SDL_JoystickGetPlayerIndex* = SDL_JoystickGetPlayerIndex_renamed_SDL_GetJoystickPlayerIndex 
else:
  when SDL_JoystickGetPlayerIndex_renamed_SDL_GetJoystickPlayerIndex is static:
    const
      SDL_JoystickGetPlayerIndex* = SDL_JoystickGetPlayerIndex_renamed_SDL_GetJoystickPlayerIndex 
  else:
    let SDL_JoystickGetPlayerIndex* = SDL_JoystickGetPlayerIndex_renamed_SDL_GetJoystickPlayerIndex 
when SDL_JoystickGetProduct_renamed_SDL_GetJoystickProduct is typedesc:
  type
    SDL_JoystickGetProduct* = SDL_JoystickGetProduct_renamed_SDL_GetJoystickProduct 
else:
  when SDL_JoystickGetProduct_renamed_SDL_GetJoystickProduct is static:
    const
      SDL_JoystickGetProduct* = SDL_JoystickGetProduct_renamed_SDL_GetJoystickProduct 
  else:
    let SDL_JoystickGetProduct* = SDL_JoystickGetProduct_renamed_SDL_GetJoystickProduct 
when SDL_JoystickGetProductVersion_renamed_SDL_GetJoystickProductVersion is
    typedesc:
  type
    SDL_JoystickGetProductVersion* = SDL_JoystickGetProductVersion_renamed_SDL_GetJoystickProductVersion 
else:
  when SDL_JoystickGetProductVersion_renamed_SDL_GetJoystickProductVersion is
      static:
    const
      SDL_JoystickGetProductVersion* = SDL_JoystickGetProductVersion_renamed_SDL_GetJoystickProductVersion 
  else:
    let SDL_JoystickGetProductVersion* = SDL_JoystickGetProductVersion_renamed_SDL_GetJoystickProductVersion 
when SDL_JoystickGetSerial_renamed_SDL_GetJoystickSerial is typedesc:
  type
    SDL_JoystickGetSerial* = SDL_JoystickGetSerial_renamed_SDL_GetJoystickSerial 
else:
  when SDL_JoystickGetSerial_renamed_SDL_GetJoystickSerial is static:
    const
      SDL_JoystickGetSerial* = SDL_JoystickGetSerial_renamed_SDL_GetJoystickSerial 
  else:
    let SDL_JoystickGetSerial* = SDL_JoystickGetSerial_renamed_SDL_GetJoystickSerial 
when SDL_JoystickGetType_renamed_SDL_GetJoystickType is typedesc:
  type
    SDL_JoystickGetType* = SDL_JoystickGetType_renamed_SDL_GetJoystickType 
else:
  when SDL_JoystickGetType_renamed_SDL_GetJoystickType is static:
    const
      SDL_JoystickGetType* = SDL_JoystickGetType_renamed_SDL_GetJoystickType 
  else:
    let SDL_JoystickGetType* = SDL_JoystickGetType_renamed_SDL_GetJoystickType 
when SDL_JoystickGetVendor_renamed_SDL_GetJoystickVendor is typedesc:
  type
    SDL_JoystickGetVendor* = SDL_JoystickGetVendor_renamed_SDL_GetJoystickVendor 
else:
  when SDL_JoystickGetVendor_renamed_SDL_GetJoystickVendor is static:
    const
      SDL_JoystickGetVendor* = SDL_JoystickGetVendor_renamed_SDL_GetJoystickVendor 
  else:
    let SDL_JoystickGetVendor* = SDL_JoystickGetVendor_renamed_SDL_GetJoystickVendor 
when SDL_JoystickInstanceID_renamed_SDL_GetJoystickID is typedesc:
  type
    SDL_JoystickInstanceID* = SDL_JoystickInstanceID_renamed_SDL_GetJoystickID 
else:
  when SDL_JoystickInstanceID_renamed_SDL_GetJoystickID is static:
    const
      SDL_JoystickInstanceID* = SDL_JoystickInstanceID_renamed_SDL_GetJoystickID 
  else:
    let SDL_JoystickInstanceID* = SDL_JoystickInstanceID_renamed_SDL_GetJoystickID 
when SDL_JoystickIsVirtual_renamed_SDL_IsJoystickVirtual is typedesc:
  type
    SDL_JoystickIsVirtual* = SDL_JoystickIsVirtual_renamed_SDL_IsJoystickVirtual 
else:
  when SDL_JoystickIsVirtual_renamed_SDL_IsJoystickVirtual is static:
    const
      SDL_JoystickIsVirtual* = SDL_JoystickIsVirtual_renamed_SDL_IsJoystickVirtual 
  else:
    let SDL_JoystickIsVirtual* = SDL_JoystickIsVirtual_renamed_SDL_IsJoystickVirtual 
when SDL_JoystickName_renamed_SDL_GetJoystickName is typedesc:
  type
    SDL_JoystickName* = SDL_JoystickName_renamed_SDL_GetJoystickName 
else:
  when SDL_JoystickName_renamed_SDL_GetJoystickName is static:
    const
      SDL_JoystickName* = SDL_JoystickName_renamed_SDL_GetJoystickName 
  else:
    let SDL_JoystickName* = SDL_JoystickName_renamed_SDL_GetJoystickName 
when SDL_JoystickNumAxes_renamed_SDL_GetNumJoystickAxes is typedesc:
  type
    SDL_JoystickNumAxes* = SDL_JoystickNumAxes_renamed_SDL_GetNumJoystickAxes 
else:
  when SDL_JoystickNumAxes_renamed_SDL_GetNumJoystickAxes is static:
    const
      SDL_JoystickNumAxes* = SDL_JoystickNumAxes_renamed_SDL_GetNumJoystickAxes 
  else:
    let SDL_JoystickNumAxes* = SDL_JoystickNumAxes_renamed_SDL_GetNumJoystickAxes 
when SDL_JoystickNumBalls_renamed_SDL_GetNumJoystickBalls is typedesc:
  type
    SDL_JoystickNumBalls* = SDL_JoystickNumBalls_renamed_SDL_GetNumJoystickBalls 
else:
  when SDL_JoystickNumBalls_renamed_SDL_GetNumJoystickBalls is static:
    const
      SDL_JoystickNumBalls* = SDL_JoystickNumBalls_renamed_SDL_GetNumJoystickBalls 
  else:
    let SDL_JoystickNumBalls* = SDL_JoystickNumBalls_renamed_SDL_GetNumJoystickBalls 
when SDL_JoystickNumButtons_renamed_SDL_GetNumJoystickButtons is typedesc:
  type
    SDL_JoystickNumButtons* = SDL_JoystickNumButtons_renamed_SDL_GetNumJoystickButtons 
else:
  when SDL_JoystickNumButtons_renamed_SDL_GetNumJoystickButtons is static:
    const
      SDL_JoystickNumButtons* = SDL_JoystickNumButtons_renamed_SDL_GetNumJoystickButtons 
  else:
    let SDL_JoystickNumButtons* = SDL_JoystickNumButtons_renamed_SDL_GetNumJoystickButtons 
when SDL_JoystickNumHats_renamed_SDL_GetNumJoystickHats is typedesc:
  type
    SDL_JoystickNumHats* = SDL_JoystickNumHats_renamed_SDL_GetNumJoystickHats 
else:
  when SDL_JoystickNumHats_renamed_SDL_GetNumJoystickHats is static:
    const
      SDL_JoystickNumHats* = SDL_JoystickNumHats_renamed_SDL_GetNumJoystickHats 
  else:
    let SDL_JoystickNumHats* = SDL_JoystickNumHats_renamed_SDL_GetNumJoystickHats 
when SDL_JoystickOpen_renamed_SDL_OpenJoystick is typedesc:
  type
    SDL_JoystickOpen* = SDL_JoystickOpen_renamed_SDL_OpenJoystick 
else:
  when SDL_JoystickOpen_renamed_SDL_OpenJoystick is static:
    const
      SDL_JoystickOpen* = SDL_JoystickOpen_renamed_SDL_OpenJoystick 
  else:
    let SDL_JoystickOpen* = SDL_JoystickOpen_renamed_SDL_OpenJoystick 
when SDL_JoystickPath_renamed_SDL_GetJoystickPath is typedesc:
  type
    SDL_JoystickPath* = SDL_JoystickPath_renamed_SDL_GetJoystickPath 
else:
  when SDL_JoystickPath_renamed_SDL_GetJoystickPath is static:
    const
      SDL_JoystickPath* = SDL_JoystickPath_renamed_SDL_GetJoystickPath 
  else:
    let SDL_JoystickPath* = SDL_JoystickPath_renamed_SDL_GetJoystickPath 
when SDL_JoystickRumble_renamed_SDL_RumbleJoystick is typedesc:
  type
    SDL_JoystickRumble* = SDL_JoystickRumble_renamed_SDL_RumbleJoystick 
else:
  when SDL_JoystickRumble_renamed_SDL_RumbleJoystick is static:
    const
      SDL_JoystickRumble* = SDL_JoystickRumble_renamed_SDL_RumbleJoystick 
  else:
    let SDL_JoystickRumble* = SDL_JoystickRumble_renamed_SDL_RumbleJoystick 
when SDL_JoystickRumbleTriggers_renamed_SDL_RumbleJoystickTriggers is typedesc:
  type
    SDL_JoystickRumbleTriggers* = SDL_JoystickRumbleTriggers_renamed_SDL_RumbleJoystickTriggers 
else:
  when SDL_JoystickRumbleTriggers_renamed_SDL_RumbleJoystickTriggers is static:
    const
      SDL_JoystickRumbleTriggers* = SDL_JoystickRumbleTriggers_renamed_SDL_RumbleJoystickTriggers 
  else:
    let SDL_JoystickRumbleTriggers* = SDL_JoystickRumbleTriggers_renamed_SDL_RumbleJoystickTriggers 
when SDL_JoystickSendEffect_renamed_SDL_SendJoystickEffect is typedesc:
  type
    SDL_JoystickSendEffect* = SDL_JoystickSendEffect_renamed_SDL_SendJoystickEffect 
else:
  when SDL_JoystickSendEffect_renamed_SDL_SendJoystickEffect is static:
    const
      SDL_JoystickSendEffect* = SDL_JoystickSendEffect_renamed_SDL_SendJoystickEffect 
  else:
    let SDL_JoystickSendEffect* = SDL_JoystickSendEffect_renamed_SDL_SendJoystickEffect 
when SDL_JoystickSetLED_renamed_SDL_SetJoystickLED is typedesc:
  type
    SDL_JoystickSetLED* = SDL_JoystickSetLED_renamed_SDL_SetJoystickLED 
else:
  when SDL_JoystickSetLED_renamed_SDL_SetJoystickLED is static:
    const
      SDL_JoystickSetLED* = SDL_JoystickSetLED_renamed_SDL_SetJoystickLED 
  else:
    let SDL_JoystickSetLED* = SDL_JoystickSetLED_renamed_SDL_SetJoystickLED 
when SDL_JoystickSetPlayerIndex_renamed_SDL_SetJoystickPlayerIndex is typedesc:
  type
    SDL_JoystickSetPlayerIndex* = SDL_JoystickSetPlayerIndex_renamed_SDL_SetJoystickPlayerIndex 
else:
  when SDL_JoystickSetPlayerIndex_renamed_SDL_SetJoystickPlayerIndex is static:
    const
      SDL_JoystickSetPlayerIndex* = SDL_JoystickSetPlayerIndex_renamed_SDL_SetJoystickPlayerIndex 
  else:
    let SDL_JoystickSetPlayerIndex* = SDL_JoystickSetPlayerIndex_renamed_SDL_SetJoystickPlayerIndex 
when SDL_JoystickSetVirtualAxis_renamed_SDL_SetJoystickVirtualAxis is typedesc:
  type
    SDL_JoystickSetVirtualAxis* = SDL_JoystickSetVirtualAxis_renamed_SDL_SetJoystickVirtualAxis 
else:
  when SDL_JoystickSetVirtualAxis_renamed_SDL_SetJoystickVirtualAxis is static:
    const
      SDL_JoystickSetVirtualAxis* = SDL_JoystickSetVirtualAxis_renamed_SDL_SetJoystickVirtualAxis 
  else:
    let SDL_JoystickSetVirtualAxis* = SDL_JoystickSetVirtualAxis_renamed_SDL_SetJoystickVirtualAxis 
when SDL_JoystickSetVirtualButton_renamed_SDL_SetJoystickVirtualButton is
    typedesc:
  type
    SDL_JoystickSetVirtualButton* = SDL_JoystickSetVirtualButton_renamed_SDL_SetJoystickVirtualButton 
else:
  when SDL_JoystickSetVirtualButton_renamed_SDL_SetJoystickVirtualButton is
      static:
    const
      SDL_JoystickSetVirtualButton* = SDL_JoystickSetVirtualButton_renamed_SDL_SetJoystickVirtualButton 
  else:
    let SDL_JoystickSetVirtualButton* = SDL_JoystickSetVirtualButton_renamed_SDL_SetJoystickVirtualButton 
when SDL_JoystickSetVirtualHat_renamed_SDL_SetJoystickVirtualHat is typedesc:
  type
    SDL_JoystickSetVirtualHat* = SDL_JoystickSetVirtualHat_renamed_SDL_SetJoystickVirtualHat 
else:
  when SDL_JoystickSetVirtualHat_renamed_SDL_SetJoystickVirtualHat is static:
    const
      SDL_JoystickSetVirtualHat* = SDL_JoystickSetVirtualHat_renamed_SDL_SetJoystickVirtualHat 
  else:
    let SDL_JoystickSetVirtualHat* = SDL_JoystickSetVirtualHat_renamed_SDL_SetJoystickVirtualHat 
when SDL_JoystickUpdate_renamed_SDL_UpdateJoysticks is typedesc:
  type
    SDL_JoystickUpdate* = SDL_JoystickUpdate_renamed_SDL_UpdateJoysticks 
else:
  when SDL_JoystickUpdate_renamed_SDL_UpdateJoysticks is static:
    const
      SDL_JoystickUpdate* = SDL_JoystickUpdate_renamed_SDL_UpdateJoysticks 
  else:
    let SDL_JoystickUpdate* = SDL_JoystickUpdate_renamed_SDL_UpdateJoysticks 
when SDL_IsScreenKeyboardShown_renamed_SDL_ScreenKeyboardShown is typedesc:
  type
    SDL_IsScreenKeyboardShown* = SDL_IsScreenKeyboardShown_renamed_SDL_ScreenKeyboardShown 
else:
  when SDL_IsScreenKeyboardShown_renamed_SDL_ScreenKeyboardShown is static:
    const
      SDL_IsScreenKeyboardShown* = SDL_IsScreenKeyboardShown_renamed_SDL_ScreenKeyboardShown 
  else:
    let SDL_IsScreenKeyboardShown* = SDL_IsScreenKeyboardShown_renamed_SDL_ScreenKeyboardShown 
when SDL_IsTextInputActive_renamed_SDL_TextInputActive is typedesc:
  type
    SDL_IsTextInputActive* = SDL_IsTextInputActive_renamed_SDL_TextInputActive 
else:
  when SDL_IsTextInputActive_renamed_SDL_TextInputActive is static:
    const
      SDL_IsTextInputActive* = SDL_IsTextInputActive_renamed_SDL_TextInputActive 
  else:
    let SDL_IsTextInputActive* = SDL_IsTextInputActive_renamed_SDL_TextInputActive 
when KMOD_ALT_renamed_SDL_KMOD_ALT is typedesc:
  type
    KMOD_ALT* = KMOD_ALT_renamed_SDL_KMOD_ALT 
else:
  when KMOD_ALT_renamed_SDL_KMOD_ALT is static:
    const
      KMOD_ALT* = KMOD_ALT_renamed_SDL_KMOD_ALT 
  else:
    let KMOD_ALT* = KMOD_ALT_renamed_SDL_KMOD_ALT 
when KMOD_CAPS_renamed_SDL_KMOD_CAPS is typedesc:
  type
    KMOD_CAPS* = KMOD_CAPS_renamed_SDL_KMOD_CAPS 
else:
  when KMOD_CAPS_renamed_SDL_KMOD_CAPS is static:
    const
      KMOD_CAPS* = KMOD_CAPS_renamed_SDL_KMOD_CAPS 
  else:
    let KMOD_CAPS* = KMOD_CAPS_renamed_SDL_KMOD_CAPS 
when KMOD_CTRL_renamed_SDL_KMOD_CTRL is typedesc:
  type
    KMOD_CTRL* = KMOD_CTRL_renamed_SDL_KMOD_CTRL 
else:
  when KMOD_CTRL_renamed_SDL_KMOD_CTRL is static:
    const
      KMOD_CTRL* = KMOD_CTRL_renamed_SDL_KMOD_CTRL 
  else:
    let KMOD_CTRL* = KMOD_CTRL_renamed_SDL_KMOD_CTRL 
when KMOD_GUI_renamed_SDL_KMOD_GUI is typedesc:
  type
    KMOD_GUI* = KMOD_GUI_renamed_SDL_KMOD_GUI 
else:
  when KMOD_GUI_renamed_SDL_KMOD_GUI is static:
    const
      KMOD_GUI* = KMOD_GUI_renamed_SDL_KMOD_GUI 
  else:
    let KMOD_GUI* = KMOD_GUI_renamed_SDL_KMOD_GUI 
when KMOD_LALT_renamed_SDL_KMOD_LALT is typedesc:
  type
    KMOD_LALT* = KMOD_LALT_renamed_SDL_KMOD_LALT 
else:
  when KMOD_LALT_renamed_SDL_KMOD_LALT is static:
    const
      KMOD_LALT* = KMOD_LALT_renamed_SDL_KMOD_LALT 
  else:
    let KMOD_LALT* = KMOD_LALT_renamed_SDL_KMOD_LALT 
when KMOD_LCTRL_renamed_SDL_KMOD_LCTRL is typedesc:
  type
    KMOD_LCTRL* = KMOD_LCTRL_renamed_SDL_KMOD_LCTRL 
else:
  when KMOD_LCTRL_renamed_SDL_KMOD_LCTRL is static:
    const
      KMOD_LCTRL* = KMOD_LCTRL_renamed_SDL_KMOD_LCTRL 
  else:
    let KMOD_LCTRL* = KMOD_LCTRL_renamed_SDL_KMOD_LCTRL 
when KMOD_LGUI_renamed_SDL_KMOD_LGUI is typedesc:
  type
    KMOD_LGUI* = KMOD_LGUI_renamed_SDL_KMOD_LGUI 
else:
  when KMOD_LGUI_renamed_SDL_KMOD_LGUI is static:
    const
      KMOD_LGUI* = KMOD_LGUI_renamed_SDL_KMOD_LGUI 
  else:
    let KMOD_LGUI* = KMOD_LGUI_renamed_SDL_KMOD_LGUI 
when KMOD_LSHIFT_renamed_SDL_KMOD_LSHIFT is typedesc:
  type
    KMOD_LSHIFT* = KMOD_LSHIFT_renamed_SDL_KMOD_LSHIFT 
else:
  when KMOD_LSHIFT_renamed_SDL_KMOD_LSHIFT is static:
    const
      KMOD_LSHIFT* = KMOD_LSHIFT_renamed_SDL_KMOD_LSHIFT 
  else:
    let KMOD_LSHIFT* = KMOD_LSHIFT_renamed_SDL_KMOD_LSHIFT 
when KMOD_MODE_renamed_SDL_KMOD_MODE is typedesc:
  type
    KMOD_MODE* = KMOD_MODE_renamed_SDL_KMOD_MODE 
else:
  when KMOD_MODE_renamed_SDL_KMOD_MODE is static:
    const
      KMOD_MODE* = KMOD_MODE_renamed_SDL_KMOD_MODE 
  else:
    let KMOD_MODE* = KMOD_MODE_renamed_SDL_KMOD_MODE 
when KMOD_NONE_renamed_SDL_KMOD_NONE is typedesc:
  type
    KMOD_NONE* = KMOD_NONE_renamed_SDL_KMOD_NONE 
else:
  when KMOD_NONE_renamed_SDL_KMOD_NONE is static:
    const
      KMOD_NONE* = KMOD_NONE_renamed_SDL_KMOD_NONE 
  else:
    let KMOD_NONE* = KMOD_NONE_renamed_SDL_KMOD_NONE 
when KMOD_NUM_renamed_SDL_KMOD_NUM is typedesc:
  type
    KMOD_NUM* = KMOD_NUM_renamed_SDL_KMOD_NUM 
else:
  when KMOD_NUM_renamed_SDL_KMOD_NUM is static:
    const
      KMOD_NUM* = KMOD_NUM_renamed_SDL_KMOD_NUM 
  else:
    let KMOD_NUM* = KMOD_NUM_renamed_SDL_KMOD_NUM 
when KMOD_RALT_renamed_SDL_KMOD_RALT is typedesc:
  type
    KMOD_RALT* = KMOD_RALT_renamed_SDL_KMOD_RALT 
else:
  when KMOD_RALT_renamed_SDL_KMOD_RALT is static:
    const
      KMOD_RALT* = KMOD_RALT_renamed_SDL_KMOD_RALT 
  else:
    let KMOD_RALT* = KMOD_RALT_renamed_SDL_KMOD_RALT 
when KMOD_RCTRL_renamed_SDL_KMOD_RCTRL is typedesc:
  type
    KMOD_RCTRL* = KMOD_RCTRL_renamed_SDL_KMOD_RCTRL 
else:
  when KMOD_RCTRL_renamed_SDL_KMOD_RCTRL is static:
    const
      KMOD_RCTRL* = KMOD_RCTRL_renamed_SDL_KMOD_RCTRL 
  else:
    let KMOD_RCTRL* = KMOD_RCTRL_renamed_SDL_KMOD_RCTRL 
when KMOD_RGUI_renamed_SDL_KMOD_RGUI is typedesc:
  type
    KMOD_RGUI* = KMOD_RGUI_renamed_SDL_KMOD_RGUI 
else:
  when KMOD_RGUI_renamed_SDL_KMOD_RGUI is static:
    const
      KMOD_RGUI* = KMOD_RGUI_renamed_SDL_KMOD_RGUI 
  else:
    let KMOD_RGUI* = KMOD_RGUI_renamed_SDL_KMOD_RGUI 
when KMOD_RSHIFT_renamed_SDL_KMOD_RSHIFT is typedesc:
  type
    KMOD_RSHIFT* = KMOD_RSHIFT_renamed_SDL_KMOD_RSHIFT 
else:
  when KMOD_RSHIFT_renamed_SDL_KMOD_RSHIFT is static:
    const
      KMOD_RSHIFT* = KMOD_RSHIFT_renamed_SDL_KMOD_RSHIFT 
  else:
    let KMOD_RSHIFT* = KMOD_RSHIFT_renamed_SDL_KMOD_RSHIFT 
when KMOD_SCROLL_renamed_SDL_KMOD_SCROLL is typedesc:
  type
    KMOD_SCROLL* = KMOD_SCROLL_renamed_SDL_KMOD_SCROLL 
else:
  when KMOD_SCROLL_renamed_SDL_KMOD_SCROLL is static:
    const
      KMOD_SCROLL* = KMOD_SCROLL_renamed_SDL_KMOD_SCROLL 
  else:
    let KMOD_SCROLL* = KMOD_SCROLL_renamed_SDL_KMOD_SCROLL 
when KMOD_SHIFT_renamed_SDL_KMOD_SHIFT is typedesc:
  type
    KMOD_SHIFT* = KMOD_SHIFT_renamed_SDL_KMOD_SHIFT 
else:
  when KMOD_SHIFT_renamed_SDL_KMOD_SHIFT is static:
    const
      KMOD_SHIFT* = KMOD_SHIFT_renamed_SDL_KMOD_SHIFT 
  else:
    let KMOD_SHIFT* = KMOD_SHIFT_renamed_SDL_KMOD_SHIFT 
when SDLK_AUDIOFASTFORWARD_renamed_SDLK_MEDIA_FAST_FORWARD is typedesc:
  type
    SDLK_AUDIOFASTFORWARD* = SDLK_AUDIOFASTFORWARD_renamed_SDLK_MEDIA_FAST_FORWARD 
else:
  when SDLK_AUDIOFASTFORWARD_renamed_SDLK_MEDIA_FAST_FORWARD is static:
    const
      SDLK_AUDIOFASTFORWARD* = SDLK_AUDIOFASTFORWARD_renamed_SDLK_MEDIA_FAST_FORWARD 
  else:
    let SDLK_AUDIOFASTFORWARD* = SDLK_AUDIOFASTFORWARD_renamed_SDLK_MEDIA_FAST_FORWARD 
when SDLK_AUDIOMUTE_renamed_SDLK_MUTE is typedesc:
  type
    SDLK_AUDIOMUTE* = SDLK_AUDIOMUTE_renamed_SDLK_MUTE 
else:
  when SDLK_AUDIOMUTE_renamed_SDLK_MUTE is static:
    const
      SDLK_AUDIOMUTE* = SDLK_AUDIOMUTE_renamed_SDLK_MUTE 
  else:
    let SDLK_AUDIOMUTE* = SDLK_AUDIOMUTE_renamed_SDLK_MUTE 
when SDLK_AUDIONEXT_renamed_SDLK_MEDIA_NEXT_TRACK is typedesc:
  type
    SDLK_AUDIONEXT* = SDLK_AUDIONEXT_renamed_SDLK_MEDIA_NEXT_TRACK 
else:
  when SDLK_AUDIONEXT_renamed_SDLK_MEDIA_NEXT_TRACK is static:
    const
      SDLK_AUDIONEXT* = SDLK_AUDIONEXT_renamed_SDLK_MEDIA_NEXT_TRACK 
  else:
    let SDLK_AUDIONEXT* = SDLK_AUDIONEXT_renamed_SDLK_MEDIA_NEXT_TRACK 
when SDLK_AUDIOPLAY_renamed_SDLK_MEDIA_PLAY is typedesc:
  type
    SDLK_AUDIOPLAY* = SDLK_AUDIOPLAY_renamed_SDLK_MEDIA_PLAY 
else:
  when SDLK_AUDIOPLAY_renamed_SDLK_MEDIA_PLAY is static:
    const
      SDLK_AUDIOPLAY* = SDLK_AUDIOPLAY_renamed_SDLK_MEDIA_PLAY 
  else:
    let SDLK_AUDIOPLAY* = SDLK_AUDIOPLAY_renamed_SDLK_MEDIA_PLAY 
when SDLK_AUDIOPREV_renamed_SDLK_MEDIA_PREVIOUS_TRACK is typedesc:
  type
    SDLK_AUDIOPREV* = SDLK_AUDIOPREV_renamed_SDLK_MEDIA_PREVIOUS_TRACK 
else:
  when SDLK_AUDIOPREV_renamed_SDLK_MEDIA_PREVIOUS_TRACK is static:
    const
      SDLK_AUDIOPREV* = SDLK_AUDIOPREV_renamed_SDLK_MEDIA_PREVIOUS_TRACK 
  else:
    let SDLK_AUDIOPREV* = SDLK_AUDIOPREV_renamed_SDLK_MEDIA_PREVIOUS_TRACK 
when SDLK_AUDIOREWIND_renamed_SDLK_MEDIA_REWIND is typedesc:
  type
    SDLK_AUDIOREWIND* = SDLK_AUDIOREWIND_renamed_SDLK_MEDIA_REWIND 
else:
  when SDLK_AUDIOREWIND_renamed_SDLK_MEDIA_REWIND is static:
    const
      SDLK_AUDIOREWIND* = SDLK_AUDIOREWIND_renamed_SDLK_MEDIA_REWIND 
  else:
    let SDLK_AUDIOREWIND* = SDLK_AUDIOREWIND_renamed_SDLK_MEDIA_REWIND 
when SDLK_AUDIOSTOP_renamed_SDLK_MEDIA_STOP is typedesc:
  type
    SDLK_AUDIOSTOP* = SDLK_AUDIOSTOP_renamed_SDLK_MEDIA_STOP 
else:
  when SDLK_AUDIOSTOP_renamed_SDLK_MEDIA_STOP is static:
    const
      SDLK_AUDIOSTOP* = SDLK_AUDIOSTOP_renamed_SDLK_MEDIA_STOP 
  else:
    let SDLK_AUDIOSTOP* = SDLK_AUDIOSTOP_renamed_SDLK_MEDIA_STOP 
when SDLK_BACKQUOTE_renamed_SDLK_GRAVE is typedesc:
  type
    SDLK_BACKQUOTE* = SDLK_BACKQUOTE_renamed_SDLK_GRAVE 
else:
  when SDLK_BACKQUOTE_renamed_SDLK_GRAVE is static:
    const
      SDLK_BACKQUOTE* = SDLK_BACKQUOTE_renamed_SDLK_GRAVE 
  else:
    let SDLK_BACKQUOTE* = SDLK_BACKQUOTE_renamed_SDLK_GRAVE 
when SDLK_EJECT_renamed_SDLK_MEDIA_EJECT is typedesc:
  type
    SDLK_EJECT* = SDLK_EJECT_renamed_SDLK_MEDIA_EJECT 
else:
  when SDLK_EJECT_renamed_SDLK_MEDIA_EJECT is static:
    const
      SDLK_EJECT* = SDLK_EJECT_renamed_SDLK_MEDIA_EJECT 
  else:
    let SDLK_EJECT* = SDLK_EJECT_renamed_SDLK_MEDIA_EJECT 
when SDLK_MEDIASELECT_renamed_SDLK_MEDIA_SELECT is typedesc:
  type
    SDLK_MEDIASELECT_const* = SDLK_MEDIASELECT_renamed_SDLK_MEDIA_SELECT 
else:
  when SDLK_MEDIASELECT_renamed_SDLK_MEDIA_SELECT is static:
    const
      SDLK_MEDIASELECT_const* = SDLK_MEDIASELECT_renamed_SDLK_MEDIA_SELECT 
  else:
    let SDLK_MEDIASELECT_const* = SDLK_MEDIASELECT_renamed_SDLK_MEDIA_SELECT 
when SDLK_QUOTE_renamed_SDLK_APOSTROPHE is typedesc:
  type
    SDLK_QUOTE* = SDLK_QUOTE_renamed_SDLK_APOSTROPHE 
else:
  when SDLK_QUOTE_renamed_SDLK_APOSTROPHE is static:
    const
      SDLK_QUOTE* = SDLK_QUOTE_renamed_SDLK_APOSTROPHE 
  else:
    let SDLK_QUOTE* = SDLK_QUOTE_renamed_SDLK_APOSTROPHE 
when SDLK_QUOTEDBL_renamed_SDLK_DBLAPOSTROPHE is typedesc:
  type
    SDLK_QUOTEDBL* = SDLK_QUOTEDBL_renamed_SDLK_DBLAPOSTROPHE 
else:
  when SDLK_QUOTEDBL_renamed_SDLK_DBLAPOSTROPHE is static:
    const
      SDLK_QUOTEDBL* = SDLK_QUOTEDBL_renamed_SDLK_DBLAPOSTROPHE 
  else:
    let SDLK_QUOTEDBL* = SDLK_QUOTEDBL_renamed_SDLK_DBLAPOSTROPHE 
when SDLK_a_renamed_SDLK_A is typedesc:
  type
    SDLK_a_const* = SDLK_a_renamed_SDLK_A 
else:
  when SDLK_a_renamed_SDLK_A is static:
    const
      SDLK_a_const* = SDLK_a_renamed_SDLK_A 
  else:
    let SDLK_a_const* = SDLK_a_renamed_SDLK_A 
when SDLK_b_renamed_SDLK_B is typedesc:
  type
    SDLK_b_const* = SDLK_b_renamed_SDLK_B 
else:
  when SDLK_b_renamed_SDLK_B is static:
    const
      SDLK_b_const* = SDLK_b_renamed_SDLK_B 
  else:
    let SDLK_b_const* = SDLK_b_renamed_SDLK_B 
when SDLK_c_renamed_SDLK_C is typedesc:
  type
    SDLK_c_const* = SDLK_c_renamed_SDLK_C 
else:
  when SDLK_c_renamed_SDLK_C is static:
    const
      SDLK_c_const* = SDLK_c_renamed_SDLK_C 
  else:
    let SDLK_c_const* = SDLK_c_renamed_SDLK_C 
when SDLK_d_renamed_SDLK_D is typedesc:
  type
    SDLK_d_const* = SDLK_d_renamed_SDLK_D 
else:
  when SDLK_d_renamed_SDLK_D is static:
    const
      SDLK_d_const* = SDLK_d_renamed_SDLK_D 
  else:
    let SDLK_d_const* = SDLK_d_renamed_SDLK_D 
when SDLK_e_renamed_SDLK_E is typedesc:
  type
    SDLK_e_const* = SDLK_e_renamed_SDLK_E 
else:
  when SDLK_e_renamed_SDLK_E is static:
    const
      SDLK_e_const* = SDLK_e_renamed_SDLK_E 
  else:
    let SDLK_e_const* = SDLK_e_renamed_SDLK_E 
when SDLK_f_renamed_SDLK_F is typedesc:
  type
    SDLK_f_const* = SDLK_f_renamed_SDLK_F 
else:
  when SDLK_f_renamed_SDLK_F is static:
    const
      SDLK_f_const* = SDLK_f_renamed_SDLK_F 
  else:
    let SDLK_f_const* = SDLK_f_renamed_SDLK_F 
when SDLK_g_renamed_SDLK_G is typedesc:
  type
    SDLK_g_const* = SDLK_g_renamed_SDLK_G 
else:
  when SDLK_g_renamed_SDLK_G is static:
    const
      SDLK_g_const* = SDLK_g_renamed_SDLK_G 
  else:
    let SDLK_g_const* = SDLK_g_renamed_SDLK_G 
when SDLK_h_renamed_SDLK_H is typedesc:
  type
    SDLK_h_const* = SDLK_h_renamed_SDLK_H 
else:
  when SDLK_h_renamed_SDLK_H is static:
    const
      SDLK_h_const* = SDLK_h_renamed_SDLK_H 
  else:
    let SDLK_h_const* = SDLK_h_renamed_SDLK_H 
when SDLK_i_renamed_SDLK_I is typedesc:
  type
    SDLK_i_const* = SDLK_i_renamed_SDLK_I 
else:
  when SDLK_i_renamed_SDLK_I is static:
    const
      SDLK_i_const* = SDLK_i_renamed_SDLK_I 
  else:
    let SDLK_i_const* = SDLK_i_renamed_SDLK_I 
when SDLK_j_renamed_SDLK_J is typedesc:
  type
    SDLK_j_const* = SDLK_j_renamed_SDLK_J 
else:
  when SDLK_j_renamed_SDLK_J is static:
    const
      SDLK_j_const* = SDLK_j_renamed_SDLK_J 
  else:
    let SDLK_j_const* = SDLK_j_renamed_SDLK_J 
when SDLK_k_renamed_SDLK_K is typedesc:
  type
    SDLK_k_const* = SDLK_k_renamed_SDLK_K 
else:
  when SDLK_k_renamed_SDLK_K is static:
    const
      SDLK_k_const* = SDLK_k_renamed_SDLK_K 
  else:
    let SDLK_k_const* = SDLK_k_renamed_SDLK_K 
when SDLK_l_renamed_SDLK_L is typedesc:
  type
    SDLK_l_const* = SDLK_l_renamed_SDLK_L 
else:
  when SDLK_l_renamed_SDLK_L is static:
    const
      SDLK_l_const* = SDLK_l_renamed_SDLK_L 
  else:
    let SDLK_l_const* = SDLK_l_renamed_SDLK_L 
when SDLK_m_renamed_SDLK_M is typedesc:
  type
    SDLK_m_const* = SDLK_m_renamed_SDLK_M 
else:
  when SDLK_m_renamed_SDLK_M is static:
    const
      SDLK_m_const* = SDLK_m_renamed_SDLK_M 
  else:
    let SDLK_m_const* = SDLK_m_renamed_SDLK_M 
when SDLK_n_renamed_SDLK_N is typedesc:
  type
    SDLK_n_const* = SDLK_n_renamed_SDLK_N 
else:
  when SDLK_n_renamed_SDLK_N is static:
    const
      SDLK_n_const* = SDLK_n_renamed_SDLK_N 
  else:
    let SDLK_n_const* = SDLK_n_renamed_SDLK_N 
when SDLK_o_renamed_SDLK_O is typedesc:
  type
    SDLK_o_const* = SDLK_o_renamed_SDLK_O 
else:
  when SDLK_o_renamed_SDLK_O is static:
    const
      SDLK_o_const* = SDLK_o_renamed_SDLK_O 
  else:
    let SDLK_o_const* = SDLK_o_renamed_SDLK_O 
when SDLK_p_renamed_SDLK_P is typedesc:
  type
    SDLK_p_const* = SDLK_p_renamed_SDLK_P 
else:
  when SDLK_p_renamed_SDLK_P is static:
    const
      SDLK_p_const* = SDLK_p_renamed_SDLK_P 
  else:
    let SDLK_p_const* = SDLK_p_renamed_SDLK_P 
when SDLK_q_renamed_SDLK_Q is typedesc:
  type
    SDLK_q_const* = SDLK_q_renamed_SDLK_Q 
else:
  when SDLK_q_renamed_SDLK_Q is static:
    const
      SDLK_q_const* = SDLK_q_renamed_SDLK_Q 
  else:
    let SDLK_q_const* = SDLK_q_renamed_SDLK_Q 
when SDLK_r_renamed_SDLK_R is typedesc:
  type
    SDLK_r_const* = SDLK_r_renamed_SDLK_R 
else:
  when SDLK_r_renamed_SDLK_R is static:
    const
      SDLK_r_const* = SDLK_r_renamed_SDLK_R 
  else:
    let SDLK_r_const* = SDLK_r_renamed_SDLK_R 
when SDLK_s_renamed_SDLK_S is typedesc:
  type
    SDLK_s_const* = SDLK_s_renamed_SDLK_S 
else:
  when SDLK_s_renamed_SDLK_S is static:
    const
      SDLK_s_const* = SDLK_s_renamed_SDLK_S 
  else:
    let SDLK_s_const* = SDLK_s_renamed_SDLK_S 
when SDLK_t_renamed_SDLK_T is typedesc:
  type
    SDLK_t_const* = SDLK_t_renamed_SDLK_T 
else:
  when SDLK_t_renamed_SDLK_T is static:
    const
      SDLK_t_const* = SDLK_t_renamed_SDLK_T 
  else:
    let SDLK_t_const* = SDLK_t_renamed_SDLK_T 
when SDLK_u_renamed_SDLK_U is typedesc:
  type
    SDLK_u_const* = SDLK_u_renamed_SDLK_U 
else:
  when SDLK_u_renamed_SDLK_U is static:
    const
      SDLK_u_const* = SDLK_u_renamed_SDLK_U 
  else:
    let SDLK_u_const* = SDLK_u_renamed_SDLK_U 
when SDLK_v_renamed_SDLK_V is typedesc:
  type
    SDLK_v_const* = SDLK_v_renamed_SDLK_V 
else:
  when SDLK_v_renamed_SDLK_V is static:
    const
      SDLK_v_const* = SDLK_v_renamed_SDLK_V 
  else:
    let SDLK_v_const* = SDLK_v_renamed_SDLK_V 
when SDLK_w_renamed_SDLK_W is typedesc:
  type
    SDLK_w_const* = SDLK_w_renamed_SDLK_W 
else:
  when SDLK_w_renamed_SDLK_W is static:
    const
      SDLK_w_const* = SDLK_w_renamed_SDLK_W 
  else:
    let SDLK_w_const* = SDLK_w_renamed_SDLK_W 
when SDLK_x_renamed_SDLK_X is typedesc:
  type
    SDLK_x_const* = SDLK_x_renamed_SDLK_X 
else:
  when SDLK_x_renamed_SDLK_X is static:
    const
      SDLK_x_const* = SDLK_x_renamed_SDLK_X 
  else:
    let SDLK_x_const* = SDLK_x_renamed_SDLK_X 
when SDLK_y_renamed_SDLK_Y is typedesc:
  type
    SDLK_y_const* = SDLK_y_renamed_SDLK_Y 
else:
  when SDLK_y_renamed_SDLK_Y is static:
    const
      SDLK_y_const* = SDLK_y_renamed_SDLK_Y 
  else:
    let SDLK_y_const* = SDLK_y_renamed_SDLK_Y 
when SDLK_z_renamed_SDLK_Z is typedesc:
  type
    SDLK_z_const* = SDLK_z_renamed_SDLK_Z 
else:
  when SDLK_z_renamed_SDLK_Z is static:
    const
      SDLK_z_const* = SDLK_z_renamed_SDLK_Z 
  else:
    let SDLK_z_const* = SDLK_z_renamed_SDLK_Z 
when SDL_LogGetOutputFunction_renamed_SDL_GetLogOutputFunction is typedesc:
  type
    SDL_LogGetOutputFunction* = SDL_LogGetOutputFunction_renamed_SDL_GetLogOutputFunction 
else:
  when SDL_LogGetOutputFunction_renamed_SDL_GetLogOutputFunction is static:
    const
      SDL_LogGetOutputFunction* = SDL_LogGetOutputFunction_renamed_SDL_GetLogOutputFunction 
  else:
    let SDL_LogGetOutputFunction* = SDL_LogGetOutputFunction_renamed_SDL_GetLogOutputFunction 
when SDL_LogGetPriority_renamed_SDL_GetLogPriority is typedesc:
  type
    SDL_LogGetPriority* = SDL_LogGetPriority_renamed_SDL_GetLogPriority 
else:
  when SDL_LogGetPriority_renamed_SDL_GetLogPriority is static:
    const
      SDL_LogGetPriority* = SDL_LogGetPriority_renamed_SDL_GetLogPriority 
  else:
    let SDL_LogGetPriority* = SDL_LogGetPriority_renamed_SDL_GetLogPriority 
when SDL_LogResetPriorities_renamed_SDL_ResetLogPriorities is typedesc:
  type
    SDL_LogResetPriorities* = SDL_LogResetPriorities_renamed_SDL_ResetLogPriorities 
else:
  when SDL_LogResetPriorities_renamed_SDL_ResetLogPriorities is static:
    const
      SDL_LogResetPriorities* = SDL_LogResetPriorities_renamed_SDL_ResetLogPriorities 
  else:
    let SDL_LogResetPriorities* = SDL_LogResetPriorities_renamed_SDL_ResetLogPriorities 
when SDL_LogSetAllPriority_renamed_SDL_SetLogPriorities is typedesc:
  type
    SDL_LogSetAllPriority* = SDL_LogSetAllPriority_renamed_SDL_SetLogPriorities 
else:
  when SDL_LogSetAllPriority_renamed_SDL_SetLogPriorities is static:
    const
      SDL_LogSetAllPriority* = SDL_LogSetAllPriority_renamed_SDL_SetLogPriorities 
  else:
    let SDL_LogSetAllPriority* = SDL_LogSetAllPriority_renamed_SDL_SetLogPriorities 
when SDL_LogSetOutputFunction_renamed_SDL_SetLogOutputFunction is typedesc:
  type
    SDL_LogSetOutputFunction* = SDL_LogSetOutputFunction_renamed_SDL_SetLogOutputFunction 
else:
  when SDL_LogSetOutputFunction_renamed_SDL_SetLogOutputFunction is static:
    const
      SDL_LogSetOutputFunction* = SDL_LogSetOutputFunction_renamed_SDL_SetLogOutputFunction 
  else:
    let SDL_LogSetOutputFunction* = SDL_LogSetOutputFunction_renamed_SDL_SetLogOutputFunction 
when SDL_LogSetPriority_renamed_SDL_SetLogPriority is typedesc:
  type
    SDL_LogSetPriority* = SDL_LogSetPriority_renamed_SDL_SetLogPriority 
else:
  when SDL_LogSetPriority_renamed_SDL_SetLogPriority is static:
    const
      SDL_LogSetPriority* = SDL_LogSetPriority_renamed_SDL_SetLogPriority 
  else:
    let SDL_LogSetPriority* = SDL_LogSetPriority_renamed_SDL_SetLogPriority 
when SDL_NUM_LOG_PRIORITIES_renamed_SDL_LOG_PRIORITY_COUNT is typedesc:
  type
    SDL_NUM_LOG_PRIORITIES* = SDL_NUM_LOG_PRIORITIES_renamed_SDL_LOG_PRIORITY_COUNT 
else:
  when SDL_NUM_LOG_PRIORITIES_renamed_SDL_LOG_PRIORITY_COUNT is static:
    const
      SDL_NUM_LOG_PRIORITIES* = SDL_NUM_LOG_PRIORITIES_renamed_SDL_LOG_PRIORITY_COUNT 
  else:
    let SDL_NUM_LOG_PRIORITIES* = SDL_NUM_LOG_PRIORITIES_renamed_SDL_LOG_PRIORITY_COUNT 
when SDL_MESSAGEBOX_COLOR_MAX_renamed_SDL_MESSAGEBOX_COLOR_COUNT is typedesc:
  type
    SDL_MESSAGEBOX_COLOR_MAX* = SDL_MESSAGEBOX_COLOR_MAX_renamed_SDL_MESSAGEBOX_COLOR_COUNT 
else:
  when SDL_MESSAGEBOX_COLOR_MAX_renamed_SDL_MESSAGEBOX_COLOR_COUNT is static:
    const
      SDL_MESSAGEBOX_COLOR_MAX* = SDL_MESSAGEBOX_COLOR_MAX_renamed_SDL_MESSAGEBOX_COLOR_COUNT 
  else:
    let SDL_MESSAGEBOX_COLOR_MAX* = SDL_MESSAGEBOX_COLOR_MAX_renamed_SDL_MESSAGEBOX_COLOR_COUNT 
when SDL_BUTTON_renamed_SDL_BUTTON_MASK is typedesc:
  type
    SDL_BUTTON* = SDL_BUTTON_renamed_SDL_BUTTON_MASK 
else:
  when SDL_BUTTON_renamed_SDL_BUTTON_MASK is static:
    const
      SDL_BUTTON* = SDL_BUTTON_renamed_SDL_BUTTON_MASK 
  else:
    let SDL_BUTTON* = SDL_BUTTON_renamed_SDL_BUTTON_MASK 
when SDL_FreeCursor_renamed_SDL_DestroyCursor is typedesc:
  type
    SDL_FreeCursor* = SDL_FreeCursor_renamed_SDL_DestroyCursor 
else:
  when SDL_FreeCursor_renamed_SDL_DestroyCursor is static:
    const
      SDL_FreeCursor* = SDL_FreeCursor_renamed_SDL_DestroyCursor 
  else:
    let SDL_FreeCursor* = SDL_FreeCursor_renamed_SDL_DestroyCursor 
when SDL_NUM_SYSTEM_CURSORS_renamed_SDL_SYSTEM_CURSOR_COUNT is typedesc:
  type
    SDL_NUM_SYSTEM_CURSORS* = SDL_NUM_SYSTEM_CURSORS_renamed_SDL_SYSTEM_CURSOR_COUNT 
else:
  when SDL_NUM_SYSTEM_CURSORS_renamed_SDL_SYSTEM_CURSOR_COUNT is static:
    const
      SDL_NUM_SYSTEM_CURSORS* = SDL_NUM_SYSTEM_CURSORS_renamed_SDL_SYSTEM_CURSOR_COUNT 
  else:
    let SDL_NUM_SYSTEM_CURSORS* = SDL_NUM_SYSTEM_CURSORS_renamed_SDL_SYSTEM_CURSOR_COUNT 
when SDL_SYSTEM_CURSOR_ARROW_renamed_SDL_SYSTEM_CURSOR_DEFAULT is typedesc:
  type
    SDL_SYSTEM_CURSOR_ARROW* = SDL_SYSTEM_CURSOR_ARROW_renamed_SDL_SYSTEM_CURSOR_DEFAULT 
else:
  when SDL_SYSTEM_CURSOR_ARROW_renamed_SDL_SYSTEM_CURSOR_DEFAULT is static:
    const
      SDL_SYSTEM_CURSOR_ARROW* = SDL_SYSTEM_CURSOR_ARROW_renamed_SDL_SYSTEM_CURSOR_DEFAULT 
  else:
    let SDL_SYSTEM_CURSOR_ARROW* = SDL_SYSTEM_CURSOR_ARROW_renamed_SDL_SYSTEM_CURSOR_DEFAULT 
when SDL_SYSTEM_CURSOR_HAND_renamed_SDL_SYSTEM_CURSOR_POINTER is typedesc:
  type
    SDL_SYSTEM_CURSOR_HAND* = SDL_SYSTEM_CURSOR_HAND_renamed_SDL_SYSTEM_CURSOR_POINTER 
else:
  when SDL_SYSTEM_CURSOR_HAND_renamed_SDL_SYSTEM_CURSOR_POINTER is static:
    const
      SDL_SYSTEM_CURSOR_HAND* = SDL_SYSTEM_CURSOR_HAND_renamed_SDL_SYSTEM_CURSOR_POINTER 
  else:
    let SDL_SYSTEM_CURSOR_HAND* = SDL_SYSTEM_CURSOR_HAND_renamed_SDL_SYSTEM_CURSOR_POINTER 
when SDL_SYSTEM_CURSOR_IBEAM_renamed_SDL_SYSTEM_CURSOR_TEXT is typedesc:
  type
    SDL_SYSTEM_CURSOR_IBEAM* = SDL_SYSTEM_CURSOR_IBEAM_renamed_SDL_SYSTEM_CURSOR_TEXT 
else:
  when SDL_SYSTEM_CURSOR_IBEAM_renamed_SDL_SYSTEM_CURSOR_TEXT is static:
    const
      SDL_SYSTEM_CURSOR_IBEAM* = SDL_SYSTEM_CURSOR_IBEAM_renamed_SDL_SYSTEM_CURSOR_TEXT 
  else:
    let SDL_SYSTEM_CURSOR_IBEAM* = SDL_SYSTEM_CURSOR_IBEAM_renamed_SDL_SYSTEM_CURSOR_TEXT 
when SDL_SYSTEM_CURSOR_NO_renamed_SDL_SYSTEM_CURSOR_NOT_ALLOWED is typedesc:
  type
    SDL_SYSTEM_CURSOR_NO* = SDL_SYSTEM_CURSOR_NO_renamed_SDL_SYSTEM_CURSOR_NOT_ALLOWED 
else:
  when SDL_SYSTEM_CURSOR_NO_renamed_SDL_SYSTEM_CURSOR_NOT_ALLOWED is static:
    const
      SDL_SYSTEM_CURSOR_NO* = SDL_SYSTEM_CURSOR_NO_renamed_SDL_SYSTEM_CURSOR_NOT_ALLOWED 
  else:
    let SDL_SYSTEM_CURSOR_NO* = SDL_SYSTEM_CURSOR_NO_renamed_SDL_SYSTEM_CURSOR_NOT_ALLOWED 
when SDL_SYSTEM_CURSOR_SIZEALL_renamed_SDL_SYSTEM_CURSOR_MOVE is typedesc:
  type
    SDL_SYSTEM_CURSOR_SIZEALL* = SDL_SYSTEM_CURSOR_SIZEALL_renamed_SDL_SYSTEM_CURSOR_MOVE 
else:
  when SDL_SYSTEM_CURSOR_SIZEALL_renamed_SDL_SYSTEM_CURSOR_MOVE is static:
    const
      SDL_SYSTEM_CURSOR_SIZEALL* = SDL_SYSTEM_CURSOR_SIZEALL_renamed_SDL_SYSTEM_CURSOR_MOVE 
  else:
    let SDL_SYSTEM_CURSOR_SIZEALL* = SDL_SYSTEM_CURSOR_SIZEALL_renamed_SDL_SYSTEM_CURSOR_MOVE 
when SDL_SYSTEM_CURSOR_SIZENESW_renamed_SDL_SYSTEM_CURSOR_NESW_RESIZE is
    typedesc:
  type
    SDL_SYSTEM_CURSOR_SIZENESW* = SDL_SYSTEM_CURSOR_SIZENESW_renamed_SDL_SYSTEM_CURSOR_NESW_RESIZE 
else:
  when SDL_SYSTEM_CURSOR_SIZENESW_renamed_SDL_SYSTEM_CURSOR_NESW_RESIZE is
      static:
    const
      SDL_SYSTEM_CURSOR_SIZENESW* = SDL_SYSTEM_CURSOR_SIZENESW_renamed_SDL_SYSTEM_CURSOR_NESW_RESIZE 
  else:
    let SDL_SYSTEM_CURSOR_SIZENESW* = SDL_SYSTEM_CURSOR_SIZENESW_renamed_SDL_SYSTEM_CURSOR_NESW_RESIZE 
when SDL_SYSTEM_CURSOR_SIZENS_renamed_SDL_SYSTEM_CURSOR_NS_RESIZE is typedesc:
  type
    SDL_SYSTEM_CURSOR_SIZENS* = SDL_SYSTEM_CURSOR_SIZENS_renamed_SDL_SYSTEM_CURSOR_NS_RESIZE 
else:
  when SDL_SYSTEM_CURSOR_SIZENS_renamed_SDL_SYSTEM_CURSOR_NS_RESIZE is static:
    const
      SDL_SYSTEM_CURSOR_SIZENS* = SDL_SYSTEM_CURSOR_SIZENS_renamed_SDL_SYSTEM_CURSOR_NS_RESIZE 
  else:
    let SDL_SYSTEM_CURSOR_SIZENS* = SDL_SYSTEM_CURSOR_SIZENS_renamed_SDL_SYSTEM_CURSOR_NS_RESIZE 
when SDL_SYSTEM_CURSOR_SIZENWSE_renamed_SDL_SYSTEM_CURSOR_NWSE_RESIZE is
    typedesc:
  type
    SDL_SYSTEM_CURSOR_SIZENWSE* = SDL_SYSTEM_CURSOR_SIZENWSE_renamed_SDL_SYSTEM_CURSOR_NWSE_RESIZE 
else:
  when SDL_SYSTEM_CURSOR_SIZENWSE_renamed_SDL_SYSTEM_CURSOR_NWSE_RESIZE is
      static:
    const
      SDL_SYSTEM_CURSOR_SIZENWSE* = SDL_SYSTEM_CURSOR_SIZENWSE_renamed_SDL_SYSTEM_CURSOR_NWSE_RESIZE 
  else:
    let SDL_SYSTEM_CURSOR_SIZENWSE* = SDL_SYSTEM_CURSOR_SIZENWSE_renamed_SDL_SYSTEM_CURSOR_NWSE_RESIZE 
when SDL_SYSTEM_CURSOR_SIZEWE_renamed_SDL_SYSTEM_CURSOR_EW_RESIZE is typedesc:
  type
    SDL_SYSTEM_CURSOR_SIZEWE* = SDL_SYSTEM_CURSOR_SIZEWE_renamed_SDL_SYSTEM_CURSOR_EW_RESIZE 
else:
  when SDL_SYSTEM_CURSOR_SIZEWE_renamed_SDL_SYSTEM_CURSOR_EW_RESIZE is static:
    const
      SDL_SYSTEM_CURSOR_SIZEWE* = SDL_SYSTEM_CURSOR_SIZEWE_renamed_SDL_SYSTEM_CURSOR_EW_RESIZE 
  else:
    let SDL_SYSTEM_CURSOR_SIZEWE* = SDL_SYSTEM_CURSOR_SIZEWE_renamed_SDL_SYSTEM_CURSOR_EW_RESIZE 
when SDL_SYSTEM_CURSOR_WAITARROW_renamed_SDL_SYSTEM_CURSOR_PROGRESS is typedesc:
  type
    SDL_SYSTEM_CURSOR_WAITARROW* = SDL_SYSTEM_CURSOR_WAITARROW_renamed_SDL_SYSTEM_CURSOR_PROGRESS 
else:
  when SDL_SYSTEM_CURSOR_WAITARROW_renamed_SDL_SYSTEM_CURSOR_PROGRESS is static:
    const
      SDL_SYSTEM_CURSOR_WAITARROW* = SDL_SYSTEM_CURSOR_WAITARROW_renamed_SDL_SYSTEM_CURSOR_PROGRESS 
  else:
    let SDL_SYSTEM_CURSOR_WAITARROW* = SDL_SYSTEM_CURSOR_WAITARROW_renamed_SDL_SYSTEM_CURSOR_PROGRESS 
when SDL_SYSTEM_CURSOR_WINDOW_BOTTOM_renamed_SDL_SYSTEM_CURSOR_S_RESIZE is
    typedesc:
  type
    SDL_SYSTEM_CURSOR_WINDOW_BOTTOM* = SDL_SYSTEM_CURSOR_WINDOW_BOTTOM_renamed_SDL_SYSTEM_CURSOR_S_RESIZE 
else:
  when SDL_SYSTEM_CURSOR_WINDOW_BOTTOM_renamed_SDL_SYSTEM_CURSOR_S_RESIZE is
      static:
    const
      SDL_SYSTEM_CURSOR_WINDOW_BOTTOM* = SDL_SYSTEM_CURSOR_WINDOW_BOTTOM_renamed_SDL_SYSTEM_CURSOR_S_RESIZE 
  else:
    let SDL_SYSTEM_CURSOR_WINDOW_BOTTOM* = SDL_SYSTEM_CURSOR_WINDOW_BOTTOM_renamed_SDL_SYSTEM_CURSOR_S_RESIZE 
when SDL_SYSTEM_CURSOR_WINDOW_BOTTOMLEFT_renamed_SDL_SYSTEM_CURSOR_SW_RESIZE is
    typedesc:
  type
    SDL_SYSTEM_CURSOR_WINDOW_BOTTOMLEFT* = SDL_SYSTEM_CURSOR_WINDOW_BOTTOMLEFT_renamed_SDL_SYSTEM_CURSOR_SW_RESIZE 
else:
  when SDL_SYSTEM_CURSOR_WINDOW_BOTTOMLEFT_renamed_SDL_SYSTEM_CURSOR_SW_RESIZE is
      static:
    const
      SDL_SYSTEM_CURSOR_WINDOW_BOTTOMLEFT* = SDL_SYSTEM_CURSOR_WINDOW_BOTTOMLEFT_renamed_SDL_SYSTEM_CURSOR_SW_RESIZE 
  else:
    let SDL_SYSTEM_CURSOR_WINDOW_BOTTOMLEFT* = SDL_SYSTEM_CURSOR_WINDOW_BOTTOMLEFT_renamed_SDL_SYSTEM_CURSOR_SW_RESIZE 
when SDL_SYSTEM_CURSOR_WINDOW_BOTTOMRIGHT_renamed_SDL_SYSTEM_CURSOR_SE_RESIZE is
    typedesc:
  type
    SDL_SYSTEM_CURSOR_WINDOW_BOTTOMRIGHT* = SDL_SYSTEM_CURSOR_WINDOW_BOTTOMRIGHT_renamed_SDL_SYSTEM_CURSOR_SE_RESIZE 
else:
  when SDL_SYSTEM_CURSOR_WINDOW_BOTTOMRIGHT_renamed_SDL_SYSTEM_CURSOR_SE_RESIZE is
      static:
    const
      SDL_SYSTEM_CURSOR_WINDOW_BOTTOMRIGHT* = SDL_SYSTEM_CURSOR_WINDOW_BOTTOMRIGHT_renamed_SDL_SYSTEM_CURSOR_SE_RESIZE 
  else:
    let SDL_SYSTEM_CURSOR_WINDOW_BOTTOMRIGHT* = SDL_SYSTEM_CURSOR_WINDOW_BOTTOMRIGHT_renamed_SDL_SYSTEM_CURSOR_SE_RESIZE 
when SDL_SYSTEM_CURSOR_WINDOW_LEFT_renamed_SDL_SYSTEM_CURSOR_W_RESIZE is
    typedesc:
  type
    SDL_SYSTEM_CURSOR_WINDOW_LEFT* = SDL_SYSTEM_CURSOR_WINDOW_LEFT_renamed_SDL_SYSTEM_CURSOR_W_RESIZE 
else:
  when SDL_SYSTEM_CURSOR_WINDOW_LEFT_renamed_SDL_SYSTEM_CURSOR_W_RESIZE is
      static:
    const
      SDL_SYSTEM_CURSOR_WINDOW_LEFT* = SDL_SYSTEM_CURSOR_WINDOW_LEFT_renamed_SDL_SYSTEM_CURSOR_W_RESIZE 
  else:
    let SDL_SYSTEM_CURSOR_WINDOW_LEFT* = SDL_SYSTEM_CURSOR_WINDOW_LEFT_renamed_SDL_SYSTEM_CURSOR_W_RESIZE 
when SDL_SYSTEM_CURSOR_WINDOW_RIGHT_renamed_SDL_SYSTEM_CURSOR_E_RESIZE is
    typedesc:
  type
    SDL_SYSTEM_CURSOR_WINDOW_RIGHT* = SDL_SYSTEM_CURSOR_WINDOW_RIGHT_renamed_SDL_SYSTEM_CURSOR_E_RESIZE 
else:
  when SDL_SYSTEM_CURSOR_WINDOW_RIGHT_renamed_SDL_SYSTEM_CURSOR_E_RESIZE is
      static:
    const
      SDL_SYSTEM_CURSOR_WINDOW_RIGHT* = SDL_SYSTEM_CURSOR_WINDOW_RIGHT_renamed_SDL_SYSTEM_CURSOR_E_RESIZE 
  else:
    let SDL_SYSTEM_CURSOR_WINDOW_RIGHT* = SDL_SYSTEM_CURSOR_WINDOW_RIGHT_renamed_SDL_SYSTEM_CURSOR_E_RESIZE 
when SDL_SYSTEM_CURSOR_WINDOW_TOP_renamed_SDL_SYSTEM_CURSOR_N_RESIZE is typedesc:
  type
    SDL_SYSTEM_CURSOR_WINDOW_TOP* = SDL_SYSTEM_CURSOR_WINDOW_TOP_renamed_SDL_SYSTEM_CURSOR_N_RESIZE 
else:
  when SDL_SYSTEM_CURSOR_WINDOW_TOP_renamed_SDL_SYSTEM_CURSOR_N_RESIZE is static:
    const
      SDL_SYSTEM_CURSOR_WINDOW_TOP* = SDL_SYSTEM_CURSOR_WINDOW_TOP_renamed_SDL_SYSTEM_CURSOR_N_RESIZE 
  else:
    let SDL_SYSTEM_CURSOR_WINDOW_TOP* = SDL_SYSTEM_CURSOR_WINDOW_TOP_renamed_SDL_SYSTEM_CURSOR_N_RESIZE 
when SDL_SYSTEM_CURSOR_WINDOW_TOPLEFT_renamed_SDL_SYSTEM_CURSOR_NW_RESIZE is
    typedesc:
  type
    SDL_SYSTEM_CURSOR_WINDOW_TOPLEFT* = SDL_SYSTEM_CURSOR_WINDOW_TOPLEFT_renamed_SDL_SYSTEM_CURSOR_NW_RESIZE 
else:
  when SDL_SYSTEM_CURSOR_WINDOW_TOPLEFT_renamed_SDL_SYSTEM_CURSOR_NW_RESIZE is
      static:
    const
      SDL_SYSTEM_CURSOR_WINDOW_TOPLEFT* = SDL_SYSTEM_CURSOR_WINDOW_TOPLEFT_renamed_SDL_SYSTEM_CURSOR_NW_RESIZE 
  else:
    let SDL_SYSTEM_CURSOR_WINDOW_TOPLEFT* = SDL_SYSTEM_CURSOR_WINDOW_TOPLEFT_renamed_SDL_SYSTEM_CURSOR_NW_RESIZE 
when SDL_SYSTEM_CURSOR_WINDOW_TOPRIGHT_renamed_SDL_SYSTEM_CURSOR_NE_RESIZE is
    typedesc:
  type
    SDL_SYSTEM_CURSOR_WINDOW_TOPRIGHT* = SDL_SYSTEM_CURSOR_WINDOW_TOPRIGHT_renamed_SDL_SYSTEM_CURSOR_NE_RESIZE 
else:
  when SDL_SYSTEM_CURSOR_WINDOW_TOPRIGHT_renamed_SDL_SYSTEM_CURSOR_NE_RESIZE is
      static:
    const
      SDL_SYSTEM_CURSOR_WINDOW_TOPRIGHT* = SDL_SYSTEM_CURSOR_WINDOW_TOPRIGHT_renamed_SDL_SYSTEM_CURSOR_NE_RESIZE 
  else:
    let SDL_SYSTEM_CURSOR_WINDOW_TOPRIGHT* = SDL_SYSTEM_CURSOR_WINDOW_TOPRIGHT_renamed_SDL_SYSTEM_CURSOR_NE_RESIZE 
when SDL_CondBroadcast_renamed_SDL_BroadcastCondition is typedesc:
  type
    SDL_CondBroadcast* = SDL_CondBroadcast_renamed_SDL_BroadcastCondition 
else:
  when SDL_CondBroadcast_renamed_SDL_BroadcastCondition is static:
    const
      SDL_CondBroadcast* = SDL_CondBroadcast_renamed_SDL_BroadcastCondition 
  else:
    let SDL_CondBroadcast* = SDL_CondBroadcast_renamed_SDL_BroadcastCondition 
when SDL_CondSignal_renamed_SDL_SignalCondition is typedesc:
  type
    SDL_CondSignal* = SDL_CondSignal_renamed_SDL_SignalCondition 
else:
  when SDL_CondSignal_renamed_SDL_SignalCondition is static:
    const
      SDL_CondSignal* = SDL_CondSignal_renamed_SDL_SignalCondition 
  else:
    let SDL_CondSignal* = SDL_CondSignal_renamed_SDL_SignalCondition 
when SDL_CondWait_renamed_SDL_WaitCondition is typedesc:
  type
    SDL_CondWait* = SDL_CondWait_renamed_SDL_WaitCondition 
else:
  when SDL_CondWait_renamed_SDL_WaitCondition is static:
    const
      SDL_CondWait* = SDL_CondWait_renamed_SDL_WaitCondition 
  else:
    let SDL_CondWait* = SDL_CondWait_renamed_SDL_WaitCondition 
when SDL_CondWaitTimeout_renamed_SDL_WaitConditionTimeout is typedesc:
  type
    SDL_CondWaitTimeout* = SDL_CondWaitTimeout_renamed_SDL_WaitConditionTimeout 
else:
  when SDL_CondWaitTimeout_renamed_SDL_WaitConditionTimeout is static:
    const
      SDL_CondWaitTimeout* = SDL_CondWaitTimeout_renamed_SDL_WaitConditionTimeout 
  else:
    let SDL_CondWaitTimeout* = SDL_CondWaitTimeout_renamed_SDL_WaitConditionTimeout 
when SDL_CreateCond_renamed_SDL_CreateCondition is typedesc:
  type
    SDL_CreateCond* = SDL_CreateCond_renamed_SDL_CreateCondition 
else:
  when SDL_CreateCond_renamed_SDL_CreateCondition is static:
    const
      SDL_CreateCond* = SDL_CreateCond_renamed_SDL_CreateCondition 
  else:
    let SDL_CreateCond* = SDL_CreateCond_renamed_SDL_CreateCondition 
when SDL_DestroyCond_renamed_SDL_DestroyCondition is typedesc:
  type
    SDL_DestroyCond* = SDL_DestroyCond_renamed_SDL_DestroyCondition 
else:
  when SDL_DestroyCond_renamed_SDL_DestroyCondition is static:
    const
      SDL_DestroyCond* = SDL_DestroyCond_renamed_SDL_DestroyCondition 
  else:
    let SDL_DestroyCond* = SDL_DestroyCond_renamed_SDL_DestroyCondition 
when SDL_SemPost_renamed_SDL_SignalSemaphore is typedesc:
  type
    SDL_SemPost* = SDL_SemPost_renamed_SDL_SignalSemaphore 
else:
  when SDL_SemPost_renamed_SDL_SignalSemaphore is static:
    const
      SDL_SemPost* = SDL_SemPost_renamed_SDL_SignalSemaphore 
  else:
    let SDL_SemPost* = SDL_SemPost_renamed_SDL_SignalSemaphore 
when SDL_SemTryWait_renamed_SDL_TryWaitSemaphore is typedesc:
  type
    SDL_SemTryWait* = SDL_SemTryWait_renamed_SDL_TryWaitSemaphore 
else:
  when SDL_SemTryWait_renamed_SDL_TryWaitSemaphore is static:
    const
      SDL_SemTryWait* = SDL_SemTryWait_renamed_SDL_TryWaitSemaphore 
  else:
    let SDL_SemTryWait* = SDL_SemTryWait_renamed_SDL_TryWaitSemaphore 
when SDL_SemValue_renamed_SDL_GetSemaphoreValue is typedesc:
  type
    SDL_SemValue* = SDL_SemValue_renamed_SDL_GetSemaphoreValue 
else:
  when SDL_SemValue_renamed_SDL_GetSemaphoreValue is static:
    const
      SDL_SemValue* = SDL_SemValue_renamed_SDL_GetSemaphoreValue 
  else:
    let SDL_SemValue* = SDL_SemValue_renamed_SDL_GetSemaphoreValue 
when SDL_SemWait_renamed_SDL_WaitSemaphore is typedesc:
  type
    SDL_SemWait* = SDL_SemWait_renamed_SDL_WaitSemaphore 
else:
  when SDL_SemWait_renamed_SDL_WaitSemaphore is static:
    const
      SDL_SemWait* = SDL_SemWait_renamed_SDL_WaitSemaphore 
  else:
    let SDL_SemWait* = SDL_SemWait_renamed_SDL_WaitSemaphore 
when SDL_SemWaitTimeout_renamed_SDL_WaitSemaphoreTimeout is typedesc:
  type
    SDL_SemWaitTimeout* = SDL_SemWaitTimeout_renamed_SDL_WaitSemaphoreTimeout 
else:
  when SDL_SemWaitTimeout_renamed_SDL_WaitSemaphoreTimeout is static:
    const
      SDL_SemWaitTimeout* = SDL_SemWaitTimeout_renamed_SDL_WaitSemaphoreTimeout 
  else:
    let SDL_SemWaitTimeout* = SDL_SemWaitTimeout_renamed_SDL_WaitSemaphoreTimeout 
when SDL_cond_renamed_SDL_Condition is typedesc:
  type
    SDL_cond* = SDL_cond_renamed_SDL_Condition 
else:
  when SDL_cond_renamed_SDL_Condition is static:
    const
      SDL_cond* = SDL_cond_renamed_SDL_Condition 
  else:
    let SDL_cond* = SDL_cond_renamed_SDL_Condition 
when SDL_mutex_renamed_SDL_Mutex is typedesc:
  type
    SDL_mutex* = SDL_mutex_renamed_SDL_Mutex 
else:
  when SDL_mutex_renamed_SDL_Mutex is static:
    const
      SDL_mutex* = SDL_mutex_renamed_SDL_Mutex 
  else:
    let SDL_mutex* = SDL_mutex_renamed_SDL_Mutex 
when SDL_sem_renamed_SDL_Semaphore is typedesc:
  type
    SDL_sem* = SDL_sem_renamed_SDL_Semaphore 
else:
  when SDL_sem_renamed_SDL_Semaphore is static:
    const
      SDL_sem* = SDL_sem_renamed_SDL_Semaphore 
  else:
    let SDL_sem* = SDL_sem_renamed_SDL_Semaphore 
when SDL_AllocFormat_renamed_SDL_GetPixelFormatDetails is typedesc:
  type
    SDL_AllocFormat* = SDL_AllocFormat_renamed_SDL_GetPixelFormatDetails 
else:
  when SDL_AllocFormat_renamed_SDL_GetPixelFormatDetails is static:
    const
      SDL_AllocFormat* = SDL_AllocFormat_renamed_SDL_GetPixelFormatDetails 
  else:
    let SDL_AllocFormat* = SDL_AllocFormat_renamed_SDL_GetPixelFormatDetails 
when SDL_AllocPalette_renamed_SDL_CreatePalette is typedesc:
  type
    SDL_AllocPalette* = SDL_AllocPalette_renamed_SDL_CreatePalette 
else:
  when SDL_AllocPalette_renamed_SDL_CreatePalette is static:
    const
      SDL_AllocPalette* = SDL_AllocPalette_renamed_SDL_CreatePalette 
  else:
    let SDL_AllocPalette* = SDL_AllocPalette_renamed_SDL_CreatePalette 
when SDL_Colour_renamed_SDL_Color is typedesc:
  type
    SDL_Colour* = SDL_Colour_renamed_SDL_Color 
else:
  when SDL_Colour_renamed_SDL_Color is static:
    const
      SDL_Colour* = SDL_Colour_renamed_SDL_Color 
  else:
    let SDL_Colour* = SDL_Colour_renamed_SDL_Color 
when SDL_FreePalette_renamed_SDL_DestroyPalette is typedesc:
  type
    SDL_FreePalette* = SDL_FreePalette_renamed_SDL_DestroyPalette 
else:
  when SDL_FreePalette_renamed_SDL_DestroyPalette is static:
    const
      SDL_FreePalette* = SDL_FreePalette_renamed_SDL_DestroyPalette 
  else:
    let SDL_FreePalette* = SDL_FreePalette_renamed_SDL_DestroyPalette 
when SDL_MasksToPixelFormatEnum_renamed_SDL_GetPixelFormatForMasks is typedesc:
  type
    SDL_MasksToPixelFormatEnum* = SDL_MasksToPixelFormatEnum_renamed_SDL_GetPixelFormatForMasks 
else:
  when SDL_MasksToPixelFormatEnum_renamed_SDL_GetPixelFormatForMasks is static:
    const
      SDL_MasksToPixelFormatEnum* = SDL_MasksToPixelFormatEnum_renamed_SDL_GetPixelFormatForMasks 
  else:
    let SDL_MasksToPixelFormatEnum* = SDL_MasksToPixelFormatEnum_renamed_SDL_GetPixelFormatForMasks 
when SDL_PIXELFORMAT_BGR444_renamed_SDL_PIXELFORMAT_XBGR4444 is typedesc:
  type
    SDL_PIXELFORMAT_BGR444* = SDL_PIXELFORMAT_BGR444_renamed_SDL_PIXELFORMAT_XBGR4444 
else:
  when SDL_PIXELFORMAT_BGR444_renamed_SDL_PIXELFORMAT_XBGR4444 is static:
    const
      SDL_PIXELFORMAT_BGR444* = SDL_PIXELFORMAT_BGR444_renamed_SDL_PIXELFORMAT_XBGR4444 
  else:
    let SDL_PIXELFORMAT_BGR444* = SDL_PIXELFORMAT_BGR444_renamed_SDL_PIXELFORMAT_XBGR4444 
when SDL_PIXELFORMAT_BGR555_renamed_SDL_PIXELFORMAT_XBGR1555 is typedesc:
  type
    SDL_PIXELFORMAT_BGR555* = SDL_PIXELFORMAT_BGR555_renamed_SDL_PIXELFORMAT_XBGR1555 
else:
  when SDL_PIXELFORMAT_BGR555_renamed_SDL_PIXELFORMAT_XBGR1555 is static:
    const
      SDL_PIXELFORMAT_BGR555* = SDL_PIXELFORMAT_BGR555_renamed_SDL_PIXELFORMAT_XBGR1555 
  else:
    let SDL_PIXELFORMAT_BGR555* = SDL_PIXELFORMAT_BGR555_renamed_SDL_PIXELFORMAT_XBGR1555 
when SDL_PIXELFORMAT_BGR888_renamed_SDL_PIXELFORMAT_XBGR8888 is typedesc:
  type
    SDL_PIXELFORMAT_BGR888* = SDL_PIXELFORMAT_BGR888_renamed_SDL_PIXELFORMAT_XBGR8888 
else:
  when SDL_PIXELFORMAT_BGR888_renamed_SDL_PIXELFORMAT_XBGR8888 is static:
    const
      SDL_PIXELFORMAT_BGR888* = SDL_PIXELFORMAT_BGR888_renamed_SDL_PIXELFORMAT_XBGR8888 
  else:
    let SDL_PIXELFORMAT_BGR888* = SDL_PIXELFORMAT_BGR888_renamed_SDL_PIXELFORMAT_XBGR8888 
when SDL_PIXELFORMAT_RGB444_renamed_SDL_PIXELFORMAT_XRGB4444 is typedesc:
  type
    SDL_PIXELFORMAT_RGB444* = SDL_PIXELFORMAT_RGB444_renamed_SDL_PIXELFORMAT_XRGB4444 
else:
  when SDL_PIXELFORMAT_RGB444_renamed_SDL_PIXELFORMAT_XRGB4444 is static:
    const
      SDL_PIXELFORMAT_RGB444* = SDL_PIXELFORMAT_RGB444_renamed_SDL_PIXELFORMAT_XRGB4444 
  else:
    let SDL_PIXELFORMAT_RGB444* = SDL_PIXELFORMAT_RGB444_renamed_SDL_PIXELFORMAT_XRGB4444 
when SDL_PIXELFORMAT_RGB555_renamed_SDL_PIXELFORMAT_XRGB1555 is typedesc:
  type
    SDL_PIXELFORMAT_RGB555* = SDL_PIXELFORMAT_RGB555_renamed_SDL_PIXELFORMAT_XRGB1555 
else:
  when SDL_PIXELFORMAT_RGB555_renamed_SDL_PIXELFORMAT_XRGB1555 is static:
    const
      SDL_PIXELFORMAT_RGB555* = SDL_PIXELFORMAT_RGB555_renamed_SDL_PIXELFORMAT_XRGB1555 
  else:
    let SDL_PIXELFORMAT_RGB555* = SDL_PIXELFORMAT_RGB555_renamed_SDL_PIXELFORMAT_XRGB1555 
when SDL_PIXELFORMAT_RGB888_renamed_SDL_PIXELFORMAT_XRGB8888 is typedesc:
  type
    SDL_PIXELFORMAT_RGB888* = SDL_PIXELFORMAT_RGB888_renamed_SDL_PIXELFORMAT_XRGB8888 
else:
  when SDL_PIXELFORMAT_RGB888_renamed_SDL_PIXELFORMAT_XRGB8888 is static:
    const
      SDL_PIXELFORMAT_RGB888* = SDL_PIXELFORMAT_RGB888_renamed_SDL_PIXELFORMAT_XRGB8888 
  else:
    let SDL_PIXELFORMAT_RGB888* = SDL_PIXELFORMAT_RGB888_renamed_SDL_PIXELFORMAT_XRGB8888 
when SDL_PixelFormatEnumToMasks_renamed_SDL_GetMasksForPixelFormat is typedesc:
  type
    SDL_PixelFormatEnumToMasks* = SDL_PixelFormatEnumToMasks_renamed_SDL_GetMasksForPixelFormat 
else:
  when SDL_PixelFormatEnumToMasks_renamed_SDL_GetMasksForPixelFormat is static:
    const
      SDL_PixelFormatEnumToMasks* = SDL_PixelFormatEnumToMasks_renamed_SDL_GetMasksForPixelFormat 
  else:
    let SDL_PixelFormatEnumToMasks* = SDL_PixelFormatEnumToMasks_renamed_SDL_GetMasksForPixelFormat 
when SDL_EncloseFPoints_renamed_SDL_GetRectEnclosingPointsFloat is typedesc:
  type
    SDL_EncloseFPoints* = SDL_EncloseFPoints_renamed_SDL_GetRectEnclosingPointsFloat 
else:
  when SDL_EncloseFPoints_renamed_SDL_GetRectEnclosingPointsFloat is static:
    const
      SDL_EncloseFPoints* = SDL_EncloseFPoints_renamed_SDL_GetRectEnclosingPointsFloat 
  else:
    let SDL_EncloseFPoints* = SDL_EncloseFPoints_renamed_SDL_GetRectEnclosingPointsFloat 
when SDL_EnclosePoints_renamed_SDL_GetRectEnclosingPoints is typedesc:
  type
    SDL_EnclosePoints* = SDL_EnclosePoints_renamed_SDL_GetRectEnclosingPoints 
else:
  when SDL_EnclosePoints_renamed_SDL_GetRectEnclosingPoints is static:
    const
      SDL_EnclosePoints* = SDL_EnclosePoints_renamed_SDL_GetRectEnclosingPoints 
  else:
    let SDL_EnclosePoints* = SDL_EnclosePoints_renamed_SDL_GetRectEnclosingPoints 
when SDL_FRectEmpty_renamed_SDL_RectEmptyFloat is typedesc:
  type
    SDL_FRectEmpty* = SDL_FRectEmpty_renamed_SDL_RectEmptyFloat 
else:
  when SDL_FRectEmpty_renamed_SDL_RectEmptyFloat is static:
    const
      SDL_FRectEmpty* = SDL_FRectEmpty_renamed_SDL_RectEmptyFloat 
  else:
    let SDL_FRectEmpty* = SDL_FRectEmpty_renamed_SDL_RectEmptyFloat 
when SDL_FRectEquals_renamed_SDL_RectsEqualFloat is typedesc:
  type
    SDL_FRectEquals* = SDL_FRectEquals_renamed_SDL_RectsEqualFloat 
else:
  when SDL_FRectEquals_renamed_SDL_RectsEqualFloat is static:
    const
      SDL_FRectEquals* = SDL_FRectEquals_renamed_SDL_RectsEqualFloat 
  else:
    let SDL_FRectEquals* = SDL_FRectEquals_renamed_SDL_RectsEqualFloat 
when SDL_FRectEqualsEpsilon_renamed_SDL_RectsEqualEpsilon is typedesc:
  type
    SDL_FRectEqualsEpsilon* = SDL_FRectEqualsEpsilon_renamed_SDL_RectsEqualEpsilon 
else:
  when SDL_FRectEqualsEpsilon_renamed_SDL_RectsEqualEpsilon is static:
    const
      SDL_FRectEqualsEpsilon* = SDL_FRectEqualsEpsilon_renamed_SDL_RectsEqualEpsilon 
  else:
    let SDL_FRectEqualsEpsilon* = SDL_FRectEqualsEpsilon_renamed_SDL_RectsEqualEpsilon 
when SDL_HasIntersection_renamed_SDL_HasRectIntersection is typedesc:
  type
    SDL_HasIntersection* = SDL_HasIntersection_renamed_SDL_HasRectIntersection 
else:
  when SDL_HasIntersection_renamed_SDL_HasRectIntersection is static:
    const
      SDL_HasIntersection* = SDL_HasIntersection_renamed_SDL_HasRectIntersection 
  else:
    let SDL_HasIntersection* = SDL_HasIntersection_renamed_SDL_HasRectIntersection 
when SDL_HasIntersectionF_renamed_SDL_HasRectIntersectionFloat is typedesc:
  type
    SDL_HasIntersectionF* = SDL_HasIntersectionF_renamed_SDL_HasRectIntersectionFloat 
else:
  when SDL_HasIntersectionF_renamed_SDL_HasRectIntersectionFloat is static:
    const
      SDL_HasIntersectionF* = SDL_HasIntersectionF_renamed_SDL_HasRectIntersectionFloat 
  else:
    let SDL_HasIntersectionF* = SDL_HasIntersectionF_renamed_SDL_HasRectIntersectionFloat 
when SDL_IntersectFRect_renamed_SDL_GetRectIntersectionFloat is typedesc:
  type
    SDL_IntersectFRect* = SDL_IntersectFRect_renamed_SDL_GetRectIntersectionFloat 
else:
  when SDL_IntersectFRect_renamed_SDL_GetRectIntersectionFloat is static:
    const
      SDL_IntersectFRect* = SDL_IntersectFRect_renamed_SDL_GetRectIntersectionFloat 
  else:
    let SDL_IntersectFRect* = SDL_IntersectFRect_renamed_SDL_GetRectIntersectionFloat 
when SDL_IntersectFRectAndLine_renamed_SDL_GetRectAndLineIntersectionFloat is
    typedesc:
  type
    SDL_IntersectFRectAndLine* = SDL_IntersectFRectAndLine_renamed_SDL_GetRectAndLineIntersectionFloat 
else:
  when SDL_IntersectFRectAndLine_renamed_SDL_GetRectAndLineIntersectionFloat is
      static:
    const
      SDL_IntersectFRectAndLine* = SDL_IntersectFRectAndLine_renamed_SDL_GetRectAndLineIntersectionFloat 
  else:
    let SDL_IntersectFRectAndLine* = SDL_IntersectFRectAndLine_renamed_SDL_GetRectAndLineIntersectionFloat 
when SDL_IntersectRect_renamed_SDL_GetRectIntersection is typedesc:
  type
    SDL_IntersectRect* = SDL_IntersectRect_renamed_SDL_GetRectIntersection 
else:
  when SDL_IntersectRect_renamed_SDL_GetRectIntersection is static:
    const
      SDL_IntersectRect* = SDL_IntersectRect_renamed_SDL_GetRectIntersection 
  else:
    let SDL_IntersectRect* = SDL_IntersectRect_renamed_SDL_GetRectIntersection 
when SDL_IntersectRectAndLine_renamed_SDL_GetRectAndLineIntersection is typedesc:
  type
    SDL_IntersectRectAndLine* = SDL_IntersectRectAndLine_renamed_SDL_GetRectAndLineIntersection 
else:
  when SDL_IntersectRectAndLine_renamed_SDL_GetRectAndLineIntersection is static:
    const
      SDL_IntersectRectAndLine* = SDL_IntersectRectAndLine_renamed_SDL_GetRectAndLineIntersection 
  else:
    let SDL_IntersectRectAndLine* = SDL_IntersectRectAndLine_renamed_SDL_GetRectAndLineIntersection 
when SDL_PointInFRect_renamed_SDL_PointInRectFloat is typedesc:
  type
    SDL_PointInFRect* = SDL_PointInFRect_renamed_SDL_PointInRectFloat 
else:
  when SDL_PointInFRect_renamed_SDL_PointInRectFloat is static:
    const
      SDL_PointInFRect* = SDL_PointInFRect_renamed_SDL_PointInRectFloat 
  else:
    let SDL_PointInFRect* = SDL_PointInFRect_renamed_SDL_PointInRectFloat 
when SDL_RectEquals_renamed_SDL_RectsEqual is typedesc:
  type
    SDL_RectEquals* = SDL_RectEquals_renamed_SDL_RectsEqual 
else:
  when SDL_RectEquals_renamed_SDL_RectsEqual is static:
    const
      SDL_RectEquals* = SDL_RectEquals_renamed_SDL_RectsEqual 
  else:
    let SDL_RectEquals* = SDL_RectEquals_renamed_SDL_RectsEqual 
when SDL_UnionFRect_renamed_SDL_GetRectUnionFloat is typedesc:
  type
    SDL_UnionFRect* = SDL_UnionFRect_renamed_SDL_GetRectUnionFloat 
else:
  when SDL_UnionFRect_renamed_SDL_GetRectUnionFloat is static:
    const
      SDL_UnionFRect* = SDL_UnionFRect_renamed_SDL_GetRectUnionFloat 
  else:
    let SDL_UnionFRect* = SDL_UnionFRect_renamed_SDL_GetRectUnionFloat 
when SDL_UnionRect_renamed_SDL_GetRectUnion is typedesc:
  type
    SDL_UnionRect* = SDL_UnionRect_renamed_SDL_GetRectUnion 
else:
  when SDL_UnionRect_renamed_SDL_GetRectUnion is static:
    const
      SDL_UnionRect* = SDL_UnionRect_renamed_SDL_GetRectUnion 
  else:
    let SDL_UnionRect* = SDL_UnionRect_renamed_SDL_GetRectUnion 
when SDL_GetRendererOutputSize_renamed_SDL_GetCurrentRenderOutputSize is
    typedesc:
  type
    SDL_GetRendererOutputSize* = SDL_GetRendererOutputSize_renamed_SDL_GetCurrentRenderOutputSize 
else:
  when SDL_GetRendererOutputSize_renamed_SDL_GetCurrentRenderOutputSize is
      static:
    const
      SDL_GetRendererOutputSize* = SDL_GetRendererOutputSize_renamed_SDL_GetCurrentRenderOutputSize 
  else:
    let SDL_GetRendererOutputSize* = SDL_GetRendererOutputSize_renamed_SDL_GetCurrentRenderOutputSize 
when SDL_RenderCopy_renamed_SDL_RenderTexture is typedesc:
  type
    SDL_RenderCopy* = SDL_RenderCopy_renamed_SDL_RenderTexture 
else:
  when SDL_RenderCopy_renamed_SDL_RenderTexture is static:
    const
      SDL_RenderCopy* = SDL_RenderCopy_renamed_SDL_RenderTexture 
  else:
    let SDL_RenderCopy* = SDL_RenderCopy_renamed_SDL_RenderTexture 
when SDL_RenderCopyEx_renamed_SDL_RenderTextureRotated is typedesc:
  type
    SDL_RenderCopyEx* = SDL_RenderCopyEx_renamed_SDL_RenderTextureRotated 
else:
  when SDL_RenderCopyEx_renamed_SDL_RenderTextureRotated is static:
    const
      SDL_RenderCopyEx* = SDL_RenderCopyEx_renamed_SDL_RenderTextureRotated 
  else:
    let SDL_RenderCopyEx* = SDL_RenderCopyEx_renamed_SDL_RenderTextureRotated 
when SDL_RenderCopyExF_renamed_SDL_RenderTextureRotated is typedesc:
  type
    SDL_RenderCopyExF* = SDL_RenderCopyExF_renamed_SDL_RenderTextureRotated 
else:
  when SDL_RenderCopyExF_renamed_SDL_RenderTextureRotated is static:
    const
      SDL_RenderCopyExF* = SDL_RenderCopyExF_renamed_SDL_RenderTextureRotated 
  else:
    let SDL_RenderCopyExF* = SDL_RenderCopyExF_renamed_SDL_RenderTextureRotated 
when SDL_RenderCopyF_renamed_SDL_RenderTexture is typedesc:
  type
    SDL_RenderCopyF* = SDL_RenderCopyF_renamed_SDL_RenderTexture 
else:
  when SDL_RenderCopyF_renamed_SDL_RenderTexture is static:
    const
      SDL_RenderCopyF* = SDL_RenderCopyF_renamed_SDL_RenderTexture 
  else:
    let SDL_RenderCopyF* = SDL_RenderCopyF_renamed_SDL_RenderTexture 
when SDL_RenderDrawLine_renamed_SDL_RenderLine is typedesc:
  type
    SDL_RenderDrawLine* = SDL_RenderDrawLine_renamed_SDL_RenderLine 
else:
  when SDL_RenderDrawLine_renamed_SDL_RenderLine is static:
    const
      SDL_RenderDrawLine* = SDL_RenderDrawLine_renamed_SDL_RenderLine 
  else:
    let SDL_RenderDrawLine* = SDL_RenderDrawLine_renamed_SDL_RenderLine 
when SDL_RenderDrawLineF_renamed_SDL_RenderLine is typedesc:
  type
    SDL_RenderDrawLineF* = SDL_RenderDrawLineF_renamed_SDL_RenderLine 
else:
  when SDL_RenderDrawLineF_renamed_SDL_RenderLine is static:
    const
      SDL_RenderDrawLineF* = SDL_RenderDrawLineF_renamed_SDL_RenderLine 
  else:
    let SDL_RenderDrawLineF* = SDL_RenderDrawLineF_renamed_SDL_RenderLine 
when SDL_RenderDrawLines_renamed_SDL_RenderLines is typedesc:
  type
    SDL_RenderDrawLines* = SDL_RenderDrawLines_renamed_SDL_RenderLines 
else:
  when SDL_RenderDrawLines_renamed_SDL_RenderLines is static:
    const
      SDL_RenderDrawLines* = SDL_RenderDrawLines_renamed_SDL_RenderLines 
  else:
    let SDL_RenderDrawLines* = SDL_RenderDrawLines_renamed_SDL_RenderLines 
when SDL_RenderDrawLinesF_renamed_SDL_RenderLines is typedesc:
  type
    SDL_RenderDrawLinesF* = SDL_RenderDrawLinesF_renamed_SDL_RenderLines 
else:
  when SDL_RenderDrawLinesF_renamed_SDL_RenderLines is static:
    const
      SDL_RenderDrawLinesF* = SDL_RenderDrawLinesF_renamed_SDL_RenderLines 
  else:
    let SDL_RenderDrawLinesF* = SDL_RenderDrawLinesF_renamed_SDL_RenderLines 
when SDL_RenderDrawPoint_renamed_SDL_RenderPoint is typedesc:
  type
    SDL_RenderDrawPoint* = SDL_RenderDrawPoint_renamed_SDL_RenderPoint 
else:
  when SDL_RenderDrawPoint_renamed_SDL_RenderPoint is static:
    const
      SDL_RenderDrawPoint* = SDL_RenderDrawPoint_renamed_SDL_RenderPoint 
  else:
    let SDL_RenderDrawPoint* = SDL_RenderDrawPoint_renamed_SDL_RenderPoint 
when SDL_RenderDrawPointF_renamed_SDL_RenderPoint is typedesc:
  type
    SDL_RenderDrawPointF* = SDL_RenderDrawPointF_renamed_SDL_RenderPoint 
else:
  when SDL_RenderDrawPointF_renamed_SDL_RenderPoint is static:
    const
      SDL_RenderDrawPointF* = SDL_RenderDrawPointF_renamed_SDL_RenderPoint 
  else:
    let SDL_RenderDrawPointF* = SDL_RenderDrawPointF_renamed_SDL_RenderPoint 
when SDL_RenderDrawPoints_renamed_SDL_RenderPoints is typedesc:
  type
    SDL_RenderDrawPoints* = SDL_RenderDrawPoints_renamed_SDL_RenderPoints 
else:
  when SDL_RenderDrawPoints_renamed_SDL_RenderPoints is static:
    const
      SDL_RenderDrawPoints* = SDL_RenderDrawPoints_renamed_SDL_RenderPoints 
  else:
    let SDL_RenderDrawPoints* = SDL_RenderDrawPoints_renamed_SDL_RenderPoints 
when SDL_RenderDrawPointsF_renamed_SDL_RenderPoints is typedesc:
  type
    SDL_RenderDrawPointsF* = SDL_RenderDrawPointsF_renamed_SDL_RenderPoints 
else:
  when SDL_RenderDrawPointsF_renamed_SDL_RenderPoints is static:
    const
      SDL_RenderDrawPointsF* = SDL_RenderDrawPointsF_renamed_SDL_RenderPoints 
  else:
    let SDL_RenderDrawPointsF* = SDL_RenderDrawPointsF_renamed_SDL_RenderPoints 
when SDL_RenderDrawRect_renamed_SDL_RenderRect is typedesc:
  type
    SDL_RenderDrawRect* = SDL_RenderDrawRect_renamed_SDL_RenderRect 
else:
  when SDL_RenderDrawRect_renamed_SDL_RenderRect is static:
    const
      SDL_RenderDrawRect* = SDL_RenderDrawRect_renamed_SDL_RenderRect 
  else:
    let SDL_RenderDrawRect* = SDL_RenderDrawRect_renamed_SDL_RenderRect 
when SDL_RenderDrawRectF_renamed_SDL_RenderRect is typedesc:
  type
    SDL_RenderDrawRectF* = SDL_RenderDrawRectF_renamed_SDL_RenderRect 
else:
  when SDL_RenderDrawRectF_renamed_SDL_RenderRect is static:
    const
      SDL_RenderDrawRectF* = SDL_RenderDrawRectF_renamed_SDL_RenderRect 
  else:
    let SDL_RenderDrawRectF* = SDL_RenderDrawRectF_renamed_SDL_RenderRect 
when SDL_RenderDrawRects_renamed_SDL_RenderRects is typedesc:
  type
    SDL_RenderDrawRects* = SDL_RenderDrawRects_renamed_SDL_RenderRects 
else:
  when SDL_RenderDrawRects_renamed_SDL_RenderRects is static:
    const
      SDL_RenderDrawRects* = SDL_RenderDrawRects_renamed_SDL_RenderRects 
  else:
    let SDL_RenderDrawRects* = SDL_RenderDrawRects_renamed_SDL_RenderRects 
when SDL_RenderDrawRectsF_renamed_SDL_RenderRects is typedesc:
  type
    SDL_RenderDrawRectsF* = SDL_RenderDrawRectsF_renamed_SDL_RenderRects 
else:
  when SDL_RenderDrawRectsF_renamed_SDL_RenderRects is static:
    const
      SDL_RenderDrawRectsF* = SDL_RenderDrawRectsF_renamed_SDL_RenderRects 
  else:
    let SDL_RenderDrawRectsF* = SDL_RenderDrawRectsF_renamed_SDL_RenderRects 
when SDL_RenderFillRectF_renamed_SDL_RenderFillRect is typedesc:
  type
    SDL_RenderFillRectF* = SDL_RenderFillRectF_renamed_SDL_RenderFillRect 
else:
  when SDL_RenderFillRectF_renamed_SDL_RenderFillRect is static:
    const
      SDL_RenderFillRectF* = SDL_RenderFillRectF_renamed_SDL_RenderFillRect 
  else:
    let SDL_RenderFillRectF* = SDL_RenderFillRectF_renamed_SDL_RenderFillRect 
when SDL_RenderFillRectsF_renamed_SDL_RenderFillRects is typedesc:
  type
    SDL_RenderFillRectsF* = SDL_RenderFillRectsF_renamed_SDL_RenderFillRects 
else:
  when SDL_RenderFillRectsF_renamed_SDL_RenderFillRects is static:
    const
      SDL_RenderFillRectsF* = SDL_RenderFillRectsF_renamed_SDL_RenderFillRects 
  else:
    let SDL_RenderFillRectsF* = SDL_RenderFillRectsF_renamed_SDL_RenderFillRects 
when SDL_RendererFlip_renamed_SDL_FlipMode is typedesc:
  type
    SDL_RendererFlip* = SDL_RendererFlip_renamed_SDL_FlipMode 
else:
  when SDL_RendererFlip_renamed_SDL_FlipMode is static:
    const
      SDL_RendererFlip* = SDL_RendererFlip_renamed_SDL_FlipMode 
  else:
    let SDL_RendererFlip* = SDL_RendererFlip_renamed_SDL_FlipMode 
when SDL_RenderFlush_renamed_SDL_FlushRenderer is typedesc:
  type
    SDL_RenderFlush* = SDL_RenderFlush_renamed_SDL_FlushRenderer 
else:
  when SDL_RenderFlush_renamed_SDL_FlushRenderer is static:
    const
      SDL_RenderFlush* = SDL_RenderFlush_renamed_SDL_FlushRenderer 
  else:
    let SDL_RenderFlush* = SDL_RenderFlush_renamed_SDL_FlushRenderer 
when SDL_RenderGetClipRect_renamed_SDL_GetRenderClipRect is typedesc:
  type
    SDL_RenderGetClipRect* = SDL_RenderGetClipRect_renamed_SDL_GetRenderClipRect 
else:
  when SDL_RenderGetClipRect_renamed_SDL_GetRenderClipRect is static:
    const
      SDL_RenderGetClipRect* = SDL_RenderGetClipRect_renamed_SDL_GetRenderClipRect 
  else:
    let SDL_RenderGetClipRect* = SDL_RenderGetClipRect_renamed_SDL_GetRenderClipRect 
when SDL_RenderGetLogicalSize_renamed_SDL_GetRenderLogicalPresentation is
    typedesc:
  type
    SDL_RenderGetLogicalSize* = SDL_RenderGetLogicalSize_renamed_SDL_GetRenderLogicalPresentation 
else:
  when SDL_RenderGetLogicalSize_renamed_SDL_GetRenderLogicalPresentation is
      static:
    const
      SDL_RenderGetLogicalSize* = SDL_RenderGetLogicalSize_renamed_SDL_GetRenderLogicalPresentation 
  else:
    let SDL_RenderGetLogicalSize* = SDL_RenderGetLogicalSize_renamed_SDL_GetRenderLogicalPresentation 
when SDL_RenderGetMetalCommandEncoder_renamed_SDL_GetRenderMetalCommandEncoder is
    typedesc:
  type
    SDL_RenderGetMetalCommandEncoder* = SDL_RenderGetMetalCommandEncoder_renamed_SDL_GetRenderMetalCommandEncoder 
else:
  when SDL_RenderGetMetalCommandEncoder_renamed_SDL_GetRenderMetalCommandEncoder is
      static:
    const
      SDL_RenderGetMetalCommandEncoder* = SDL_RenderGetMetalCommandEncoder_renamed_SDL_GetRenderMetalCommandEncoder 
  else:
    let SDL_RenderGetMetalCommandEncoder* = SDL_RenderGetMetalCommandEncoder_renamed_SDL_GetRenderMetalCommandEncoder 
when SDL_RenderGetMetalLayer_renamed_SDL_GetRenderMetalLayer is typedesc:
  type
    SDL_RenderGetMetalLayer* = SDL_RenderGetMetalLayer_renamed_SDL_GetRenderMetalLayer 
else:
  when SDL_RenderGetMetalLayer_renamed_SDL_GetRenderMetalLayer is static:
    const
      SDL_RenderGetMetalLayer* = SDL_RenderGetMetalLayer_renamed_SDL_GetRenderMetalLayer 
  else:
    let SDL_RenderGetMetalLayer* = SDL_RenderGetMetalLayer_renamed_SDL_GetRenderMetalLayer 
when SDL_RenderGetScale_renamed_SDL_GetRenderScale is typedesc:
  type
    SDL_RenderGetScale* = SDL_RenderGetScale_renamed_SDL_GetRenderScale 
else:
  when SDL_RenderGetScale_renamed_SDL_GetRenderScale is static:
    const
      SDL_RenderGetScale* = SDL_RenderGetScale_renamed_SDL_GetRenderScale 
  else:
    let SDL_RenderGetScale* = SDL_RenderGetScale_renamed_SDL_GetRenderScale 
when SDL_RenderGetViewport_renamed_SDL_GetRenderViewport is typedesc:
  type
    SDL_RenderGetViewport* = SDL_RenderGetViewport_renamed_SDL_GetRenderViewport 
else:
  when SDL_RenderGetViewport_renamed_SDL_GetRenderViewport is static:
    const
      SDL_RenderGetViewport* = SDL_RenderGetViewport_renamed_SDL_GetRenderViewport 
  else:
    let SDL_RenderGetViewport* = SDL_RenderGetViewport_renamed_SDL_GetRenderViewport 
when SDL_RenderGetWindow_renamed_SDL_GetRenderWindow is typedesc:
  type
    SDL_RenderGetWindow* = SDL_RenderGetWindow_renamed_SDL_GetRenderWindow 
else:
  when SDL_RenderGetWindow_renamed_SDL_GetRenderWindow is static:
    const
      SDL_RenderGetWindow* = SDL_RenderGetWindow_renamed_SDL_GetRenderWindow 
  else:
    let SDL_RenderGetWindow* = SDL_RenderGetWindow_renamed_SDL_GetRenderWindow 
when SDL_RenderIsClipEnabled_renamed_SDL_RenderClipEnabled is typedesc:
  type
    SDL_RenderIsClipEnabled* = SDL_RenderIsClipEnabled_renamed_SDL_RenderClipEnabled 
else:
  when SDL_RenderIsClipEnabled_renamed_SDL_RenderClipEnabled is static:
    const
      SDL_RenderIsClipEnabled* = SDL_RenderIsClipEnabled_renamed_SDL_RenderClipEnabled 
  else:
    let SDL_RenderIsClipEnabled* = SDL_RenderIsClipEnabled_renamed_SDL_RenderClipEnabled 
when SDL_RenderLogicalToWindow_renamed_SDL_RenderCoordinatesToWindow is typedesc:
  type
    SDL_RenderLogicalToWindow* = SDL_RenderLogicalToWindow_renamed_SDL_RenderCoordinatesToWindow 
else:
  when SDL_RenderLogicalToWindow_renamed_SDL_RenderCoordinatesToWindow is static:
    const
      SDL_RenderLogicalToWindow* = SDL_RenderLogicalToWindow_renamed_SDL_RenderCoordinatesToWindow 
  else:
    let SDL_RenderLogicalToWindow* = SDL_RenderLogicalToWindow_renamed_SDL_RenderCoordinatesToWindow 
when SDL_RenderSetClipRect_renamed_SDL_SetRenderClipRect is typedesc:
  type
    SDL_RenderSetClipRect* = SDL_RenderSetClipRect_renamed_SDL_SetRenderClipRect 
else:
  when SDL_RenderSetClipRect_renamed_SDL_SetRenderClipRect is static:
    const
      SDL_RenderSetClipRect* = SDL_RenderSetClipRect_renamed_SDL_SetRenderClipRect 
  else:
    let SDL_RenderSetClipRect* = SDL_RenderSetClipRect_renamed_SDL_SetRenderClipRect 
when SDL_RenderSetLogicalSize_renamed_SDL_SetRenderLogicalPresentation is
    typedesc:
  type
    SDL_RenderSetLogicalSize* = SDL_RenderSetLogicalSize_renamed_SDL_SetRenderLogicalPresentation 
else:
  when SDL_RenderSetLogicalSize_renamed_SDL_SetRenderLogicalPresentation is
      static:
    const
      SDL_RenderSetLogicalSize* = SDL_RenderSetLogicalSize_renamed_SDL_SetRenderLogicalPresentation 
  else:
    let SDL_RenderSetLogicalSize* = SDL_RenderSetLogicalSize_renamed_SDL_SetRenderLogicalPresentation 
when SDL_RenderSetScale_renamed_SDL_SetRenderScale is typedesc:
  type
    SDL_RenderSetScale* = SDL_RenderSetScale_renamed_SDL_SetRenderScale 
else:
  when SDL_RenderSetScale_renamed_SDL_SetRenderScale is static:
    const
      SDL_RenderSetScale* = SDL_RenderSetScale_renamed_SDL_SetRenderScale 
  else:
    let SDL_RenderSetScale* = SDL_RenderSetScale_renamed_SDL_SetRenderScale 
when SDL_RenderSetVSync_renamed_SDL_SetRenderVSync is typedesc:
  type
    SDL_RenderSetVSync* = SDL_RenderSetVSync_renamed_SDL_SetRenderVSync 
else:
  when SDL_RenderSetVSync_renamed_SDL_SetRenderVSync is static:
    const
      SDL_RenderSetVSync* = SDL_RenderSetVSync_renamed_SDL_SetRenderVSync 
  else:
    let SDL_RenderSetVSync* = SDL_RenderSetVSync_renamed_SDL_SetRenderVSync 
when SDL_RenderSetViewport_renamed_SDL_SetRenderViewport is typedesc:
  type
    SDL_RenderSetViewport* = SDL_RenderSetViewport_renamed_SDL_SetRenderViewport 
else:
  when SDL_RenderSetViewport_renamed_SDL_SetRenderViewport is static:
    const
      SDL_RenderSetViewport* = SDL_RenderSetViewport_renamed_SDL_SetRenderViewport 
  else:
    let SDL_RenderSetViewport* = SDL_RenderSetViewport_renamed_SDL_SetRenderViewport 
when SDL_RenderWindowToLogical_renamed_SDL_RenderCoordinatesFromWindow is
    typedesc:
  type
    SDL_RenderWindowToLogical* = SDL_RenderWindowToLogical_renamed_SDL_RenderCoordinatesFromWindow 
else:
  when SDL_RenderWindowToLogical_renamed_SDL_RenderCoordinatesFromWindow is
      static:
    const
      SDL_RenderWindowToLogical* = SDL_RenderWindowToLogical_renamed_SDL_RenderCoordinatesFromWindow 
  else:
    let SDL_RenderWindowToLogical* = SDL_RenderWindowToLogical_renamed_SDL_RenderCoordinatesFromWindow 
when SDL_ScaleModeLinear_renamed_SDL_SCALEMODE_LINEAR is typedesc:
  type
    SDL_ScaleModeLinear* = SDL_ScaleModeLinear_renamed_SDL_SCALEMODE_LINEAR 
else:
  when SDL_ScaleModeLinear_renamed_SDL_SCALEMODE_LINEAR is static:
    const
      SDL_ScaleModeLinear* = SDL_ScaleModeLinear_renamed_SDL_SCALEMODE_LINEAR 
  else:
    let SDL_ScaleModeLinear* = SDL_ScaleModeLinear_renamed_SDL_SCALEMODE_LINEAR 
when SDL_ScaleModeNearest_renamed_SDL_SCALEMODE_NEAREST is typedesc:
  type
    SDL_ScaleModeNearest* = SDL_ScaleModeNearest_renamed_SDL_SCALEMODE_NEAREST 
else:
  when SDL_ScaleModeNearest_renamed_SDL_SCALEMODE_NEAREST is static:
    const
      SDL_ScaleModeNearest* = SDL_ScaleModeNearest_renamed_SDL_SCALEMODE_NEAREST 
  else:
    let SDL_ScaleModeNearest* = SDL_ScaleModeNearest_renamed_SDL_SCALEMODE_NEAREST 
when RW_SEEK_CUR_renamed_SDL_IO_SEEK_CUR is typedesc:
  type
    RW_SEEK_CUR* = RW_SEEK_CUR_renamed_SDL_IO_SEEK_CUR 
else:
  when RW_SEEK_CUR_renamed_SDL_IO_SEEK_CUR is static:
    const
      RW_SEEK_CUR* = RW_SEEK_CUR_renamed_SDL_IO_SEEK_CUR 
  else:
    let RW_SEEK_CUR* = RW_SEEK_CUR_renamed_SDL_IO_SEEK_CUR 
when RW_SEEK_END_renamed_SDL_IO_SEEK_END is typedesc:
  type
    RW_SEEK_END* = RW_SEEK_END_renamed_SDL_IO_SEEK_END 
else:
  when RW_SEEK_END_renamed_SDL_IO_SEEK_END is static:
    const
      RW_SEEK_END* = RW_SEEK_END_renamed_SDL_IO_SEEK_END 
  else:
    let RW_SEEK_END* = RW_SEEK_END_renamed_SDL_IO_SEEK_END 
when RW_SEEK_SET_renamed_SDL_IO_SEEK_SET is typedesc:
  type
    RW_SEEK_SET* = RW_SEEK_SET_renamed_SDL_IO_SEEK_SET 
else:
  when RW_SEEK_SET_renamed_SDL_IO_SEEK_SET is static:
    const
      RW_SEEK_SET* = RW_SEEK_SET_renamed_SDL_IO_SEEK_SET 
  else:
    let RW_SEEK_SET* = RW_SEEK_SET_renamed_SDL_IO_SEEK_SET 
when SDL_RWFromConstMem_renamed_SDL_IOFromConstMem is typedesc:
  type
    SDL_RWFromConstMem* = SDL_RWFromConstMem_renamed_SDL_IOFromConstMem 
else:
  when SDL_RWFromConstMem_renamed_SDL_IOFromConstMem is static:
    const
      SDL_RWFromConstMem* = SDL_RWFromConstMem_renamed_SDL_IOFromConstMem 
  else:
    let SDL_RWFromConstMem* = SDL_RWFromConstMem_renamed_SDL_IOFromConstMem 
when SDL_RWFromFile_renamed_SDL_IOFromFile is typedesc:
  type
    SDL_RWFromFile* = SDL_RWFromFile_renamed_SDL_IOFromFile 
else:
  when SDL_RWFromFile_renamed_SDL_IOFromFile is static:
    const
      SDL_RWFromFile* = SDL_RWFromFile_renamed_SDL_IOFromFile 
  else:
    let SDL_RWFromFile* = SDL_RWFromFile_renamed_SDL_IOFromFile 
when SDL_RWFromMem_renamed_SDL_IOFromMem is typedesc:
  type
    SDL_RWFromMem* = SDL_RWFromMem_renamed_SDL_IOFromMem 
else:
  when SDL_RWFromMem_renamed_SDL_IOFromMem is static:
    const
      SDL_RWFromMem* = SDL_RWFromMem_renamed_SDL_IOFromMem 
  else:
    let SDL_RWFromMem* = SDL_RWFromMem_renamed_SDL_IOFromMem 
when SDL_RWclose_renamed_SDL_CloseIO is typedesc:
  type
    SDL_RWclose* = SDL_RWclose_renamed_SDL_CloseIO 
else:
  when SDL_RWclose_renamed_SDL_CloseIO is static:
    const
      SDL_RWclose* = SDL_RWclose_renamed_SDL_CloseIO 
  else:
    let SDL_RWclose* = SDL_RWclose_renamed_SDL_CloseIO 
when SDL_RWops_renamed_SDL_IOStream is typedesc:
  type
    SDL_RWops* = SDL_RWops_renamed_SDL_IOStream 
else:
  when SDL_RWops_renamed_SDL_IOStream is static:
    const
      SDL_RWops* = SDL_RWops_renamed_SDL_IOStream 
  else:
    let SDL_RWops* = SDL_RWops_renamed_SDL_IOStream 
when SDL_RWread_renamed_SDL_ReadIO is typedesc:
  type
    SDL_RWread* = SDL_RWread_renamed_SDL_ReadIO 
else:
  when SDL_RWread_renamed_SDL_ReadIO is static:
    const
      SDL_RWread* = SDL_RWread_renamed_SDL_ReadIO 
  else:
    let SDL_RWread* = SDL_RWread_renamed_SDL_ReadIO 
when SDL_RWseek_renamed_SDL_SeekIO is typedesc:
  type
    SDL_RWseek* = SDL_RWseek_renamed_SDL_SeekIO 
else:
  when SDL_RWseek_renamed_SDL_SeekIO is static:
    const
      SDL_RWseek* = SDL_RWseek_renamed_SDL_SeekIO 
  else:
    let SDL_RWseek* = SDL_RWseek_renamed_SDL_SeekIO 
when SDL_RWsize_renamed_SDL_GetIOSize is typedesc:
  type
    SDL_RWsize* = SDL_RWsize_renamed_SDL_GetIOSize 
else:
  when SDL_RWsize_renamed_SDL_GetIOSize is static:
    const
      SDL_RWsize* = SDL_RWsize_renamed_SDL_GetIOSize 
  else:
    let SDL_RWsize* = SDL_RWsize_renamed_SDL_GetIOSize 
when SDL_RWtell_renamed_SDL_TellIO is typedesc:
  type
    SDL_RWtell* = SDL_RWtell_renamed_SDL_TellIO 
else:
  when SDL_RWtell_renamed_SDL_TellIO is static:
    const
      SDL_RWtell* = SDL_RWtell_renamed_SDL_TellIO 
  else:
    let SDL_RWtell* = SDL_RWtell_renamed_SDL_TellIO 
when SDL_RWwrite_renamed_SDL_WriteIO is typedesc:
  type
    SDL_RWwrite* = SDL_RWwrite_renamed_SDL_WriteIO 
else:
  when SDL_RWwrite_renamed_SDL_WriteIO is static:
    const
      SDL_RWwrite* = SDL_RWwrite_renamed_SDL_WriteIO 
  else:
    let SDL_RWwrite* = SDL_RWwrite_renamed_SDL_WriteIO 
when SDL_ReadBE16_renamed_SDL_ReadU16BE is typedesc:
  type
    SDL_ReadBE16* = SDL_ReadBE16_renamed_SDL_ReadU16BE 
else:
  when SDL_ReadBE16_renamed_SDL_ReadU16BE is static:
    const
      SDL_ReadBE16* = SDL_ReadBE16_renamed_SDL_ReadU16BE 
  else:
    let SDL_ReadBE16* = SDL_ReadBE16_renamed_SDL_ReadU16BE 
when SDL_ReadBE32_renamed_SDL_ReadU32BE is typedesc:
  type
    SDL_ReadBE32* = SDL_ReadBE32_renamed_SDL_ReadU32BE 
else:
  when SDL_ReadBE32_renamed_SDL_ReadU32BE is static:
    const
      SDL_ReadBE32* = SDL_ReadBE32_renamed_SDL_ReadU32BE 
  else:
    let SDL_ReadBE32* = SDL_ReadBE32_renamed_SDL_ReadU32BE 
when SDL_ReadBE64_renamed_SDL_ReadU64BE is typedesc:
  type
    SDL_ReadBE64* = SDL_ReadBE64_renamed_SDL_ReadU64BE 
else:
  when SDL_ReadBE64_renamed_SDL_ReadU64BE is static:
    const
      SDL_ReadBE64* = SDL_ReadBE64_renamed_SDL_ReadU64BE 
  else:
    let SDL_ReadBE64* = SDL_ReadBE64_renamed_SDL_ReadU64BE 
when SDL_ReadLE16_renamed_SDL_ReadU16LE is typedesc:
  type
    SDL_ReadLE16* = SDL_ReadLE16_renamed_SDL_ReadU16LE 
else:
  when SDL_ReadLE16_renamed_SDL_ReadU16LE is static:
    const
      SDL_ReadLE16* = SDL_ReadLE16_renamed_SDL_ReadU16LE 
  else:
    let SDL_ReadLE16* = SDL_ReadLE16_renamed_SDL_ReadU16LE 
when SDL_ReadLE32_renamed_SDL_ReadU32LE is typedesc:
  type
    SDL_ReadLE32* = SDL_ReadLE32_renamed_SDL_ReadU32LE 
else:
  when SDL_ReadLE32_renamed_SDL_ReadU32LE is static:
    const
      SDL_ReadLE32* = SDL_ReadLE32_renamed_SDL_ReadU32LE 
  else:
    let SDL_ReadLE32* = SDL_ReadLE32_renamed_SDL_ReadU32LE 
when SDL_ReadLE64_renamed_SDL_ReadU64LE is typedesc:
  type
    SDL_ReadLE64* = SDL_ReadLE64_renamed_SDL_ReadU64LE 
else:
  when SDL_ReadLE64_renamed_SDL_ReadU64LE is static:
    const
      SDL_ReadLE64* = SDL_ReadLE64_renamed_SDL_ReadU64LE 
  else:
    let SDL_ReadLE64* = SDL_ReadLE64_renamed_SDL_ReadU64LE 
when SDL_WriteBE16_renamed_SDL_WriteU16BE is typedesc:
  type
    SDL_WriteBE16* = SDL_WriteBE16_renamed_SDL_WriteU16BE 
else:
  when SDL_WriteBE16_renamed_SDL_WriteU16BE is static:
    const
      SDL_WriteBE16* = SDL_WriteBE16_renamed_SDL_WriteU16BE 
  else:
    let SDL_WriteBE16* = SDL_WriteBE16_renamed_SDL_WriteU16BE 
when SDL_WriteBE32_renamed_SDL_WriteU32BE is typedesc:
  type
    SDL_WriteBE32* = SDL_WriteBE32_renamed_SDL_WriteU32BE 
else:
  when SDL_WriteBE32_renamed_SDL_WriteU32BE is static:
    const
      SDL_WriteBE32* = SDL_WriteBE32_renamed_SDL_WriteU32BE 
  else:
    let SDL_WriteBE32* = SDL_WriteBE32_renamed_SDL_WriteU32BE 
when SDL_WriteBE64_renamed_SDL_WriteU64BE is typedesc:
  type
    SDL_WriteBE64* = SDL_WriteBE64_renamed_SDL_WriteU64BE 
else:
  when SDL_WriteBE64_renamed_SDL_WriteU64BE is static:
    const
      SDL_WriteBE64* = SDL_WriteBE64_renamed_SDL_WriteU64BE 
  else:
    let SDL_WriteBE64* = SDL_WriteBE64_renamed_SDL_WriteU64BE 
when SDL_WriteLE16_renamed_SDL_WriteU16LE is typedesc:
  type
    SDL_WriteLE16* = SDL_WriteLE16_renamed_SDL_WriteU16LE 
else:
  when SDL_WriteLE16_renamed_SDL_WriteU16LE is static:
    const
      SDL_WriteLE16* = SDL_WriteLE16_renamed_SDL_WriteU16LE 
  else:
    let SDL_WriteLE16* = SDL_WriteLE16_renamed_SDL_WriteU16LE 
when SDL_WriteLE32_renamed_SDL_WriteU32LE is typedesc:
  type
    SDL_WriteLE32* = SDL_WriteLE32_renamed_SDL_WriteU32LE 
else:
  when SDL_WriteLE32_renamed_SDL_WriteU32LE is static:
    const
      SDL_WriteLE32* = SDL_WriteLE32_renamed_SDL_WriteU32LE 
  else:
    let SDL_WriteLE32* = SDL_WriteLE32_renamed_SDL_WriteU32LE 
when SDL_WriteLE64_renamed_SDL_WriteU64LE is typedesc:
  type
    SDL_WriteLE64* = SDL_WriteLE64_renamed_SDL_WriteU64LE 
else:
  when SDL_WriteLE64_renamed_SDL_WriteU64LE is static:
    const
      SDL_WriteLE64* = SDL_WriteLE64_renamed_SDL_WriteU64LE 
  else:
    let SDL_WriteLE64* = SDL_WriteLE64_renamed_SDL_WriteU64LE 
when SDL_NUM_SCANCODES_renamed_SDL_SCANCODE_COUNT is typedesc:
  type
    SDL_NUM_SCANCODES* = SDL_NUM_SCANCODES_renamed_SDL_SCANCODE_COUNT 
else:
  when SDL_NUM_SCANCODES_renamed_SDL_SCANCODE_COUNT is static:
    const
      SDL_NUM_SCANCODES* = SDL_NUM_SCANCODES_renamed_SDL_SCANCODE_COUNT 
  else:
    let SDL_NUM_SCANCODES* = SDL_NUM_SCANCODES_renamed_SDL_SCANCODE_COUNT 
when SDL_SCANCODE_AUDIOFASTFORWARD_renamed_SDL_SCANCODE_MEDIA_FAST_FORWARD is
    typedesc:
  type
    SDL_SCANCODE_AUDIOFASTFORWARD* = SDL_SCANCODE_AUDIOFASTFORWARD_renamed_SDL_SCANCODE_MEDIA_FAST_FORWARD 
else:
  when SDL_SCANCODE_AUDIOFASTFORWARD_renamed_SDL_SCANCODE_MEDIA_FAST_FORWARD is
      static:
    const
      SDL_SCANCODE_AUDIOFASTFORWARD* = SDL_SCANCODE_AUDIOFASTFORWARD_renamed_SDL_SCANCODE_MEDIA_FAST_FORWARD 
  else:
    let SDL_SCANCODE_AUDIOFASTFORWARD* = SDL_SCANCODE_AUDIOFASTFORWARD_renamed_SDL_SCANCODE_MEDIA_FAST_FORWARD 
when SDL_SCANCODE_AUDIOMUTE_renamed_SDL_SCANCODE_MUTE is typedesc:
  type
    SDL_SCANCODE_AUDIOMUTE* = SDL_SCANCODE_AUDIOMUTE_renamed_SDL_SCANCODE_MUTE 
else:
  when SDL_SCANCODE_AUDIOMUTE_renamed_SDL_SCANCODE_MUTE is static:
    const
      SDL_SCANCODE_AUDIOMUTE* = SDL_SCANCODE_AUDIOMUTE_renamed_SDL_SCANCODE_MUTE 
  else:
    let SDL_SCANCODE_AUDIOMUTE* = SDL_SCANCODE_AUDIOMUTE_renamed_SDL_SCANCODE_MUTE 
when SDL_SCANCODE_AUDIONEXT_renamed_SDL_SCANCODE_MEDIA_NEXT_TRACK is typedesc:
  type
    SDL_SCANCODE_AUDIONEXT* = SDL_SCANCODE_AUDIONEXT_renamed_SDL_SCANCODE_MEDIA_NEXT_TRACK 
else:
  when SDL_SCANCODE_AUDIONEXT_renamed_SDL_SCANCODE_MEDIA_NEXT_TRACK is static:
    const
      SDL_SCANCODE_AUDIONEXT* = SDL_SCANCODE_AUDIONEXT_renamed_SDL_SCANCODE_MEDIA_NEXT_TRACK 
  else:
    let SDL_SCANCODE_AUDIONEXT* = SDL_SCANCODE_AUDIONEXT_renamed_SDL_SCANCODE_MEDIA_NEXT_TRACK 
when SDL_SCANCODE_AUDIOPLAY_renamed_SDL_SCANCODE_MEDIA_PLAY is typedesc:
  type
    SDL_SCANCODE_AUDIOPLAY* = SDL_SCANCODE_AUDIOPLAY_renamed_SDL_SCANCODE_MEDIA_PLAY 
else:
  when SDL_SCANCODE_AUDIOPLAY_renamed_SDL_SCANCODE_MEDIA_PLAY is static:
    const
      SDL_SCANCODE_AUDIOPLAY* = SDL_SCANCODE_AUDIOPLAY_renamed_SDL_SCANCODE_MEDIA_PLAY 
  else:
    let SDL_SCANCODE_AUDIOPLAY* = SDL_SCANCODE_AUDIOPLAY_renamed_SDL_SCANCODE_MEDIA_PLAY 
when SDL_SCANCODE_AUDIOPREV_renamed_SDL_SCANCODE_MEDIA_PREVIOUS_TRACK is
    typedesc:
  type
    SDL_SCANCODE_AUDIOPREV* = SDL_SCANCODE_AUDIOPREV_renamed_SDL_SCANCODE_MEDIA_PREVIOUS_TRACK 
else:
  when SDL_SCANCODE_AUDIOPREV_renamed_SDL_SCANCODE_MEDIA_PREVIOUS_TRACK is
      static:
    const
      SDL_SCANCODE_AUDIOPREV* = SDL_SCANCODE_AUDIOPREV_renamed_SDL_SCANCODE_MEDIA_PREVIOUS_TRACK 
  else:
    let SDL_SCANCODE_AUDIOPREV* = SDL_SCANCODE_AUDIOPREV_renamed_SDL_SCANCODE_MEDIA_PREVIOUS_TRACK 
when SDL_SCANCODE_AUDIOREWIND_renamed_SDL_SCANCODE_MEDIA_REWIND is typedesc:
  type
    SDL_SCANCODE_AUDIOREWIND* = SDL_SCANCODE_AUDIOREWIND_renamed_SDL_SCANCODE_MEDIA_REWIND 
else:
  when SDL_SCANCODE_AUDIOREWIND_renamed_SDL_SCANCODE_MEDIA_REWIND is static:
    const
      SDL_SCANCODE_AUDIOREWIND* = SDL_SCANCODE_AUDIOREWIND_renamed_SDL_SCANCODE_MEDIA_REWIND 
  else:
    let SDL_SCANCODE_AUDIOREWIND* = SDL_SCANCODE_AUDIOREWIND_renamed_SDL_SCANCODE_MEDIA_REWIND 
when SDL_SCANCODE_AUDIOSTOP_renamed_SDL_SCANCODE_MEDIA_STOP is typedesc:
  type
    SDL_SCANCODE_AUDIOSTOP* = SDL_SCANCODE_AUDIOSTOP_renamed_SDL_SCANCODE_MEDIA_STOP 
else:
  when SDL_SCANCODE_AUDIOSTOP_renamed_SDL_SCANCODE_MEDIA_STOP is static:
    const
      SDL_SCANCODE_AUDIOSTOP* = SDL_SCANCODE_AUDIOSTOP_renamed_SDL_SCANCODE_MEDIA_STOP 
  else:
    let SDL_SCANCODE_AUDIOSTOP* = SDL_SCANCODE_AUDIOSTOP_renamed_SDL_SCANCODE_MEDIA_STOP 
when SDL_SCANCODE_EJECT_renamed_SDL_SCANCODE_MEDIA_EJECT is typedesc:
  type
    SDL_SCANCODE_EJECT* = SDL_SCANCODE_EJECT_renamed_SDL_SCANCODE_MEDIA_EJECT 
else:
  when SDL_SCANCODE_EJECT_renamed_SDL_SCANCODE_MEDIA_EJECT is static:
    const
      SDL_SCANCODE_EJECT* = SDL_SCANCODE_EJECT_renamed_SDL_SCANCODE_MEDIA_EJECT 
  else:
    let SDL_SCANCODE_EJECT* = SDL_SCANCODE_EJECT_renamed_SDL_SCANCODE_MEDIA_EJECT 
when SDL_SCANCODE_MEDIASELECT_renamed_SDL_SCANCODE_MEDIA_SELECT is typedesc:
  type
    SDL_SCANCODE_MEDIASELECT* = SDL_SCANCODE_MEDIASELECT_renamed_SDL_SCANCODE_MEDIA_SELECT 
else:
  when SDL_SCANCODE_MEDIASELECT_renamed_SDL_SCANCODE_MEDIA_SELECT is static:
    const
      SDL_SCANCODE_MEDIASELECT* = SDL_SCANCODE_MEDIASELECT_renamed_SDL_SCANCODE_MEDIA_SELECT 
  else:
    let SDL_SCANCODE_MEDIASELECT* = SDL_SCANCODE_MEDIASELECT_renamed_SDL_SCANCODE_MEDIA_SELECT 
when SDL_SensorClose_renamed_SDL_CloseSensor is typedesc:
  type
    SDL_SensorClose* = SDL_SensorClose_renamed_SDL_CloseSensor 
else:
  when SDL_SensorClose_renamed_SDL_CloseSensor is static:
    const
      SDL_SensorClose* = SDL_SensorClose_renamed_SDL_CloseSensor 
  else:
    let SDL_SensorClose* = SDL_SensorClose_renamed_SDL_CloseSensor 
when SDL_SensorFromInstanceID_renamed_SDL_GetSensorFromID is typedesc:
  type
    SDL_SensorFromInstanceID* = SDL_SensorFromInstanceID_renamed_SDL_GetSensorFromID 
else:
  when SDL_SensorFromInstanceID_renamed_SDL_GetSensorFromID is static:
    const
      SDL_SensorFromInstanceID* = SDL_SensorFromInstanceID_renamed_SDL_GetSensorFromID 
  else:
    let SDL_SensorFromInstanceID* = SDL_SensorFromInstanceID_renamed_SDL_GetSensorFromID 
when SDL_SensorGetData_renamed_SDL_GetSensorData is typedesc:
  type
    SDL_SensorGetData* = SDL_SensorGetData_renamed_SDL_GetSensorData 
else:
  when SDL_SensorGetData_renamed_SDL_GetSensorData is static:
    const
      SDL_SensorGetData* = SDL_SensorGetData_renamed_SDL_GetSensorData 
  else:
    let SDL_SensorGetData* = SDL_SensorGetData_renamed_SDL_GetSensorData 
when SDL_SensorGetInstanceID_renamed_SDL_GetSensorID is typedesc:
  type
    SDL_SensorGetInstanceID* = SDL_SensorGetInstanceID_renamed_SDL_GetSensorID 
else:
  when SDL_SensorGetInstanceID_renamed_SDL_GetSensorID is static:
    const
      SDL_SensorGetInstanceID* = SDL_SensorGetInstanceID_renamed_SDL_GetSensorID 
  else:
    let SDL_SensorGetInstanceID* = SDL_SensorGetInstanceID_renamed_SDL_GetSensorID 
when SDL_SensorGetName_renamed_SDL_GetSensorName is typedesc:
  type
    SDL_SensorGetName* = SDL_SensorGetName_renamed_SDL_GetSensorName 
else:
  when SDL_SensorGetName_renamed_SDL_GetSensorName is static:
    const
      SDL_SensorGetName* = SDL_SensorGetName_renamed_SDL_GetSensorName 
  else:
    let SDL_SensorGetName* = SDL_SensorGetName_renamed_SDL_GetSensorName 
when SDL_SensorGetNonPortableType_renamed_SDL_GetSensorNonPortableType is
    typedesc:
  type
    SDL_SensorGetNonPortableType* = SDL_SensorGetNonPortableType_renamed_SDL_GetSensorNonPortableType 
else:
  when SDL_SensorGetNonPortableType_renamed_SDL_GetSensorNonPortableType is
      static:
    const
      SDL_SensorGetNonPortableType* = SDL_SensorGetNonPortableType_renamed_SDL_GetSensorNonPortableType 
  else:
    let SDL_SensorGetNonPortableType* = SDL_SensorGetNonPortableType_renamed_SDL_GetSensorNonPortableType 
when SDL_SensorGetType_renamed_SDL_GetSensorType is typedesc:
  type
    SDL_SensorGetType* = SDL_SensorGetType_renamed_SDL_GetSensorType 
else:
  when SDL_SensorGetType_renamed_SDL_GetSensorType is static:
    const
      SDL_SensorGetType* = SDL_SensorGetType_renamed_SDL_GetSensorType 
  else:
    let SDL_SensorGetType* = SDL_SensorGetType_renamed_SDL_GetSensorType 
when SDL_SensorOpen_renamed_SDL_OpenSensor is typedesc:
  type
    SDL_SensorOpen* = SDL_SensorOpen_renamed_SDL_OpenSensor 
else:
  when SDL_SensorOpen_renamed_SDL_OpenSensor is static:
    const
      SDL_SensorOpen* = SDL_SensorOpen_renamed_SDL_OpenSensor 
  else:
    let SDL_SensorOpen* = SDL_SensorOpen_renamed_SDL_OpenSensor 
when SDL_SensorUpdate_renamed_SDL_UpdateSensors is typedesc:
  type
    SDL_SensorUpdate_const* = SDL_SensorUpdate_renamed_SDL_UpdateSensors 
else:
  when SDL_SensorUpdate_renamed_SDL_UpdateSensors is static:
    const
      SDL_SensorUpdate_const* = SDL_SensorUpdate_renamed_SDL_UpdateSensors 
  else:
    let SDL_SensorUpdate_const* = SDL_SensorUpdate_renamed_SDL_UpdateSensors 
when SDL_FALSE_renamed_false is typedesc:
  type
    SDL_FALSE* = SDL_FALSE_renamed_false 
else:
  when SDL_FALSE_renamed_false is static:
    const
      SDL_FALSE* = SDL_FALSE_renamed_false 
  else:
    let SDL_FALSE* = SDL_FALSE_renamed_false 
when SDL_TABLESIZE_renamed_SDL_arraysize is typedesc:
  type
    SDL_TABLESIZE* = SDL_TABLESIZE_renamed_SDL_arraysize 
else:
  when SDL_TABLESIZE_renamed_SDL_arraysize is static:
    const
      SDL_TABLESIZE* = SDL_TABLESIZE_renamed_SDL_arraysize 
  else:
    let SDL_TABLESIZE* = SDL_TABLESIZE_renamed_SDL_arraysize 
when SDL_TRUE_renamed_true is typedesc:
  type
    SDL_TRUE* = SDL_TRUE_renamed_true 
else:
  when SDL_TRUE_renamed_true is static:
    const
      SDL_TRUE* = SDL_TRUE_renamed_true 
  else:
    let SDL_TRUE* = SDL_TRUE_renamed_true 
when SDL_bool_renamed_bool is typedesc:
  type
    SDL_bool* = SDL_bool_renamed_bool 
else:
  when SDL_bool_renamed_bool is static:
    const
      SDL_bool* = SDL_bool_renamed_bool 
  else:
    let SDL_bool* = SDL_bool_renamed_bool 
when SDL_size_add_overflow_renamed_SDL_size_add_check_overflow is typedesc:
  type
    SDL_size_add_overflow* = SDL_size_add_overflow_renamed_SDL_size_add_check_overflow 
else:
  when SDL_size_add_overflow_renamed_SDL_size_add_check_overflow is static:
    const
      SDL_size_add_overflow* = SDL_size_add_overflow_renamed_SDL_size_add_check_overflow 
  else:
    let SDL_size_add_overflow* = SDL_size_add_overflow_renamed_SDL_size_add_check_overflow 
when SDL_size_mul_overflow_renamed_SDL_size_mul_check_overflow is typedesc:
  type
    SDL_size_mul_overflow* = SDL_size_mul_overflow_renamed_SDL_size_mul_check_overflow 
else:
  when SDL_size_mul_overflow_renamed_SDL_size_mul_check_overflow is static:
    const
      SDL_size_mul_overflow* = SDL_size_mul_overflow_renamed_SDL_size_mul_check_overflow 
  else:
    let SDL_size_mul_overflow* = SDL_size_mul_overflow_renamed_SDL_size_mul_check_overflow 
when SDL_strtokr_renamed_SDL_strtok_r is typedesc:
  type
    SDL_strtokr* = SDL_strtokr_renamed_SDL_strtok_r 
else:
  when SDL_strtokr_renamed_SDL_strtok_r is static:
    const
      SDL_strtokr* = SDL_strtokr_renamed_SDL_strtok_r 
  else:
    let SDL_strtokr* = SDL_strtokr_renamed_SDL_strtok_r 
when SDL_BlitScaled_renamed_SDL_BlitSurfaceScaled is typedesc:
  type
    SDL_BlitScaled* = SDL_BlitScaled_renamed_SDL_BlitSurfaceScaled 
else:
  when SDL_BlitScaled_renamed_SDL_BlitSurfaceScaled is static:
    const
      SDL_BlitScaled* = SDL_BlitScaled_renamed_SDL_BlitSurfaceScaled 
  else:
    let SDL_BlitScaled* = SDL_BlitScaled_renamed_SDL_BlitSurfaceScaled 
when SDL_ConvertSurfaceFormat_renamed_SDL_ConvertSurface is typedesc:
  type
    SDL_ConvertSurfaceFormat* = SDL_ConvertSurfaceFormat_renamed_SDL_ConvertSurface 
else:
  when SDL_ConvertSurfaceFormat_renamed_SDL_ConvertSurface is static:
    const
      SDL_ConvertSurfaceFormat* = SDL_ConvertSurfaceFormat_renamed_SDL_ConvertSurface 
  else:
    let SDL_ConvertSurfaceFormat* = SDL_ConvertSurfaceFormat_renamed_SDL_ConvertSurface 
when SDL_FillRect_renamed_SDL_FillSurfaceRect is typedesc:
  type
    SDL_FillRect* = SDL_FillRect_renamed_SDL_FillSurfaceRect 
else:
  when SDL_FillRect_renamed_SDL_FillSurfaceRect is static:
    const
      SDL_FillRect* = SDL_FillRect_renamed_SDL_FillSurfaceRect 
  else:
    let SDL_FillRect* = SDL_FillRect_renamed_SDL_FillSurfaceRect 
when SDL_FillRects_renamed_SDL_FillSurfaceRects is typedesc:
  type
    SDL_FillRects* = SDL_FillRects_renamed_SDL_FillSurfaceRects 
else:
  when SDL_FillRects_renamed_SDL_FillSurfaceRects is static:
    const
      SDL_FillRects* = SDL_FillRects_renamed_SDL_FillSurfaceRects 
  else:
    let SDL_FillRects* = SDL_FillRects_renamed_SDL_FillSurfaceRects 
when SDL_FreeSurface_renamed_SDL_DestroySurface is typedesc:
  type
    SDL_FreeSurface* = SDL_FreeSurface_renamed_SDL_DestroySurface 
else:
  when SDL_FreeSurface_renamed_SDL_DestroySurface is static:
    const
      SDL_FreeSurface* = SDL_FreeSurface_renamed_SDL_DestroySurface 
  else:
    let SDL_FreeSurface* = SDL_FreeSurface_renamed_SDL_DestroySurface 
when SDL_GetClipRect_renamed_SDL_GetSurfaceClipRect is typedesc:
  type
    SDL_GetClipRect* = SDL_GetClipRect_renamed_SDL_GetSurfaceClipRect 
else:
  when SDL_GetClipRect_renamed_SDL_GetSurfaceClipRect is static:
    const
      SDL_GetClipRect* = SDL_GetClipRect_renamed_SDL_GetSurfaceClipRect 
  else:
    let SDL_GetClipRect* = SDL_GetClipRect_renamed_SDL_GetSurfaceClipRect 
when SDL_GetColorKey_renamed_SDL_GetSurfaceColorKey is typedesc:
  type
    SDL_GetColorKey* = SDL_GetColorKey_renamed_SDL_GetSurfaceColorKey 
else:
  when SDL_GetColorKey_renamed_SDL_GetSurfaceColorKey is static:
    const
      SDL_GetColorKey* = SDL_GetColorKey_renamed_SDL_GetSurfaceColorKey 
  else:
    let SDL_GetColorKey* = SDL_GetColorKey_renamed_SDL_GetSurfaceColorKey 
when SDL_HasColorKey_renamed_SDL_SurfaceHasColorKey is typedesc:
  type
    SDL_HasColorKey* = SDL_HasColorKey_renamed_SDL_SurfaceHasColorKey 
else:
  when SDL_HasColorKey_renamed_SDL_SurfaceHasColorKey is static:
    const
      SDL_HasColorKey* = SDL_HasColorKey_renamed_SDL_SurfaceHasColorKey 
  else:
    let SDL_HasColorKey* = SDL_HasColorKey_renamed_SDL_SurfaceHasColorKey 
when SDL_HasSurfaceRLE_renamed_SDL_SurfaceHasRLE is typedesc:
  type
    SDL_HasSurfaceRLE* = SDL_HasSurfaceRLE_renamed_SDL_SurfaceHasRLE 
else:
  when SDL_HasSurfaceRLE_renamed_SDL_SurfaceHasRLE is static:
    const
      SDL_HasSurfaceRLE* = SDL_HasSurfaceRLE_renamed_SDL_SurfaceHasRLE 
  else:
    let SDL_HasSurfaceRLE* = SDL_HasSurfaceRLE_renamed_SDL_SurfaceHasRLE 
when SDL_LoadBMP_RW_renamed_SDL_LoadBMP_IO is typedesc:
  type
    SDL_LoadBMP_RW* = SDL_LoadBMP_RW_renamed_SDL_LoadBMP_IO 
else:
  when SDL_LoadBMP_RW_renamed_SDL_LoadBMP_IO is static:
    const
      SDL_LoadBMP_RW* = SDL_LoadBMP_RW_renamed_SDL_LoadBMP_IO 
  else:
    let SDL_LoadBMP_RW* = SDL_LoadBMP_RW_renamed_SDL_LoadBMP_IO 
when SDL_LowerBlit_renamed_SDL_BlitSurfaceUnchecked is typedesc:
  type
    SDL_LowerBlit* = SDL_LowerBlit_renamed_SDL_BlitSurfaceUnchecked 
else:
  when SDL_LowerBlit_renamed_SDL_BlitSurfaceUnchecked is static:
    const
      SDL_LowerBlit* = SDL_LowerBlit_renamed_SDL_BlitSurfaceUnchecked 
  else:
    let SDL_LowerBlit* = SDL_LowerBlit_renamed_SDL_BlitSurfaceUnchecked 
when SDL_LowerBlitScaled_renamed_SDL_BlitSurfaceUncheckedScaled is typedesc:
  type
    SDL_LowerBlitScaled* = SDL_LowerBlitScaled_renamed_SDL_BlitSurfaceUncheckedScaled 
else:
  when SDL_LowerBlitScaled_renamed_SDL_BlitSurfaceUncheckedScaled is static:
    const
      SDL_LowerBlitScaled* = SDL_LowerBlitScaled_renamed_SDL_BlitSurfaceUncheckedScaled 
  else:
    let SDL_LowerBlitScaled* = SDL_LowerBlitScaled_renamed_SDL_BlitSurfaceUncheckedScaled 
when SDL_PREALLOC_renamed_SDL_SURFACE_PREALLOCATED is typedesc:
  type
    SDL_PREALLOC* = SDL_PREALLOC_renamed_SDL_SURFACE_PREALLOCATED 
else:
  when SDL_PREALLOC_renamed_SDL_SURFACE_PREALLOCATED is static:
    const
      SDL_PREALLOC* = SDL_PREALLOC_renamed_SDL_SURFACE_PREALLOCATED 
  else:
    let SDL_PREALLOC* = SDL_PREALLOC_renamed_SDL_SURFACE_PREALLOCATED 
when SDL_SIMD_ALIGNED_renamed_SDL_SURFACE_SIMD_ALIGNED is typedesc:
  type
    SDL_SIMD_ALIGNED* = SDL_SIMD_ALIGNED_renamed_SDL_SURFACE_SIMD_ALIGNED 
else:
  when SDL_SIMD_ALIGNED_renamed_SDL_SURFACE_SIMD_ALIGNED is static:
    const
      SDL_SIMD_ALIGNED* = SDL_SIMD_ALIGNED_renamed_SDL_SURFACE_SIMD_ALIGNED 
  else:
    let SDL_SIMD_ALIGNED* = SDL_SIMD_ALIGNED_renamed_SDL_SURFACE_SIMD_ALIGNED 
when SDL_SaveBMP_RW_renamed_SDL_SaveBMP_IO is typedesc:
  type
    SDL_SaveBMP_RW* = SDL_SaveBMP_RW_renamed_SDL_SaveBMP_IO 
else:
  when SDL_SaveBMP_RW_renamed_SDL_SaveBMP_IO is static:
    const
      SDL_SaveBMP_RW* = SDL_SaveBMP_RW_renamed_SDL_SaveBMP_IO 
  else:
    let SDL_SaveBMP_RW* = SDL_SaveBMP_RW_renamed_SDL_SaveBMP_IO 
when SDL_SetClipRect_renamed_SDL_SetSurfaceClipRect is typedesc:
  type
    SDL_SetClipRect* = SDL_SetClipRect_renamed_SDL_SetSurfaceClipRect 
else:
  when SDL_SetClipRect_renamed_SDL_SetSurfaceClipRect is static:
    const
      SDL_SetClipRect* = SDL_SetClipRect_renamed_SDL_SetSurfaceClipRect 
  else:
    let SDL_SetClipRect* = SDL_SetClipRect_renamed_SDL_SetSurfaceClipRect 
when SDL_SetColorKey_renamed_SDL_SetSurfaceColorKey is typedesc:
  type
    SDL_SetColorKey* = SDL_SetColorKey_renamed_SDL_SetSurfaceColorKey 
else:
  when SDL_SetColorKey_renamed_SDL_SetSurfaceColorKey is static:
    const
      SDL_SetColorKey* = SDL_SetColorKey_renamed_SDL_SetSurfaceColorKey 
  else:
    let SDL_SetColorKey* = SDL_SetColorKey_renamed_SDL_SetSurfaceColorKey 
when SDL_UpperBlit_renamed_SDL_BlitSurface is typedesc:
  type
    SDL_UpperBlit* = SDL_UpperBlit_renamed_SDL_BlitSurface 
else:
  when SDL_UpperBlit_renamed_SDL_BlitSurface is static:
    const
      SDL_UpperBlit* = SDL_UpperBlit_renamed_SDL_BlitSurface 
  else:
    let SDL_UpperBlit* = SDL_UpperBlit_renamed_SDL_BlitSurface 
when SDL_UpperBlitScaled_renamed_SDL_BlitSurfaceScaled is typedesc:
  type
    SDL_UpperBlitScaled* = SDL_UpperBlitScaled_renamed_SDL_BlitSurfaceScaled 
else:
  when SDL_UpperBlitScaled_renamed_SDL_BlitSurfaceScaled is static:
    const
      SDL_UpperBlitScaled* = SDL_UpperBlitScaled_renamed_SDL_BlitSurfaceScaled 
  else:
    let SDL_UpperBlitScaled* = SDL_UpperBlitScaled_renamed_SDL_BlitSurfaceScaled 
when SDL_AndroidBackButton_renamed_SDL_SendAndroidBackButton is typedesc:
  type
    SDL_AndroidBackButton* = SDL_AndroidBackButton_renamed_SDL_SendAndroidBackButton 
else:
  when SDL_AndroidBackButton_renamed_SDL_SendAndroidBackButton is static:
    const
      SDL_AndroidBackButton* = SDL_AndroidBackButton_renamed_SDL_SendAndroidBackButton 
  else:
    let SDL_AndroidBackButton* = SDL_AndroidBackButton_renamed_SDL_SendAndroidBackButton 
when SDL_AndroidGetActivity_renamed_SDL_GetAndroidActivity is typedesc:
  type
    SDL_AndroidGetActivity* = SDL_AndroidGetActivity_renamed_SDL_GetAndroidActivity 
else:
  when SDL_AndroidGetActivity_renamed_SDL_GetAndroidActivity is static:
    const
      SDL_AndroidGetActivity* = SDL_AndroidGetActivity_renamed_SDL_GetAndroidActivity 
  else:
    let SDL_AndroidGetActivity* = SDL_AndroidGetActivity_renamed_SDL_GetAndroidActivity 
when SDL_AndroidGetExternalStoragePath_renamed_SDL_GetAndroidExternalStoragePath is
    typedesc:
  type
    SDL_AndroidGetExternalStoragePath* = SDL_AndroidGetExternalStoragePath_renamed_SDL_GetAndroidExternalStoragePath 
else:
  when SDL_AndroidGetExternalStoragePath_renamed_SDL_GetAndroidExternalStoragePath is
      static:
    const
      SDL_AndroidGetExternalStoragePath* = SDL_AndroidGetExternalStoragePath_renamed_SDL_GetAndroidExternalStoragePath 
  else:
    let SDL_AndroidGetExternalStoragePath* = SDL_AndroidGetExternalStoragePath_renamed_SDL_GetAndroidExternalStoragePath 
when SDL_AndroidGetExternalStorageState_renamed_SDL_GetAndroidExternalStorageState is
    typedesc:
  type
    SDL_AndroidGetExternalStorageState* = SDL_AndroidGetExternalStorageState_renamed_SDL_GetAndroidExternalStorageState 
else:
  when SDL_AndroidGetExternalStorageState_renamed_SDL_GetAndroidExternalStorageState is
      static:
    const
      SDL_AndroidGetExternalStorageState* = SDL_AndroidGetExternalStorageState_renamed_SDL_GetAndroidExternalStorageState 
  else:
    let SDL_AndroidGetExternalStorageState* = SDL_AndroidGetExternalStorageState_renamed_SDL_GetAndroidExternalStorageState 
when SDL_AndroidGetInternalStoragePath_renamed_SDL_GetAndroidInternalStoragePath is
    typedesc:
  type
    SDL_AndroidGetInternalStoragePath* = SDL_AndroidGetInternalStoragePath_renamed_SDL_GetAndroidInternalStoragePath 
else:
  when SDL_AndroidGetInternalStoragePath_renamed_SDL_GetAndroidInternalStoragePath is
      static:
    const
      SDL_AndroidGetInternalStoragePath* = SDL_AndroidGetInternalStoragePath_renamed_SDL_GetAndroidInternalStoragePath 
  else:
    let SDL_AndroidGetInternalStoragePath* = SDL_AndroidGetInternalStoragePath_renamed_SDL_GetAndroidInternalStoragePath 
when SDL_AndroidGetJNIEnv_renamed_SDL_GetAndroidJNIEnv is typedesc:
  type
    SDL_AndroidGetJNIEnv* = SDL_AndroidGetJNIEnv_renamed_SDL_GetAndroidJNIEnv 
else:
  when SDL_AndroidGetJNIEnv_renamed_SDL_GetAndroidJNIEnv is static:
    const
      SDL_AndroidGetJNIEnv* = SDL_AndroidGetJNIEnv_renamed_SDL_GetAndroidJNIEnv 
  else:
    let SDL_AndroidGetJNIEnv* = SDL_AndroidGetJNIEnv_renamed_SDL_GetAndroidJNIEnv 
when SDL_AndroidRequestPermission_renamed_SDL_RequestAndroidPermission is
    typedesc:
  type
    SDL_AndroidRequestPermission* = SDL_AndroidRequestPermission_renamed_SDL_RequestAndroidPermission 
else:
  when SDL_AndroidRequestPermission_renamed_SDL_RequestAndroidPermission is
      static:
    const
      SDL_AndroidRequestPermission* = SDL_AndroidRequestPermission_renamed_SDL_RequestAndroidPermission 
  else:
    let SDL_AndroidRequestPermission* = SDL_AndroidRequestPermission_renamed_SDL_RequestAndroidPermission 
when SDL_AndroidRequestPermissionCallback_renamed_SDL_RequestAndroidPermissionCallback is
    typedesc:
  type
    SDL_AndroidRequestPermissionCallback* = SDL_AndroidRequestPermissionCallback_renamed_SDL_RequestAndroidPermissionCallback 
else:
  when SDL_AndroidRequestPermissionCallback_renamed_SDL_RequestAndroidPermissionCallback is
      static:
    const
      SDL_AndroidRequestPermissionCallback* = SDL_AndroidRequestPermissionCallback_renamed_SDL_RequestAndroidPermissionCallback 
  else:
    let SDL_AndroidRequestPermissionCallback* = SDL_AndroidRequestPermissionCallback_renamed_SDL_RequestAndroidPermissionCallback 
when SDL_AndroidSendMessage_renamed_SDL_SendAndroidMessage is typedesc:
  type
    SDL_AndroidSendMessage* = SDL_AndroidSendMessage_renamed_SDL_SendAndroidMessage 
else:
  when SDL_AndroidSendMessage_renamed_SDL_SendAndroidMessage is static:
    const
      SDL_AndroidSendMessage* = SDL_AndroidSendMessage_renamed_SDL_SendAndroidMessage 
  else:
    let SDL_AndroidSendMessage* = SDL_AndroidSendMessage_renamed_SDL_SendAndroidMessage 
when SDL_AndroidShowToast_renamed_SDL_ShowAndroidToast is typedesc:
  type
    SDL_AndroidShowToast* = SDL_AndroidShowToast_renamed_SDL_ShowAndroidToast 
else:
  when SDL_AndroidShowToast_renamed_SDL_ShowAndroidToast is static:
    const
      SDL_AndroidShowToast* = SDL_AndroidShowToast_renamed_SDL_ShowAndroidToast 
  else:
    let SDL_AndroidShowToast* = SDL_AndroidShowToast_renamed_SDL_ShowAndroidToast 
when SDL_DXGIGetOutputInfo_renamed_SDL_GetDXGIOutputInfo is typedesc:
  type
    SDL_DXGIGetOutputInfo* = SDL_DXGIGetOutputInfo_renamed_SDL_GetDXGIOutputInfo 
else:
  when SDL_DXGIGetOutputInfo_renamed_SDL_GetDXGIOutputInfo is static:
    const
      SDL_DXGIGetOutputInfo* = SDL_DXGIGetOutputInfo_renamed_SDL_GetDXGIOutputInfo 
  else:
    let SDL_DXGIGetOutputInfo* = SDL_DXGIGetOutputInfo_renamed_SDL_GetDXGIOutputInfo 
when SDL_Direct3D9GetAdapterIndex_renamed_SDL_GetDirect3D9AdapterIndex is
    typedesc:
  type
    SDL_Direct3D9GetAdapterIndex* = SDL_Direct3D9GetAdapterIndex_renamed_SDL_GetDirect3D9AdapterIndex 
else:
  when SDL_Direct3D9GetAdapterIndex_renamed_SDL_GetDirect3D9AdapterIndex is
      static:
    const
      SDL_Direct3D9GetAdapterIndex* = SDL_Direct3D9GetAdapterIndex_renamed_SDL_GetDirect3D9AdapterIndex 
  else:
    let SDL_Direct3D9GetAdapterIndex* = SDL_Direct3D9GetAdapterIndex_renamed_SDL_GetDirect3D9AdapterIndex 
when SDL_GDKGetDefaultUser_renamed_SDL_GetGDKDefaultUser is typedesc:
  type
    SDL_GDKGetDefaultUser* = SDL_GDKGetDefaultUser_renamed_SDL_GetGDKDefaultUser 
else:
  when SDL_GDKGetDefaultUser_renamed_SDL_GetGDKDefaultUser is static:
    const
      SDL_GDKGetDefaultUser* = SDL_GDKGetDefaultUser_renamed_SDL_GetGDKDefaultUser 
  else:
    let SDL_GDKGetDefaultUser* = SDL_GDKGetDefaultUser_renamed_SDL_GetGDKDefaultUser 
when SDL_GDKGetTaskQueue_renamed_SDL_GetGDKTaskQueue is typedesc:
  type
    SDL_GDKGetTaskQueue* = SDL_GDKGetTaskQueue_renamed_SDL_GetGDKTaskQueue 
else:
  when SDL_GDKGetTaskQueue_renamed_SDL_GetGDKTaskQueue is static:
    const
      SDL_GDKGetTaskQueue* = SDL_GDKGetTaskQueue_renamed_SDL_GetGDKTaskQueue 
  else:
    let SDL_GDKGetTaskQueue* = SDL_GDKGetTaskQueue_renamed_SDL_GetGDKTaskQueue 
when SDL_LinuxSetThreadPriority_renamed_SDL_SetLinuxThreadPriority is typedesc:
  type
    SDL_LinuxSetThreadPriority* = SDL_LinuxSetThreadPriority_renamed_SDL_SetLinuxThreadPriority 
else:
  when SDL_LinuxSetThreadPriority_renamed_SDL_SetLinuxThreadPriority is static:
    const
      SDL_LinuxSetThreadPriority* = SDL_LinuxSetThreadPriority_renamed_SDL_SetLinuxThreadPriority 
  else:
    let SDL_LinuxSetThreadPriority* = SDL_LinuxSetThreadPriority_renamed_SDL_SetLinuxThreadPriority 
when SDL_LinuxSetThreadPriorityAndPolicy_renamed_SDL_SetLinuxThreadPriorityAndPolicy is
    typedesc:
  type
    SDL_LinuxSetThreadPriorityAndPolicy* = SDL_LinuxSetThreadPriorityAndPolicy_renamed_SDL_SetLinuxThreadPriorityAndPolicy 
else:
  when SDL_LinuxSetThreadPriorityAndPolicy_renamed_SDL_SetLinuxThreadPriorityAndPolicy is
      static:
    const
      SDL_LinuxSetThreadPriorityAndPolicy* = SDL_LinuxSetThreadPriorityAndPolicy_renamed_SDL_SetLinuxThreadPriorityAndPolicy 
  else:
    let SDL_LinuxSetThreadPriorityAndPolicy* = SDL_LinuxSetThreadPriorityAndPolicy_renamed_SDL_SetLinuxThreadPriorityAndPolicy 
when SDL_OnApplicationDidBecomeActive_renamed_SDL_OnApplicationDidEnterForeground is
    typedesc:
  type
    SDL_OnApplicationDidBecomeActive* = SDL_OnApplicationDidBecomeActive_renamed_SDL_OnApplicationDidEnterForeground 
else:
  when SDL_OnApplicationDidBecomeActive_renamed_SDL_OnApplicationDidEnterForeground is
      static:
    const
      SDL_OnApplicationDidBecomeActive* = SDL_OnApplicationDidBecomeActive_renamed_SDL_OnApplicationDidEnterForeground 
  else:
    let SDL_OnApplicationDidBecomeActive* = SDL_OnApplicationDidBecomeActive_renamed_SDL_OnApplicationDidEnterForeground 
when SDL_OnApplicationWillResignActive_renamed_SDL_OnApplicationWillEnterBackground is
    typedesc:
  type
    SDL_OnApplicationWillResignActive* = SDL_OnApplicationWillResignActive_renamed_SDL_OnApplicationWillEnterBackground 
else:
  when SDL_OnApplicationWillResignActive_renamed_SDL_OnApplicationWillEnterBackground is
      static:
    const
      SDL_OnApplicationWillResignActive* = SDL_OnApplicationWillResignActive_renamed_SDL_OnApplicationWillEnterBackground 
  else:
    let SDL_OnApplicationWillResignActive* = SDL_OnApplicationWillResignActive_renamed_SDL_OnApplicationWillEnterBackground 
when SDL_iOSSetAnimationCallback_renamed_SDL_SetiOSAnimationCallback is typedesc:
  type
    SDL_iOSSetAnimationCallback* = SDL_iOSSetAnimationCallback_renamed_SDL_SetiOSAnimationCallback 
else:
  when SDL_iOSSetAnimationCallback_renamed_SDL_SetiOSAnimationCallback is static:
    const
      SDL_iOSSetAnimationCallback* = SDL_iOSSetAnimationCallback_renamed_SDL_SetiOSAnimationCallback 
  else:
    let SDL_iOSSetAnimationCallback* = SDL_iOSSetAnimationCallback_renamed_SDL_SetiOSAnimationCallback 
when SDL_iOSSetEventPump_renamed_SDL_SetiOSEventPump is typedesc:
  type
    SDL_iOSSetEventPump* = SDL_iOSSetEventPump_renamed_SDL_SetiOSEventPump 
else:
  when SDL_iOSSetEventPump_renamed_SDL_SetiOSEventPump is static:
    const
      SDL_iOSSetEventPump* = SDL_iOSSetEventPump_renamed_SDL_SetiOSEventPump 
  else:
    let SDL_iOSSetEventPump* = SDL_iOSSetEventPump_renamed_SDL_SetiOSEventPump 
when SDL_iPhoneSetAnimationCallback_renamed_SDL_iOSSetAnimationCallback is
    typedesc:
  type
    SDL_iPhoneSetAnimationCallback* = SDL_iPhoneSetAnimationCallback_renamed_SDL_iOSSetAnimationCallback 
else:
  when SDL_iPhoneSetAnimationCallback_renamed_SDL_iOSSetAnimationCallback is
      static:
    const
      SDL_iPhoneSetAnimationCallback* = SDL_iPhoneSetAnimationCallback_renamed_SDL_iOSSetAnimationCallback 
  else:
    let SDL_iPhoneSetAnimationCallback* = SDL_iPhoneSetAnimationCallback_renamed_SDL_iOSSetAnimationCallback 
when SDL_iPhoneSetEventPump_renamed_SDL_iOSSetEventPump is typedesc:
  type
    SDL_iPhoneSetEventPump* = SDL_iPhoneSetEventPump_renamed_SDL_iOSSetEventPump 
else:
  when SDL_iPhoneSetEventPump_renamed_SDL_iOSSetEventPump is static:
    const
      SDL_iPhoneSetEventPump* = SDL_iPhoneSetEventPump_renamed_SDL_iOSSetEventPump 
  else:
    let SDL_iPhoneSetEventPump* = SDL_iPhoneSetEventPump_renamed_SDL_iOSSetEventPump 
when SDL_SetThreadPriority_renamed_SDL_SetCurrentThreadPriority is typedesc:
  type
    SDL_SetThreadPriority* = SDL_SetThreadPriority_renamed_SDL_SetCurrentThreadPriority 
else:
  when SDL_SetThreadPriority_renamed_SDL_SetCurrentThreadPriority is static:
    const
      SDL_SetThreadPriority* = SDL_SetThreadPriority_renamed_SDL_SetCurrentThreadPriority 
  else:
    let SDL_SetThreadPriority* = SDL_SetThreadPriority_renamed_SDL_SetCurrentThreadPriority 
when SDL_TLSCleanup_renamed_SDL_CleanupTLS is typedesc:
  type
    SDL_TLSCleanup* = SDL_TLSCleanup_renamed_SDL_CleanupTLS 
else:
  when SDL_TLSCleanup_renamed_SDL_CleanupTLS is static:
    const
      SDL_TLSCleanup* = SDL_TLSCleanup_renamed_SDL_CleanupTLS 
  else:
    let SDL_TLSCleanup* = SDL_TLSCleanup_renamed_SDL_CleanupTLS 
when SDL_TLSGet_renamed_SDL_GetTLS is typedesc:
  type
    SDL_TLSGet* = SDL_TLSGet_renamed_SDL_GetTLS 
else:
  when SDL_TLSGet_renamed_SDL_GetTLS is static:
    const
      SDL_TLSGet* = SDL_TLSGet_renamed_SDL_GetTLS 
  else:
    let SDL_TLSGet* = SDL_TLSGet_renamed_SDL_GetTLS 
when SDL_TLSSet_renamed_SDL_SetTLS is typedesc:
  type
    SDL_TLSSet* = SDL_TLSSet_renamed_SDL_SetTLS 
else:
  when SDL_TLSSet_renamed_SDL_SetTLS is static:
    const
      SDL_TLSSet* = SDL_TLSSet_renamed_SDL_SetTLS 
  else:
    let SDL_TLSSet* = SDL_TLSSet_renamed_SDL_SetTLS 
when SDL_threadID_renamed_SDL_ThreadID is typedesc:
  type
    SDL_threadID* = SDL_threadID_renamed_SDL_ThreadID 
else:
  when SDL_threadID_renamed_SDL_ThreadID is static:
    const
      SDL_threadID* = SDL_threadID_renamed_SDL_ThreadID 
  else:
    let SDL_threadID* = SDL_threadID_renamed_SDL_ThreadID 
when SDL_GetTicks64_renamed_SDL_GetTicks is typedesc:
  type
    SDL_GetTicks64* = SDL_GetTicks64_renamed_SDL_GetTicks 
else:
  when SDL_GetTicks64_renamed_SDL_GetTicks is static:
    const
      SDL_GetTicks64* = SDL_GetTicks64_renamed_SDL_GetTicks 
  else:
    let SDL_GetTicks64* = SDL_GetTicks64_renamed_SDL_GetTicks 
when SDL_COMPILEDVERSION_renamed_SDL_VERSION is typedesc:
  type
    SDL_COMPILEDVERSION* = SDL_COMPILEDVERSION_renamed_SDL_VERSION 
else:
  when SDL_COMPILEDVERSION_renamed_SDL_VERSION is static:
    const
      SDL_COMPILEDVERSION* = SDL_COMPILEDVERSION_renamed_SDL_VERSION 
  else:
    let SDL_COMPILEDVERSION* = SDL_COMPILEDVERSION_renamed_SDL_VERSION 
when SDL_PATCHLEVEL_renamed_SDL_MICRO_VERSION is typedesc:
  type
    SDL_PATCHLEVEL* = SDL_PATCHLEVEL_renamed_SDL_MICRO_VERSION 
else:
  when SDL_PATCHLEVEL_renamed_SDL_MICRO_VERSION is static:
    const
      SDL_PATCHLEVEL* = SDL_PATCHLEVEL_renamed_SDL_MICRO_VERSION 
  else:
    let SDL_PATCHLEVEL* = SDL_PATCHLEVEL_renamed_SDL_MICRO_VERSION 
when SDL_GL_DeleteContext_renamed_SDL_GL_DestroyContext is typedesc:
  type
    SDL_GL_DeleteContext* = SDL_GL_DeleteContext_renamed_SDL_GL_DestroyContext 
else:
  when SDL_GL_DeleteContext_renamed_SDL_GL_DestroyContext is static:
    const
      SDL_GL_DeleteContext* = SDL_GL_DeleteContext_renamed_SDL_GL_DestroyContext 
  else:
    let SDL_GL_DeleteContext* = SDL_GL_DeleteContext_renamed_SDL_GL_DestroyContext 
when SDL_GLattr_renamed_SDL_GLAttr is typedesc:
  type
    SDL_GLattr* = SDL_GLattr_renamed_SDL_GLAttr 
else:
  when SDL_GLattr_renamed_SDL_GLAttr is static:
    const
      SDL_GLattr* = SDL_GLattr_renamed_SDL_GLAttr 
  else:
    let SDL_GLattr* = SDL_GLattr_renamed_SDL_GLAttr 
when SDL_GLcontextFlag_renamed_SDL_GLContextFlag is typedesc:
  type
    SDL_GLcontextFlag* = SDL_GLcontextFlag_renamed_SDL_GLContextFlag 
else:
  when SDL_GLcontextFlag_renamed_SDL_GLContextFlag is static:
    const
      SDL_GLcontextFlag* = SDL_GLcontextFlag_renamed_SDL_GLContextFlag 
  else:
    let SDL_GLcontextFlag* = SDL_GLcontextFlag_renamed_SDL_GLContextFlag 
when SDL_GLcontextReleaseFlag_renamed_SDL_GLContextReleaseFlag is typedesc:
  type
    SDL_GLcontextReleaseFlag* = SDL_GLcontextReleaseFlag_renamed_SDL_GLContextReleaseFlag 
else:
  when SDL_GLcontextReleaseFlag_renamed_SDL_GLContextReleaseFlag is static:
    const
      SDL_GLcontextReleaseFlag* = SDL_GLcontextReleaseFlag_renamed_SDL_GLContextReleaseFlag 
  else:
    let SDL_GLcontextReleaseFlag* = SDL_GLcontextReleaseFlag_renamed_SDL_GLContextReleaseFlag 
when SDL_GLprofile_renamed_SDL_GLProfile is typedesc:
  type
    SDL_GLprofile* = SDL_GLprofile_renamed_SDL_GLProfile 
else:
  when SDL_GLprofile_renamed_SDL_GLProfile is static:
    const
      SDL_GLprofile* = SDL_GLprofile_renamed_SDL_GLProfile 
  else:
    let SDL_GLprofile* = SDL_GLprofile_renamed_SDL_GLProfile 
when SDL_GetClosestDisplayMode_renamed_SDL_GetClosestFullscreenDisplayMode is
    typedesc:
  type
    SDL_GetClosestDisplayMode* = SDL_GetClosestDisplayMode_renamed_SDL_GetClosestFullscreenDisplayMode 
else:
  when SDL_GetClosestDisplayMode_renamed_SDL_GetClosestFullscreenDisplayMode is
      static:
    const
      SDL_GetClosestDisplayMode* = SDL_GetClosestDisplayMode_renamed_SDL_GetClosestFullscreenDisplayMode 
  else:
    let SDL_GetClosestDisplayMode* = SDL_GetClosestDisplayMode_renamed_SDL_GetClosestFullscreenDisplayMode 
when SDL_GetDisplayOrientation_renamed_SDL_GetCurrentDisplayOrientation is
    typedesc:
  type
    SDL_GetDisplayOrientation* = SDL_GetDisplayOrientation_renamed_SDL_GetCurrentDisplayOrientation 
else:
  when SDL_GetDisplayOrientation_renamed_SDL_GetCurrentDisplayOrientation is
      static:
    const
      SDL_GetDisplayOrientation* = SDL_GetDisplayOrientation_renamed_SDL_GetCurrentDisplayOrientation 
  else:
    let SDL_GetDisplayOrientation* = SDL_GetDisplayOrientation_renamed_SDL_GetCurrentDisplayOrientation 
when SDL_GetPointDisplayIndex_renamed_SDL_GetDisplayForPoint is typedesc:
  type
    SDL_GetPointDisplayIndex* = SDL_GetPointDisplayIndex_renamed_SDL_GetDisplayForPoint 
else:
  when SDL_GetPointDisplayIndex_renamed_SDL_GetDisplayForPoint is static:
    const
      SDL_GetPointDisplayIndex* = SDL_GetPointDisplayIndex_renamed_SDL_GetDisplayForPoint 
  else:
    let SDL_GetPointDisplayIndex* = SDL_GetPointDisplayIndex_renamed_SDL_GetDisplayForPoint 
when SDL_GetRectDisplayIndex_renamed_SDL_GetDisplayForRect is typedesc:
  type
    SDL_GetRectDisplayIndex* = SDL_GetRectDisplayIndex_renamed_SDL_GetDisplayForRect 
else:
  when SDL_GetRectDisplayIndex_renamed_SDL_GetDisplayForRect is static:
    const
      SDL_GetRectDisplayIndex* = SDL_GetRectDisplayIndex_renamed_SDL_GetDisplayForRect 
  else:
    let SDL_GetRectDisplayIndex* = SDL_GetRectDisplayIndex_renamed_SDL_GetDisplayForRect 
when SDL_GetWindowDisplayIndex_renamed_SDL_GetDisplayForWindow is typedesc:
  type
    SDL_GetWindowDisplayIndex* = SDL_GetWindowDisplayIndex_renamed_SDL_GetDisplayForWindow 
else:
  when SDL_GetWindowDisplayIndex_renamed_SDL_GetDisplayForWindow is static:
    const
      SDL_GetWindowDisplayIndex* = SDL_GetWindowDisplayIndex_renamed_SDL_GetDisplayForWindow 
  else:
    let SDL_GetWindowDisplayIndex* = SDL_GetWindowDisplayIndex_renamed_SDL_GetDisplayForWindow 
when SDL_GetWindowDisplayMode_renamed_SDL_GetWindowFullscreenMode is typedesc:
  type
    SDL_GetWindowDisplayMode* = SDL_GetWindowDisplayMode_renamed_SDL_GetWindowFullscreenMode 
else:
  when SDL_GetWindowDisplayMode_renamed_SDL_GetWindowFullscreenMode is static:
    const
      SDL_GetWindowDisplayMode* = SDL_GetWindowDisplayMode_renamed_SDL_GetWindowFullscreenMode 
  else:
    let SDL_GetWindowDisplayMode* = SDL_GetWindowDisplayMode_renamed_SDL_GetWindowFullscreenMode 
when SDL_HasWindowSurface_renamed_SDL_WindowHasSurface is typedesc:
  type
    SDL_HasWindowSurface* = SDL_HasWindowSurface_renamed_SDL_WindowHasSurface 
else:
  when SDL_HasWindowSurface_renamed_SDL_WindowHasSurface is static:
    const
      SDL_HasWindowSurface* = SDL_HasWindowSurface_renamed_SDL_WindowHasSurface 
  else:
    let SDL_HasWindowSurface* = SDL_HasWindowSurface_renamed_SDL_WindowHasSurface 
when SDL_IsScreenSaverEnabled_renamed_SDL_ScreenSaverEnabled is typedesc:
  type
    SDL_IsScreenSaverEnabled* = SDL_IsScreenSaverEnabled_renamed_SDL_ScreenSaverEnabled 
else:
  when SDL_IsScreenSaverEnabled_renamed_SDL_ScreenSaverEnabled is static:
    const
      SDL_IsScreenSaverEnabled* = SDL_IsScreenSaverEnabled_renamed_SDL_ScreenSaverEnabled 
  else:
    let SDL_IsScreenSaverEnabled* = SDL_IsScreenSaverEnabled_renamed_SDL_ScreenSaverEnabled 
when SDL_SetWindowDisplayMode_renamed_SDL_SetWindowFullscreenMode is typedesc:
  type
    SDL_SetWindowDisplayMode* = SDL_SetWindowDisplayMode_renamed_SDL_SetWindowFullscreenMode 
else:
  when SDL_SetWindowDisplayMode_renamed_SDL_SetWindowFullscreenMode is static:
    const
      SDL_SetWindowDisplayMode* = SDL_SetWindowDisplayMode_renamed_SDL_SetWindowFullscreenMode 
  else:
    let SDL_SetWindowDisplayMode* = SDL_SetWindowDisplayMode_renamed_SDL_SetWindowFullscreenMode 
when SDL_WINDOW_ALLOW_HIGHDPI_renamed_SDL_WINDOW_HIGH_PIXEL_DENSITY is typedesc:
  type
    SDL_WINDOW_ALLOW_HIGHDPI* = SDL_WINDOW_ALLOW_HIGHDPI_renamed_SDL_WINDOW_HIGH_PIXEL_DENSITY 
else:
  when SDL_WINDOW_ALLOW_HIGHDPI_renamed_SDL_WINDOW_HIGH_PIXEL_DENSITY is static:
    const
      SDL_WINDOW_ALLOW_HIGHDPI* = SDL_WINDOW_ALLOW_HIGHDPI_renamed_SDL_WINDOW_HIGH_PIXEL_DENSITY 
  else:
    let SDL_WINDOW_ALLOW_HIGHDPI* = SDL_WINDOW_ALLOW_HIGHDPI_renamed_SDL_WINDOW_HIGH_PIXEL_DENSITY 
when SDL_WINDOW_INPUT_GRABBED_renamed_SDL_WINDOW_MOUSE_GRABBED is typedesc:
  type
    SDL_WINDOW_INPUT_GRABBED* = SDL_WINDOW_INPUT_GRABBED_renamed_SDL_WINDOW_MOUSE_GRABBED 
else:
  when SDL_WINDOW_INPUT_GRABBED_renamed_SDL_WINDOW_MOUSE_GRABBED is static:
    const
      SDL_WINDOW_INPUT_GRABBED* = SDL_WINDOW_INPUT_GRABBED_renamed_SDL_WINDOW_MOUSE_GRABBED 
  else:
    let SDL_WINDOW_INPUT_GRABBED* = SDL_WINDOW_INPUT_GRABBED_renamed_SDL_WINDOW_MOUSE_GRABBED 
when SDL_WINDOW_SKIP_TASKBAR_renamed_SDL_WINDOW_UTILITY is typedesc:
  type
    SDL_WINDOW_SKIP_TASKBAR* = SDL_WINDOW_SKIP_TASKBAR_renamed_SDL_WINDOW_UTILITY 
else:
  when SDL_WINDOW_SKIP_TASKBAR_renamed_SDL_WINDOW_UTILITY is static:
    const
      SDL_WINDOW_SKIP_TASKBAR* = SDL_WINDOW_SKIP_TASKBAR_renamed_SDL_WINDOW_UTILITY 
  else:
    let SDL_WINDOW_SKIP_TASKBAR* = SDL_WINDOW_SKIP_TASKBAR_renamed_SDL_WINDOW_UTILITY 
proc SDL_malloc*(size: csize_t): pointer {.cdecl, importc: "SDL_malloc".}
proc SDL_calloc*(nmemb: csize_t; size: csize_t): pointer {.cdecl,
    importc: "SDL_calloc".}
proc SDL_realloc*(mem: pointer; size: csize_t): pointer {.cdecl,
    importc: "SDL_realloc".}
proc SDL_free*(mem: pointer): void {.cdecl, importc: "SDL_free".}
proc SDL_GetOriginalMemoryFunctions*(malloc_func: SDL_malloc_func;
                                     calloc_func: SDL_calloc_func;
                                     realloc_func: SDL_realloc_func;
                                     free_func: SDL_free_func): void {.cdecl,
    importc: "SDL_GetOriginalMemoryFunctions".}
proc SDL_GetMemoryFunctions*(malloc_func: SDL_malloc_func;
                             calloc_func: SDL_calloc_func;
                             realloc_func: SDL_realloc_func;
                             free_func: SDL_free_func): void {.cdecl,
    importc: "SDL_GetMemoryFunctions".}
proc SDL_SetMemoryFunctions*(malloc_func: SDL_malloc_func;
                             calloc_func: SDL_calloc_func;
                             realloc_func: SDL_realloc_func;
                             free_func: SDL_free_func): bool {.cdecl,
    importc: "SDL_SetMemoryFunctions".}
proc SDL_aligned_alloc*(alignment: csize_t; size: csize_t): pointer {.cdecl,
    importc: "SDL_aligned_alloc".}
proc SDL_aligned_free*(mem: pointer): void {.cdecl, importc: "SDL_aligned_free".}
proc SDL_GetNumAllocations*(): cint {.cdecl, importc: "SDL_GetNumAllocations".}
proc SDL_GetEnvironment*(): ptr SDL_Environment {.cdecl,
    importc: "SDL_GetEnvironment".}
proc SDL_CreateEnvironment*(populated: bool): ptr SDL_Environment {.cdecl,
    importc: "SDL_CreateEnvironment".}
proc SDL_GetEnvironmentVariable*(env: ptr SDL_Environment; name: cstring): cstring {.
    cdecl, importc: "SDL_GetEnvironmentVariable".}
proc SDL_GetEnvironmentVariables*(env: ptr SDL_Environment): ptr cstring {.
    cdecl, importc: "SDL_GetEnvironmentVariables".}
proc SDL_SetEnvironmentVariable*(env: ptr SDL_Environment; name: cstring;
                                 value: cstring; overwrite: bool): bool {.cdecl,
    importc: "SDL_SetEnvironmentVariable".}
proc SDL_UnsetEnvironmentVariable*(env: ptr SDL_Environment; name: cstring): bool {.
    cdecl, importc: "SDL_UnsetEnvironmentVariable".}
proc SDL_DestroyEnvironment*(env: ptr SDL_Environment): void {.cdecl,
    importc: "SDL_DestroyEnvironment".}
proc SDL_getenv*(name: cstring): cstring {.cdecl, importc: "SDL_getenv".}
proc SDL_getenv_unsafe*(name: cstring): cstring {.cdecl,
    importc: "SDL_getenv_unsafe".}
proc SDL_setenv_unsafe*(name: cstring; value: cstring; overwrite: cint): cint {.
    cdecl, importc: "SDL_setenv_unsafe".}
proc SDL_unsetenv_unsafe*(name: cstring): cint {.cdecl,
    importc: "SDL_unsetenv_unsafe".}
proc SDL_qsort*(base: pointer; nmemb: csize_t; size: csize_t;
                compare: SDL_CompareCallback): void {.cdecl,
    importc: "SDL_qsort".}
proc SDL_bsearch*(key: pointer; base: pointer; nmemb: csize_t; size: csize_t;
                  compare: SDL_CompareCallback): pointer {.cdecl,
    importc: "SDL_bsearch".}
proc SDL_qsort_r*(base: pointer; nmemb: csize_t; size: csize_t;
                  compare: SDL_CompareCallback_r; userdata: pointer): void {.
    cdecl, importc: "SDL_qsort_r".}
proc SDL_bsearch_r*(key: pointer; base: pointer; nmemb: csize_t; size: csize_t;
                    compare: SDL_CompareCallback_r; userdata: pointer): pointer {.
    cdecl, importc: "SDL_bsearch_r".}
proc SDL_abs*(x: cint): cint {.cdecl, importc: "SDL_abs".}
proc SDL_isalpha*(x: cint): cint {.cdecl, importc: "SDL_isalpha".}
proc SDL_isalnum*(x: cint): cint {.cdecl, importc: "SDL_isalnum".}
proc SDL_isblank*(x: cint): cint {.cdecl, importc: "SDL_isblank".}
proc SDL_iscntrl*(x: cint): cint {.cdecl, importc: "SDL_iscntrl".}
proc SDL_isdigit*(x: cint): cint {.cdecl, importc: "SDL_isdigit".}
proc SDL_isxdigit*(x: cint): cint {.cdecl, importc: "SDL_isxdigit".}
proc SDL_ispunct*(x: cint): cint {.cdecl, importc: "SDL_ispunct".}
proc SDL_isspace*(x: cint): cint {.cdecl, importc: "SDL_isspace".}
proc SDL_isupper*(x: cint): cint {.cdecl, importc: "SDL_isupper".}
proc SDL_islower*(x: cint): cint {.cdecl, importc: "SDL_islower".}
proc SDL_isprint*(x: cint): cint {.cdecl, importc: "SDL_isprint".}
proc SDL_isgraph*(x: cint): cint {.cdecl, importc: "SDL_isgraph".}
proc SDL_toupper*(x: cint): cint {.cdecl, importc: "SDL_toupper".}
proc SDL_tolower*(x: cint): cint {.cdecl, importc: "SDL_tolower".}
proc SDL_crc16*(crc: Uint16; data: pointer; len: csize_t): Uint16 {.cdecl,
    importc: "SDL_crc16".}
proc SDL_crc32*(crc: Uint32; data: pointer; len: csize_t): Uint32 {.cdecl,
    importc: "SDL_crc32".}
proc SDL_murmur3_32*(data: pointer; len: csize_t; seed: Uint32): Uint32 {.cdecl,
    importc: "SDL_murmur3_32".}
proc SDL_memset4*(dst: pointer; val: Uint32; dwords: csize_t): pointer {.cdecl,
    importc: "SDL_memset4".}
proc SDL_memcmp*(s1: pointer; s2: pointer; len: csize_t): cint {.cdecl,
    importc: "SDL_memcmp".}
proc SDL_wcslen*(wstr: ptr wchar_t): csize_t {.cdecl, importc: "SDL_wcslen".}
proc SDL_wcsnlen*(wstr: ptr wchar_t; maxlen: csize_t): csize_t {.cdecl,
    importc: "SDL_wcsnlen".}
proc SDL_wcslcpy*(dst: ptr wchar_t; src: ptr wchar_t; maxlen: csize_t): csize_t {.
    cdecl, importc: "SDL_wcslcpy".}
proc SDL_wcslcat*(dst: ptr wchar_t; src: ptr wchar_t; maxlen: csize_t): csize_t {.
    cdecl, importc: "SDL_wcslcat".}
proc SDL_wcsdup*(wstr: ptr wchar_t): ptr wchar_t {.cdecl, importc: "SDL_wcsdup".}
proc SDL_wcsstr*(haystack: ptr wchar_t; needle: ptr wchar_t): ptr wchar_t {.
    cdecl, importc: "SDL_wcsstr".}
proc SDL_wcsnstr*(haystack: ptr wchar_t; needle: ptr wchar_t; maxlen: csize_t): ptr wchar_t {.
    cdecl, importc: "SDL_wcsnstr".}
proc SDL_wcscmp*(str1: ptr wchar_t; str2: ptr wchar_t): cint {.cdecl,
    importc: "SDL_wcscmp".}
proc SDL_wcsncmp*(str1: ptr wchar_t; str2: ptr wchar_t; maxlen: csize_t): cint {.
    cdecl, importc: "SDL_wcsncmp".}
proc SDL_wcscasecmp*(str1: ptr wchar_t; str2: ptr wchar_t): cint {.cdecl,
    importc: "SDL_wcscasecmp".}
proc SDL_wcsncasecmp*(str1: ptr wchar_t; str2: ptr wchar_t; maxlen: csize_t): cint {.
    cdecl, importc: "SDL_wcsncasecmp".}
proc SDL_wcstol*(str: ptr wchar_t; endp: ptr ptr wchar_t; base: cint): clong {.
    cdecl, importc: "SDL_wcstol".}
proc SDL_strlen*(str: cstring): csize_t {.cdecl, importc: "SDL_strlen".}
proc SDL_strnlen*(str: cstring; maxlen: csize_t): csize_t {.cdecl,
    importc: "SDL_strnlen".}
proc SDL_strlcpy*(dst: cstring; src: cstring; maxlen: csize_t): csize_t {.cdecl,
    importc: "SDL_strlcpy".}
proc SDL_utf8strlcpy*(dst: cstring; src: cstring; dst_bytes: csize_t): csize_t {.
    cdecl, importc: "SDL_utf8strlcpy".}
proc SDL_strlcat*(dst: cstring; src: cstring; maxlen: csize_t): csize_t {.cdecl,
    importc: "SDL_strlcat".}
proc SDL_strdup*(str: cstring): cstring {.cdecl, importc: "SDL_strdup".}
proc SDL_strndup*(str: cstring; maxlen: csize_t): cstring {.cdecl,
    importc: "SDL_strndup".}
proc SDL_strrev*(str: cstring): cstring {.cdecl, importc: "SDL_strrev".}
proc SDL_strupr*(str: cstring): cstring {.cdecl, importc: "SDL_strupr".}
proc SDL_strlwr*(str: cstring): cstring {.cdecl, importc: "SDL_strlwr".}
proc SDL_strchr*(str: cstring; c: cint): cstring {.cdecl, importc: "SDL_strchr".}
proc SDL_strrchr*(str: cstring; c: cint): cstring {.cdecl,
    importc: "SDL_strrchr".}
proc SDL_strstr*(haystack: cstring; needle: cstring): cstring {.cdecl,
    importc: "SDL_strstr".}
proc SDL_strnstr*(haystack: cstring; needle: cstring; maxlen: csize_t): cstring {.
    cdecl, importc: "SDL_strnstr".}
proc SDL_strcasestr*(haystack: cstring; needle: cstring): cstring {.cdecl,
    importc: "SDL_strcasestr".}
proc SDL_strtok_r_proc*(s1: cstring; s2: cstring; saveptr: ptr cstring): cstring {.
    cdecl, importc: "SDL_strtok_r".}
proc SDL_utf8strlen*(str: cstring): csize_t {.cdecl, importc: "SDL_utf8strlen".}
proc SDL_utf8strnlen*(str: cstring; bytes: csize_t): csize_t {.cdecl,
    importc: "SDL_utf8strnlen".}
proc SDL_itoa*(value: cint; str: cstring; radix: cint): cstring {.cdecl,
    importc: "SDL_itoa".}
proc SDL_uitoa*(value: cuint; str: cstring; radix: cint): cstring {.cdecl,
    importc: "SDL_uitoa".}
proc SDL_ltoa*(value: clong; str: cstring; radix: cint): cstring {.cdecl,
    importc: "SDL_ltoa".}
proc SDL_ultoa*(value: culong; str: cstring; radix: cint): cstring {.cdecl,
    importc: "SDL_ultoa".}
proc SDL_lltoa*(value: clonglong; str: cstring; radix: cint): cstring {.cdecl,
    importc: "SDL_lltoa".}
proc SDL_ulltoa*(value: culonglong; str: cstring; radix: cint): cstring {.cdecl,
    importc: "SDL_ulltoa".}
proc SDL_atoi*(str: cstring): cint {.cdecl, importc: "SDL_atoi".}
proc SDL_atof*(str: cstring): cdouble {.cdecl, importc: "SDL_atof".}
proc SDL_strtol*(str: cstring; endp: ptr cstring; base: cint): clong {.cdecl,
    importc: "SDL_strtol".}
proc SDL_strtoul*(str: cstring; endp: ptr cstring; base: cint): culong {.cdecl,
    importc: "SDL_strtoul".}
proc SDL_strtoll*(str: cstring; endp: ptr cstring; base: cint): clonglong {.
    cdecl, importc: "SDL_strtoll".}
proc SDL_strtoull*(str: cstring; endp: ptr cstring; base: cint): culonglong {.
    cdecl, importc: "SDL_strtoull".}
proc SDL_strtod*(str: cstring; endp: ptr cstring): cdouble {.cdecl,
    importc: "SDL_strtod".}
proc SDL_strcmp*(str1: cstring; str2: cstring): cint {.cdecl,
    importc: "SDL_strcmp".}
proc SDL_strncmp*(str1: cstring; str2: cstring; maxlen: csize_t): cint {.cdecl,
    importc: "SDL_strncmp".}
proc SDL_strcasecmp*(str1: cstring; str2: cstring): cint {.cdecl,
    importc: "SDL_strcasecmp".}
proc SDL_strncasecmp*(str1: cstring; str2: cstring; maxlen: csize_t): cint {.
    cdecl, importc: "SDL_strncasecmp".}
proc SDL_strpbrk*(str: cstring; breakset: cstring): cstring {.cdecl,
    importc: "SDL_strpbrk".}
proc SDL_StepUTF8*(pstr: ptr cstring; pslen: ptr csize_t): Uint32 {.cdecl,
    importc: "SDL_StepUTF8".}
proc SDL_StepBackUTF8*(start: cstring; pstr: ptr cstring): Uint32 {.cdecl,
    importc: "SDL_StepBackUTF8".}
proc SDL_UCS4ToUTF8*(codepoint: Uint32; dst: cstring): cstring {.cdecl,
    importc: "SDL_UCS4ToUTF8".}
proc SDL_sscanf*(text: cstring; fmt: cstring): cint {.cdecl, varargs,
    importc: "SDL_sscanf".}
proc SDL_vsscanf*(text: cstring; fmt: cstring): cint {.cdecl, varargs,
    importc: "SDL_vsscanf".}
proc SDL_snprintf*(text: cstring; maxlen: csize_t; fmt: cstring): cint {.cdecl,
    varargs, importc: "SDL_snprintf".}
proc SDL_swprintf*(text: ptr wchar_t; maxlen: csize_t; fmt: ptr wchar_t): cint {.
    cdecl, varargs, importc: "SDL_swprintf".}
proc SDL_vsnprintf*(text: cstring; maxlen: csize_t; fmt: cstring): cint {.cdecl,
    varargs, importc: "SDL_vsnprintf".}
proc SDL_vswprintf*(text: ptr wchar_t; maxlen: csize_t; fmt: ptr wchar_t): cint {.
    cdecl, varargs, importc: "SDL_vswprintf".}
proc SDL_asprintf*(strp: ptr cstring; fmt: cstring): cint {.cdecl, varargs,
    importc: "SDL_asprintf".}
proc SDL_vasprintf*(strp: ptr cstring; fmt: cstring): cint {.cdecl, varargs,
    importc: "SDL_vasprintf".}
proc SDL_srand*(seed: Uint64): void {.cdecl, importc: "SDL_srand".}
proc SDL_rand*(n: Sint32): Sint32 {.cdecl, importc: "SDL_rand".}
proc SDL_randf*(): cfloat {.cdecl, importc: "SDL_randf".}
proc SDL_rand_bits*(): Uint32 {.cdecl, importc: "SDL_rand_bits".}
proc SDL_rand_r*(state: ptr Uint64; n: Sint32): Sint32 {.cdecl,
    importc: "SDL_rand_r".}
proc SDL_randf_r*(state: ptr Uint64): cfloat {.cdecl, importc: "SDL_randf_r".}
proc SDL_rand_bits_r*(state: ptr Uint64): Uint32 {.cdecl,
    importc: "SDL_rand_bits_r".}
proc SDL_acos*(x: cdouble): cdouble {.cdecl, importc: "SDL_acos".}
proc SDL_acosf*(x: cfloat): cfloat {.cdecl, importc: "SDL_acosf".}
proc SDL_asin*(x: cdouble): cdouble {.cdecl, importc: "SDL_asin".}
proc SDL_asinf*(x: cfloat): cfloat {.cdecl, importc: "SDL_asinf".}
proc SDL_atan*(x: cdouble): cdouble {.cdecl, importc: "SDL_atan".}
proc SDL_atanf*(x: cfloat): cfloat {.cdecl, importc: "SDL_atanf".}
proc SDL_atan2*(y: cdouble; x: cdouble): cdouble {.cdecl, importc: "SDL_atan2".}
proc SDL_atan2f*(y: cfloat; x: cfloat): cfloat {.cdecl, importc: "SDL_atan2f".}
proc SDL_ceil*(x: cdouble): cdouble {.cdecl, importc: "SDL_ceil".}
proc SDL_ceilf*(x: cfloat): cfloat {.cdecl, importc: "SDL_ceilf".}
proc SDL_copysign*(x: cdouble; y: cdouble): cdouble {.cdecl,
    importc: "SDL_copysign".}
proc SDL_copysignf*(x: cfloat; y: cfloat): cfloat {.cdecl,
    importc: "SDL_copysignf".}
proc SDL_cos*(x: cdouble): cdouble {.cdecl, importc: "SDL_cos".}
proc SDL_cosf*(x: cfloat): cfloat {.cdecl, importc: "SDL_cosf".}
proc SDL_exp*(x: cdouble): cdouble {.cdecl, importc: "SDL_exp".}
proc SDL_expf*(x: cfloat): cfloat {.cdecl, importc: "SDL_expf".}
proc SDL_fabs*(x: cdouble): cdouble {.cdecl, importc: "SDL_fabs".}
proc SDL_fabsf*(x: cfloat): cfloat {.cdecl, importc: "SDL_fabsf".}
proc SDL_floor*(x: cdouble): cdouble {.cdecl, importc: "SDL_floor".}
proc SDL_floorf*(x: cfloat): cfloat {.cdecl, importc: "SDL_floorf".}
proc SDL_trunc*(x: cdouble): cdouble {.cdecl, importc: "SDL_trunc".}
proc SDL_truncf*(x: cfloat): cfloat {.cdecl, importc: "SDL_truncf".}
proc SDL_fmod*(x: cdouble; y: cdouble): cdouble {.cdecl, importc: "SDL_fmod".}
proc SDL_fmodf*(x: cfloat; y: cfloat): cfloat {.cdecl, importc: "SDL_fmodf".}
proc SDL_isinf*(x: cdouble): cint {.cdecl, importc: "SDL_isinf".}
proc SDL_isinff*(x: cfloat): cint {.cdecl, importc: "SDL_isinff".}
proc SDL_isnan*(x: cdouble): cint {.cdecl, importc: "SDL_isnan".}
proc SDL_isnanf*(x: cfloat): cint {.cdecl, importc: "SDL_isnanf".}
proc SDL_log*(x: cdouble): cdouble {.cdecl, importc: "SDL_log".}
proc SDL_logf*(x: cfloat): cfloat {.cdecl, importc: "SDL_logf".}
proc SDL_log10*(x: cdouble): cdouble {.cdecl, importc: "SDL_log10".}
proc SDL_log10f*(x: cfloat): cfloat {.cdecl, importc: "SDL_log10f".}
proc SDL_modf*(x: cdouble; y: ptr cdouble): cdouble {.cdecl, importc: "SDL_modf".}
proc SDL_modff*(x: cfloat; y: ptr cfloat): cfloat {.cdecl, importc: "SDL_modff".}
proc SDL_pow*(x: cdouble; y: cdouble): cdouble {.cdecl, importc: "SDL_pow".}
proc SDL_powf*(x: cfloat; y: cfloat): cfloat {.cdecl, importc: "SDL_powf".}
proc SDL_round*(x: cdouble): cdouble {.cdecl, importc: "SDL_round".}
proc SDL_roundf*(x: cfloat): cfloat {.cdecl, importc: "SDL_roundf".}
proc SDL_lround*(x: cdouble): clong {.cdecl, importc: "SDL_lround".}
proc SDL_lroundf*(x: cfloat): clong {.cdecl, importc: "SDL_lroundf".}
proc SDL_scalbn*(x: cdouble; n: cint): cdouble {.cdecl, importc: "SDL_scalbn".}
proc SDL_scalbnf*(x: cfloat; n: cint): cfloat {.cdecl, importc: "SDL_scalbnf".}
proc SDL_sin*(x: cdouble): cdouble {.cdecl, importc: "SDL_sin".}
proc SDL_sinf*(x: cfloat): cfloat {.cdecl, importc: "SDL_sinf".}
proc SDL_sqrt*(x: cdouble): cdouble {.cdecl, importc: "SDL_sqrt".}
proc SDL_sqrtf*(x: cfloat): cfloat {.cdecl, importc: "SDL_sqrtf".}
proc SDL_tan*(x: cdouble): cdouble {.cdecl, importc: "SDL_tan".}
proc SDL_tanf*(x: cfloat): cfloat {.cdecl, importc: "SDL_tanf".}
proc SDL_iconv_open*(tocode: cstring; fromcode: cstring): SDL_iconv_t {.cdecl,
    importc: "SDL_iconv_open".}
proc SDL_iconv_close*(cd: SDL_iconv_t): cint {.cdecl, importc: "SDL_iconv_close".}
proc SDL_iconv*(cd: SDL_iconv_t; inbuf: ptr cstring; inbytesleft: ptr csize_t;
                outbuf: ptr cstring; outbytesleft: ptr csize_t): csize_t {.
    cdecl, importc: "SDL_iconv".}
proc SDL_iconv_string*(tocode: cstring; fromcode: cstring; inbuf: cstring;
                       inbytesleft: csize_t): cstring {.cdecl,
    importc: "SDL_iconv_string".}
proc SDL_ReportAssertion*(data: ptr SDL_AssertData; func_arg: cstring;
                          file: cstring; line: cint): SDL_AssertState {.cdecl,
    importc: "SDL_ReportAssertion".}
proc SDL_SetAssertionHandler*(handler: SDL_AssertionHandler; userdata: pointer): void {.
    cdecl, importc: "SDL_SetAssertionHandler".}
proc SDL_GetDefaultAssertionHandler*(): SDL_AssertionHandler {.cdecl,
    importc: "SDL_GetDefaultAssertionHandler".}
proc SDL_GetAssertionHandler*(puserdata: ptr pointer): SDL_AssertionHandler {.
    cdecl, importc: "SDL_GetAssertionHandler".}
proc SDL_GetAssertionReport*(): ptr SDL_AssertData {.cdecl,
    importc: "SDL_GetAssertionReport".}
proc SDL_ResetAssertionReport*(): void {.cdecl,
    importc: "SDL_ResetAssertionReport".}
proc SDL_TryLockSpinlock*(lock: ptr SDL_SpinLock): bool {.cdecl,
    importc: "SDL_TryLockSpinlock".}
proc SDL_LockSpinlock*(lock: ptr SDL_SpinLock): void {.cdecl,
    importc: "SDL_LockSpinlock".}
proc SDL_UnlockSpinlock*(lock: ptr SDL_SpinLock): void {.cdecl,
    importc: "SDL_UnlockSpinlock".}
proc SDL_MemoryBarrierReleaseFunction*(): void {.cdecl,
    importc: "SDL_MemoryBarrierReleaseFunction".}
proc SDL_MemoryBarrierAcquireFunction*(): void {.cdecl,
    importc: "SDL_MemoryBarrierAcquireFunction".}
proc SDL_CompareAndSwapAtomicInt*(a: ptr SDL_AtomicInt; oldval: cint;
                                  newval: cint): bool {.cdecl,
    importc: "SDL_CompareAndSwapAtomicInt".}
proc SDL_SetAtomicInt*(a: ptr SDL_AtomicInt; v: cint): cint {.cdecl,
    importc: "SDL_SetAtomicInt".}
proc SDL_GetAtomicInt*(a: ptr SDL_AtomicInt): cint {.cdecl,
    importc: "SDL_GetAtomicInt".}
proc SDL_AddAtomicInt*(a: ptr SDL_AtomicInt; v: cint): cint {.cdecl,
    importc: "SDL_AddAtomicInt".}
proc SDL_CompareAndSwapAtomicU32*(a: ptr SDL_AtomicU32; oldval: Uint32;
                                  newval: Uint32): bool {.cdecl,
    importc: "SDL_CompareAndSwapAtomicU32".}
proc SDL_SetAtomicU32*(a: ptr SDL_AtomicU32; v: Uint32): Uint32 {.cdecl,
    importc: "SDL_SetAtomicU32".}
proc SDL_GetAtomicU32*(a: ptr SDL_AtomicU32): Uint32 {.cdecl,
    importc: "SDL_GetAtomicU32".}
proc SDL_CompareAndSwapAtomicPointer*(a: ptr pointer; oldval: pointer;
                                      newval: pointer): bool {.cdecl,
    importc: "SDL_CompareAndSwapAtomicPointer".}
proc SDL_SetAtomicPointer*(a: ptr pointer; v: pointer): pointer {.cdecl,
    importc: "SDL_SetAtomicPointer".}
proc SDL_GetAtomicPointer*(a: ptr pointer): pointer {.cdecl,
    importc: "SDL_GetAtomicPointer".}
proc SDL_SetError*(fmt: cstring): bool {.cdecl, varargs, importc: "SDL_SetError".}
proc SDL_SetErrorV*(fmt: cstring): bool {.cdecl, varargs,
    importc: "SDL_SetErrorV".}
proc SDL_OutOfMemory*(): bool {.cdecl, importc: "SDL_OutOfMemory".}
proc SDL_GetError*(): cstring {.cdecl, importc: "SDL_GetError".}
proc SDL_ClearError*(): bool {.cdecl, importc: "SDL_ClearError".}
proc SDL_GetGlobalProperties*(): SDL_PropertiesID {.cdecl,
    importc: "SDL_GetGlobalProperties".}
proc SDL_CreateProperties*(): SDL_PropertiesID {.cdecl,
    importc: "SDL_CreateProperties".}
proc SDL_CopyProperties*(src: SDL_PropertiesID; dst: SDL_PropertiesID): bool {.
    cdecl, importc: "SDL_CopyProperties".}
proc SDL_LockProperties*(props: SDL_PropertiesID): bool {.cdecl,
    importc: "SDL_LockProperties".}
proc SDL_UnlockProperties*(props: SDL_PropertiesID): void {.cdecl,
    importc: "SDL_UnlockProperties".}
proc SDL_SetPointerPropertyWithCleanup*(props: SDL_PropertiesID; name: cstring;
                                        value: pointer;
                                        cleanup: SDL_CleanupPropertyCallback;
                                        userdata: pointer): bool {.cdecl,
    importc: "SDL_SetPointerPropertyWithCleanup".}
proc SDL_SetPointerProperty*(props: SDL_PropertiesID; name: cstring;
                             value: pointer): bool {.cdecl,
    importc: "SDL_SetPointerProperty".}
proc SDL_SetStringProperty*(props: SDL_PropertiesID; name: cstring;
                            value: cstring): bool {.cdecl,
    importc: "SDL_SetStringProperty".}
proc SDL_SetNumberProperty*(props: SDL_PropertiesID; name: cstring;
                            value: Sint64): bool {.cdecl,
    importc: "SDL_SetNumberProperty".}
proc SDL_SetFloatProperty*(props: SDL_PropertiesID; name: cstring; value: cfloat): bool {.
    cdecl, importc: "SDL_SetFloatProperty".}
proc SDL_SetBooleanProperty*(props: SDL_PropertiesID; name: cstring; value: bool): bool {.
    cdecl, importc: "SDL_SetBooleanProperty".}
proc SDL_HasProperty*(props: SDL_PropertiesID; name: cstring): bool {.cdecl,
    importc: "SDL_HasProperty".}
proc SDL_GetPropertyType*(props: SDL_PropertiesID; name: cstring): SDL_PropertyType {.
    cdecl, importc: "SDL_GetPropertyType".}
proc SDL_GetPointerProperty*(props: SDL_PropertiesID; name: cstring;
                             default_value: pointer): pointer {.cdecl,
    importc: "SDL_GetPointerProperty".}
proc SDL_GetStringProperty*(props: SDL_PropertiesID; name: cstring;
                            default_value: cstring): cstring {.cdecl,
    importc: "SDL_GetStringProperty".}
proc SDL_GetNumberProperty*(props: SDL_PropertiesID; name: cstring;
                            default_value: Sint64): Sint64 {.cdecl,
    importc: "SDL_GetNumberProperty".}
proc SDL_GetFloatProperty*(props: SDL_PropertiesID; name: cstring;
                           default_value: cfloat): cfloat {.cdecl,
    importc: "SDL_GetFloatProperty".}
proc SDL_GetBooleanProperty*(props: SDL_PropertiesID; name: cstring;
                             default_value: bool): bool {.cdecl,
    importc: "SDL_GetBooleanProperty".}
proc SDL_ClearProperty*(props: SDL_PropertiesID; name: cstring): bool {.cdecl,
    importc: "SDL_ClearProperty".}
proc SDL_EnumerateProperties*(props: SDL_PropertiesID;
                              callback: SDL_EnumeratePropertiesCallback;
                              userdata: pointer): bool {.cdecl,
    importc: "SDL_EnumerateProperties".}
proc SDL_DestroyProperties*(props: SDL_PropertiesID): void {.cdecl,
    importc: "SDL_DestroyProperties".}
proc SDL_CreateThreadRuntime*(fn: SDL_ThreadFunction; name: cstring;
                              data: pointer;
                              pfnBeginThread: SDL_FunctionPointer;
                              pfnEndThread: SDL_FunctionPointer): ptr SDL_Thread {.
    cdecl, importc: "SDL_CreateThreadRuntime".}
proc SDL_CreateThreadWithPropertiesRuntime*(props: SDL_PropertiesID;
    pfnBeginThread: SDL_FunctionPointer; pfnEndThread: SDL_FunctionPointer): ptr SDL_Thread {.
    cdecl, importc: "SDL_CreateThreadWithPropertiesRuntime".}
proc SDL_GetThreadName*(thread: ptr SDL_Thread): cstring {.cdecl,
    importc: "SDL_GetThreadName".}
proc SDL_GetCurrentThreadID*(): SDL_ThreadID_typedef {.cdecl,
    importc: "SDL_GetCurrentThreadID".}
proc SDL_GetThreadID*(thread: ptr SDL_Thread): SDL_ThreadID_typedef {.cdecl,
    importc: "SDL_GetThreadID".}
proc SDL_SetCurrentThreadPriority*(priority: SDL_ThreadPriority): bool {.cdecl,
    importc: "SDL_SetCurrentThreadPriority".}
proc SDL_WaitThread*(thread: ptr SDL_Thread; status: ptr cint): void {.cdecl,
    importc: "SDL_WaitThread".}
proc SDL_DetachThread*(thread: ptr SDL_Thread): void {.cdecl,
    importc: "SDL_DetachThread".}
proc SDL_GetTLS*(id: ptr SDL_TLSID): pointer {.cdecl, importc: "SDL_GetTLS".}
proc SDL_SetTLS*(id: ptr SDL_TLSID; value: pointer;
                 destructor: SDL_TLSDestructorCallback): bool {.cdecl,
    importc: "SDL_SetTLS".}
proc SDL_CleanupTLS*(): void {.cdecl, importc: "SDL_CleanupTLS".}
proc SDL_CreateMutex*(): ptr SDL_Mutex_typedef {.cdecl,
    importc: "SDL_CreateMutex".}
proc SDL_LockMutex*(mutex: ptr SDL_Mutex_typedef): void {.cdecl,
    importc: "SDL_LockMutex".}
proc SDL_TryLockMutex*(mutex: ptr SDL_Mutex_typedef): bool {.cdecl,
    importc: "SDL_TryLockMutex".}
proc SDL_UnlockMutex*(mutex: ptr SDL_Mutex_typedef): void {.cdecl,
    importc: "SDL_UnlockMutex".}
proc SDL_DestroyMutex*(mutex: ptr SDL_Mutex_typedef): void {.cdecl,
    importc: "SDL_DestroyMutex".}
proc SDL_CreateRWLock*(): ptr SDL_RWLock {.cdecl, importc: "SDL_CreateRWLock".}
proc SDL_LockRWLockForReading*(rwlock: ptr SDL_RWLock): void {.cdecl,
    importc: "SDL_LockRWLockForReading".}
proc SDL_LockRWLockForWriting*(rwlock: ptr SDL_RWLock): void {.cdecl,
    importc: "SDL_LockRWLockForWriting".}
proc SDL_TryLockRWLockForReading*(rwlock: ptr SDL_RWLock): bool {.cdecl,
    importc: "SDL_TryLockRWLockForReading".}
proc SDL_TryLockRWLockForWriting*(rwlock: ptr SDL_RWLock): bool {.cdecl,
    importc: "SDL_TryLockRWLockForWriting".}
proc SDL_UnlockRWLock*(rwlock: ptr SDL_RWLock): void {.cdecl,
    importc: "SDL_UnlockRWLock".}
proc SDL_DestroyRWLock*(rwlock: ptr SDL_RWLock): void {.cdecl,
    importc: "SDL_DestroyRWLock".}
proc SDL_CreateSemaphore*(initial_value: Uint32): ptr SDL_Semaphore {.cdecl,
    importc: "SDL_CreateSemaphore".}
proc SDL_DestroySemaphore*(sem: ptr SDL_Semaphore): void {.cdecl,
    importc: "SDL_DestroySemaphore".}
proc SDL_WaitSemaphore*(sem: ptr SDL_Semaphore): void {.cdecl,
    importc: "SDL_WaitSemaphore".}
proc SDL_TryWaitSemaphore*(sem: ptr SDL_Semaphore): bool {.cdecl,
    importc: "SDL_TryWaitSemaphore".}
proc SDL_WaitSemaphoreTimeout*(sem: ptr SDL_Semaphore; timeoutMS: Sint32): bool {.
    cdecl, importc: "SDL_WaitSemaphoreTimeout".}
proc SDL_SignalSemaphore*(sem: ptr SDL_Semaphore): void {.cdecl,
    importc: "SDL_SignalSemaphore".}
proc SDL_GetSemaphoreValue*(sem: ptr SDL_Semaphore): Uint32 {.cdecl,
    importc: "SDL_GetSemaphoreValue".}
proc SDL_CreateCondition*(): ptr SDL_Condition {.cdecl,
    importc: "SDL_CreateCondition".}
proc SDL_DestroyCondition*(cond: ptr SDL_Condition): void {.cdecl,
    importc: "SDL_DestroyCondition".}
proc SDL_SignalCondition*(cond: ptr SDL_Condition): void {.cdecl,
    importc: "SDL_SignalCondition".}
proc SDL_BroadcastCondition*(cond: ptr SDL_Condition): void {.cdecl,
    importc: "SDL_BroadcastCondition".}
proc SDL_WaitCondition*(cond: ptr SDL_Condition; mutex: ptr SDL_Mutex_typedef): void {.
    cdecl, importc: "SDL_WaitCondition".}
proc SDL_WaitConditionTimeout*(cond: ptr SDL_Condition;
                               mutex: ptr SDL_Mutex_typedef; timeoutMS: Sint32): bool {.
    cdecl, importc: "SDL_WaitConditionTimeout".}
proc SDL_ShouldInit*(state: ptr SDL_InitState): bool {.cdecl,
    importc: "SDL_ShouldInit".}
proc SDL_ShouldQuit*(state: ptr SDL_InitState): bool {.cdecl,
    importc: "SDL_ShouldQuit".}
proc SDL_SetInitialized*(state: ptr SDL_InitState; initialized: bool): void {.
    cdecl, importc: "SDL_SetInitialized".}
proc SDL_IOFromFile*(file: cstring; mode: cstring): ptr SDL_IOStream {.cdecl,
    importc: "SDL_IOFromFile".}
proc SDL_IOFromMem*(mem: pointer; size: csize_t): ptr SDL_IOStream {.cdecl,
    importc: "SDL_IOFromMem".}
proc SDL_IOFromConstMem*(mem: pointer; size: csize_t): ptr SDL_IOStream {.cdecl,
    importc: "SDL_IOFromConstMem".}
proc SDL_IOFromDynamicMem*(): ptr SDL_IOStream {.cdecl,
    importc: "SDL_IOFromDynamicMem".}
proc SDL_OpenIO*(iface: ptr SDL_IOStreamInterface; userdata: pointer): ptr SDL_IOStream {.
    cdecl, importc: "SDL_OpenIO".}
proc SDL_CloseIO*(context: ptr SDL_IOStream): bool {.cdecl,
    importc: "SDL_CloseIO".}
proc SDL_GetIOProperties*(context: ptr SDL_IOStream): SDL_PropertiesID {.cdecl,
    importc: "SDL_GetIOProperties".}
proc SDL_GetIOStatus*(context: ptr SDL_IOStream): SDL_IOStatus {.cdecl,
    importc: "SDL_GetIOStatus".}
proc SDL_GetIOSize*(context: ptr SDL_IOStream): Sint64 {.cdecl,
    importc: "SDL_GetIOSize".}
proc SDL_SeekIO*(context: ptr SDL_IOStream; offset: Sint64; whence: SDL_IOWhence): Sint64 {.
    cdecl, importc: "SDL_SeekIO".}
proc SDL_TellIO*(context: ptr SDL_IOStream): Sint64 {.cdecl,
    importc: "SDL_TellIO".}
proc SDL_ReadIO*(context: ptr SDL_IOStream; ptr_arg: pointer; size: csize_t): csize_t {.
    cdecl, importc: "SDL_ReadIO".}
proc SDL_WriteIO*(context: ptr SDL_IOStream; ptr_arg: pointer; size: csize_t): csize_t {.
    cdecl, importc: "SDL_WriteIO".}
proc SDL_IOprintf*(context: ptr SDL_IOStream; fmt: cstring): csize_t {.cdecl,
    varargs, importc: "SDL_IOprintf".}
proc SDL_IOvprintf*(context: ptr SDL_IOStream; fmt: cstring): csize_t {.cdecl,
    varargs, importc: "SDL_IOvprintf".}
proc SDL_FlushIO*(context: ptr SDL_IOStream): bool {.cdecl,
    importc: "SDL_FlushIO".}
proc SDL_LoadFile_IO*(src: ptr SDL_IOStream; datasize: ptr csize_t;
                      closeio: bool): pointer {.cdecl,
    importc: "SDL_LoadFile_IO".}
proc SDL_LoadFile*(file: cstring; datasize: ptr csize_t): pointer {.cdecl,
    importc: "SDL_LoadFile".}
proc SDL_ReadU8*(src: ptr SDL_IOStream; value: ptr Uint8): bool {.cdecl,
    importc: "SDL_ReadU8".}
proc SDL_ReadS8*(src: ptr SDL_IOStream; value: ptr Sint8): bool {.cdecl,
    importc: "SDL_ReadS8".}
proc SDL_ReadU16LE*(src: ptr SDL_IOStream; value: ptr Uint16): bool {.cdecl,
    importc: "SDL_ReadU16LE".}
proc SDL_ReadS16LE*(src: ptr SDL_IOStream; value: ptr Sint16): bool {.cdecl,
    importc: "SDL_ReadS16LE".}
proc SDL_ReadU16BE*(src: ptr SDL_IOStream; value: ptr Uint16): bool {.cdecl,
    importc: "SDL_ReadU16BE".}
proc SDL_ReadS16BE*(src: ptr SDL_IOStream; value: ptr Sint16): bool {.cdecl,
    importc: "SDL_ReadS16BE".}
proc SDL_ReadU32LE*(src: ptr SDL_IOStream; value: ptr Uint32): bool {.cdecl,
    importc: "SDL_ReadU32LE".}
proc SDL_ReadS32LE*(src: ptr SDL_IOStream; value: ptr Sint32): bool {.cdecl,
    importc: "SDL_ReadS32LE".}
proc SDL_ReadU32BE*(src: ptr SDL_IOStream; value: ptr Uint32): bool {.cdecl,
    importc: "SDL_ReadU32BE".}
proc SDL_ReadS32BE*(src: ptr SDL_IOStream; value: ptr Sint32): bool {.cdecl,
    importc: "SDL_ReadS32BE".}
proc SDL_ReadU64LE*(src: ptr SDL_IOStream; value: ptr Uint64): bool {.cdecl,
    importc: "SDL_ReadU64LE".}
proc SDL_ReadS64LE*(src: ptr SDL_IOStream; value: ptr Sint64): bool {.cdecl,
    importc: "SDL_ReadS64LE".}
proc SDL_ReadU64BE*(src: ptr SDL_IOStream; value: ptr Uint64): bool {.cdecl,
    importc: "SDL_ReadU64BE".}
proc SDL_ReadS64BE*(src: ptr SDL_IOStream; value: ptr Sint64): bool {.cdecl,
    importc: "SDL_ReadS64BE".}
proc SDL_WriteU8*(dst: ptr SDL_IOStream; value: Uint8): bool {.cdecl,
    importc: "SDL_WriteU8".}
proc SDL_WriteS8*(dst: ptr SDL_IOStream; value: Sint8): bool {.cdecl,
    importc: "SDL_WriteS8".}
proc SDL_WriteU16LE*(dst: ptr SDL_IOStream; value: Uint16): bool {.cdecl,
    importc: "SDL_WriteU16LE".}
proc SDL_WriteS16LE*(dst: ptr SDL_IOStream; value: Sint16): bool {.cdecl,
    importc: "SDL_WriteS16LE".}
proc SDL_WriteU16BE*(dst: ptr SDL_IOStream; value: Uint16): bool {.cdecl,
    importc: "SDL_WriteU16BE".}
proc SDL_WriteS16BE*(dst: ptr SDL_IOStream; value: Sint16): bool {.cdecl,
    importc: "SDL_WriteS16BE".}
proc SDL_WriteU32LE*(dst: ptr SDL_IOStream; value: Uint32): bool {.cdecl,
    importc: "SDL_WriteU32LE".}
proc SDL_WriteS32LE*(dst: ptr SDL_IOStream; value: Sint32): bool {.cdecl,
    importc: "SDL_WriteS32LE".}
proc SDL_WriteU32BE*(dst: ptr SDL_IOStream; value: Uint32): bool {.cdecl,
    importc: "SDL_WriteU32BE".}
proc SDL_WriteS32BE*(dst: ptr SDL_IOStream; value: Sint32): bool {.cdecl,
    importc: "SDL_WriteS32BE".}
proc SDL_WriteU64LE*(dst: ptr SDL_IOStream; value: Uint64): bool {.cdecl,
    importc: "SDL_WriteU64LE".}
proc SDL_WriteS64LE*(dst: ptr SDL_IOStream; value: Sint64): bool {.cdecl,
    importc: "SDL_WriteS64LE".}
proc SDL_WriteU64BE*(dst: ptr SDL_IOStream; value: Uint64): bool {.cdecl,
    importc: "SDL_WriteU64BE".}
proc SDL_WriteS64BE*(dst: ptr SDL_IOStream; value: Sint64): bool {.cdecl,
    importc: "SDL_WriteS64BE".}
proc SDL_GetNumAudioDrivers*(): cint {.cdecl, importc: "SDL_GetNumAudioDrivers".}
proc SDL_GetAudioDriver*(index: cint): cstring {.cdecl,
    importc: "SDL_GetAudioDriver".}
proc SDL_GetCurrentAudioDriver*(): cstring {.cdecl,
    importc: "SDL_GetCurrentAudioDriver".}
proc SDL_GetAudioPlaybackDevices*(count: ptr cint): ptr SDL_AudioDeviceID {.
    cdecl, importc: "SDL_GetAudioPlaybackDevices".}
proc SDL_GetAudioRecordingDevices*(count: ptr cint): ptr SDL_AudioDeviceID {.
    cdecl, importc: "SDL_GetAudioRecordingDevices".}
proc SDL_GetAudioDeviceName*(devid: SDL_AudioDeviceID): cstring {.cdecl,
    importc: "SDL_GetAudioDeviceName".}
proc SDL_GetAudioDeviceFormat*(devid: SDL_AudioDeviceID;
                               spec: ptr SDL_AudioSpec; sample_frames: ptr cint): bool {.
    cdecl, importc: "SDL_GetAudioDeviceFormat".}
proc SDL_GetAudioDeviceChannelMap*(devid: SDL_AudioDeviceID; count: ptr cint): ptr cint {.
    cdecl, importc: "SDL_GetAudioDeviceChannelMap".}
proc SDL_OpenAudioDevice*(devid: SDL_AudioDeviceID; spec: ptr SDL_AudioSpec): SDL_AudioDeviceID {.
    cdecl, importc: "SDL_OpenAudioDevice".}
proc SDL_PauseAudioDevice*(dev: SDL_AudioDeviceID): bool {.cdecl,
    importc: "SDL_PauseAudioDevice".}
proc SDL_ResumeAudioDevice*(dev: SDL_AudioDeviceID): bool {.cdecl,
    importc: "SDL_ResumeAudioDevice".}
proc SDL_AudioDevicePaused*(dev: SDL_AudioDeviceID): bool {.cdecl,
    importc: "SDL_AudioDevicePaused".}
proc SDL_GetAudioDeviceGain*(devid: SDL_AudioDeviceID): cfloat {.cdecl,
    importc: "SDL_GetAudioDeviceGain".}
proc SDL_SetAudioDeviceGain*(devid: SDL_AudioDeviceID; gain: cfloat): bool {.
    cdecl, importc: "SDL_SetAudioDeviceGain".}
proc SDL_CloseAudioDevice*(devid: SDL_AudioDeviceID): void {.cdecl,
    importc: "SDL_CloseAudioDevice".}
proc SDL_BindAudioStreams*(devid: SDL_AudioDeviceID;
                           streams: ptr ptr SDL_AudioStream; num_streams: cint): bool {.
    cdecl, importc: "SDL_BindAudioStreams".}
proc SDL_BindAudioStream*(devid: SDL_AudioDeviceID; stream: ptr SDL_AudioStream): bool {.
    cdecl, importc: "SDL_BindAudioStream".}
proc SDL_UnbindAudioStreams*(streams: ptr ptr SDL_AudioStream; num_streams: cint): void {.
    cdecl, importc: "SDL_UnbindAudioStreams".}
proc SDL_UnbindAudioStream*(stream: ptr SDL_AudioStream): void {.cdecl,
    importc: "SDL_UnbindAudioStream".}
proc SDL_GetAudioStreamDevice*(stream: ptr SDL_AudioStream): SDL_AudioDeviceID {.
    cdecl, importc: "SDL_GetAudioStreamDevice".}
proc SDL_CreateAudioStream*(src_spec: ptr SDL_AudioSpec;
                            dst_spec: ptr SDL_AudioSpec): ptr SDL_AudioStream {.
    cdecl, importc: "SDL_CreateAudioStream".}
proc SDL_GetAudioStreamProperties*(stream: ptr SDL_AudioStream): SDL_PropertiesID {.
    cdecl, importc: "SDL_GetAudioStreamProperties".}
proc SDL_GetAudioStreamFormat*(stream: ptr SDL_AudioStream;
                               src_spec: ptr SDL_AudioSpec;
                               dst_spec: ptr SDL_AudioSpec): bool {.cdecl,
    importc: "SDL_GetAudioStreamFormat".}
proc SDL_SetAudioStreamFormat*(stream: ptr SDL_AudioStream;
                               src_spec: ptr SDL_AudioSpec;
                               dst_spec: ptr SDL_AudioSpec): bool {.cdecl,
    importc: "SDL_SetAudioStreamFormat".}
proc SDL_GetAudioStreamFrequencyRatio*(stream: ptr SDL_AudioStream): cfloat {.
    cdecl, importc: "SDL_GetAudioStreamFrequencyRatio".}
proc SDL_SetAudioStreamFrequencyRatio*(stream: ptr SDL_AudioStream;
                                       ratio: cfloat): bool {.cdecl,
    importc: "SDL_SetAudioStreamFrequencyRatio".}
proc SDL_GetAudioStreamGain*(stream: ptr SDL_AudioStream): cfloat {.cdecl,
    importc: "SDL_GetAudioStreamGain".}
proc SDL_SetAudioStreamGain*(stream: ptr SDL_AudioStream; gain: cfloat): bool {.
    cdecl, importc: "SDL_SetAudioStreamGain".}
proc SDL_GetAudioStreamInputChannelMap*(stream: ptr SDL_AudioStream;
                                        count: ptr cint): ptr cint {.cdecl,
    importc: "SDL_GetAudioStreamInputChannelMap".}
proc SDL_GetAudioStreamOutputChannelMap*(stream: ptr SDL_AudioStream;
    count: ptr cint): ptr cint {.cdecl,
                                 importc: "SDL_GetAudioStreamOutputChannelMap".}
proc SDL_SetAudioStreamInputChannelMap*(stream: ptr SDL_AudioStream;
                                        chmap: ptr cint; count: cint): bool {.
    cdecl, importc: "SDL_SetAudioStreamInputChannelMap".}
proc SDL_SetAudioStreamOutputChannelMap*(stream: ptr SDL_AudioStream;
    chmap: ptr cint; count: cint): bool {.cdecl,
    importc: "SDL_SetAudioStreamOutputChannelMap".}
proc SDL_PutAudioStreamData*(stream: ptr SDL_AudioStream; buf: pointer;
                             len: cint): bool {.cdecl,
    importc: "SDL_PutAudioStreamData".}
proc SDL_GetAudioStreamData*(stream: ptr SDL_AudioStream; buf: pointer;
                             len: cint): cint {.cdecl,
    importc: "SDL_GetAudioStreamData".}
proc SDL_GetAudioStreamAvailable*(stream: ptr SDL_AudioStream): cint {.cdecl,
    importc: "SDL_GetAudioStreamAvailable".}
proc SDL_GetAudioStreamQueued*(stream: ptr SDL_AudioStream): cint {.cdecl,
    importc: "SDL_GetAudioStreamQueued".}
proc SDL_FlushAudioStream*(stream: ptr SDL_AudioStream): bool {.cdecl,
    importc: "SDL_FlushAudioStream".}
proc SDL_ClearAudioStream*(stream: ptr SDL_AudioStream): bool {.cdecl,
    importc: "SDL_ClearAudioStream".}
proc SDL_PauseAudioStreamDevice*(stream: ptr SDL_AudioStream): bool {.cdecl,
    importc: "SDL_PauseAudioStreamDevice".}
proc SDL_ResumeAudioStreamDevice*(stream: ptr SDL_AudioStream): bool {.cdecl,
    importc: "SDL_ResumeAudioStreamDevice".}
proc SDL_LockAudioStream*(stream: ptr SDL_AudioStream): bool {.cdecl,
    importc: "SDL_LockAudioStream".}
proc SDL_UnlockAudioStream*(stream: ptr SDL_AudioStream): bool {.cdecl,
    importc: "SDL_UnlockAudioStream".}
proc SDL_SetAudioStreamGetCallback*(stream: ptr SDL_AudioStream;
                                    callback: SDL_AudioStreamCallback;
                                    userdata: pointer): bool {.cdecl,
    importc: "SDL_SetAudioStreamGetCallback".}
proc SDL_SetAudioStreamPutCallback*(stream: ptr SDL_AudioStream;
                                    callback: SDL_AudioStreamCallback;
                                    userdata: pointer): bool {.cdecl,
    importc: "SDL_SetAudioStreamPutCallback".}
proc SDL_DestroyAudioStream*(stream: ptr SDL_AudioStream): void {.cdecl,
    importc: "SDL_DestroyAudioStream".}
proc SDL_OpenAudioDeviceStream*(devid: SDL_AudioDeviceID;
                                spec: ptr SDL_AudioSpec;
                                callback: SDL_AudioStreamCallback;
                                userdata: pointer): ptr SDL_AudioStream {.cdecl,
    importc: "SDL_OpenAudioDeviceStream".}
proc SDL_SetAudioPostmixCallback*(devid: SDL_AudioDeviceID;
                                  callback: SDL_AudioPostmixCallback;
                                  userdata: pointer): bool {.cdecl,
    importc: "SDL_SetAudioPostmixCallback".}
proc SDL_LoadWAV_IO*(src: ptr SDL_IOStream; closeio: bool;
                     spec: ptr SDL_AudioSpec; audio_buf: ptr ptr Uint8;
                     audio_len: ptr Uint32): bool {.cdecl,
    importc: "SDL_LoadWAV_IO".}
proc SDL_LoadWAV*(path: cstring; spec: ptr SDL_AudioSpec;
                  audio_buf: ptr ptr Uint8; audio_len: ptr Uint32): bool {.
    cdecl, importc: "SDL_LoadWAV".}
proc SDL_MixAudio*(dst: ptr Uint8; src: ptr Uint8; format: SDL_AudioFormat;
                   len: Uint32; volume: cfloat): bool {.cdecl,
    importc: "SDL_MixAudio".}
proc SDL_ConvertAudioSamples*(src_spec: ptr SDL_AudioSpec; src_data: ptr Uint8;
                              src_len: cint; dst_spec: ptr SDL_AudioSpec;
                              dst_data: ptr ptr Uint8; dst_len: ptr cint): bool {.
    cdecl, importc: "SDL_ConvertAudioSamples".}
proc SDL_GetAudioFormatName*(format: SDL_AudioFormat): cstring {.cdecl,
    importc: "SDL_GetAudioFormatName".}
proc SDL_GetSilenceValueForFormat*(format: SDL_AudioFormat): cint {.cdecl,
    importc: "SDL_GetSilenceValueForFormat".}
proc SDL_ComposeCustomBlendMode*(srcColorFactor: SDL_BlendFactor;
                                 dstColorFactor: SDL_BlendFactor;
                                 colorOperation: SDL_BlendOperation;
                                 srcAlphaFactor: SDL_BlendFactor;
                                 dstAlphaFactor: SDL_BlendFactor;
                                 alphaOperation: SDL_BlendOperation): SDL_BlendMode {.
    cdecl, importc: "SDL_ComposeCustomBlendMode".}
proc SDL_GetPixelFormatName*(format: SDL_PixelFormat): cstring {.cdecl,
    importc: "SDL_GetPixelFormatName".}
proc SDL_GetMasksForPixelFormat*(format: SDL_PixelFormat; bpp: ptr cint;
                                 Rmask: ptr Uint32; Gmask: ptr Uint32;
                                 Bmask: ptr Uint32; Amask: ptr Uint32): bool {.
    cdecl, importc: "SDL_GetMasksForPixelFormat".}
proc SDL_GetPixelFormatForMasks*(bpp: cint; Rmask: Uint32; Gmask: Uint32;
                                 Bmask: Uint32; Amask: Uint32): SDL_PixelFormat {.
    cdecl, importc: "SDL_GetPixelFormatForMasks".}
proc SDL_GetPixelFormatDetails*(format: SDL_PixelFormat): ptr SDL_PixelFormatDetails {.
    cdecl, importc: "SDL_GetPixelFormatDetails".}
proc SDL_CreatePalette*(ncolors: cint): ptr SDL_Palette {.cdecl,
    importc: "SDL_CreatePalette".}
proc SDL_SetPaletteColors*(palette: ptr SDL_Palette; colors: ptr SDL_Color;
                           firstcolor: cint; ncolors: cint): bool {.cdecl,
    importc: "SDL_SetPaletteColors".}
proc SDL_DestroyPalette*(palette: ptr SDL_Palette): void {.cdecl,
    importc: "SDL_DestroyPalette".}
proc SDL_MapRGB*(format: ptr SDL_PixelFormatDetails; palette: ptr SDL_Palette;
                 r: Uint8; g: Uint8; b: Uint8): Uint32 {.cdecl,
    importc: "SDL_MapRGB".}
proc SDL_MapRGBA*(format: ptr SDL_PixelFormatDetails; palette: ptr SDL_Palette;
                  r: Uint8; g: Uint8; b: Uint8; a: Uint8): Uint32 {.cdecl,
    importc: "SDL_MapRGBA".}
proc SDL_GetRGB*(pixel: Uint32; format: ptr SDL_PixelFormatDetails;
                 palette: ptr SDL_Palette; r: ptr Uint8; g: ptr Uint8;
                 b: ptr Uint8): void {.cdecl, importc: "SDL_GetRGB".}
proc SDL_GetRGBA*(pixel: Uint32; format: ptr SDL_PixelFormatDetails;
                  palette: ptr SDL_Palette; r: ptr Uint8; g: ptr Uint8;
                  b: ptr Uint8; a: ptr Uint8): void {.cdecl,
    importc: "SDL_GetRGBA".}
proc SDL_HasRectIntersection*(A: ptr SDL_Rect; B: ptr SDL_Rect): bool {.cdecl,
    importc: "SDL_HasRectIntersection".}
proc SDL_GetRectIntersection*(A: ptr SDL_Rect; B: ptr SDL_Rect;
                              result: ptr SDL_Rect): bool {.cdecl,
    importc: "SDL_GetRectIntersection".}
proc SDL_GetRectUnion*(A: ptr SDL_Rect; B: ptr SDL_Rect; result: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_GetRectUnion".}
proc SDL_GetRectEnclosingPoints*(points: ptr SDL_Point; count: cint;
                                 clip: ptr SDL_Rect; result: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_GetRectEnclosingPoints".}
proc SDL_GetRectAndLineIntersection*(rect: ptr SDL_Rect; X1: ptr cint;
                                     Y1: ptr cint; X2: ptr cint; Y2: ptr cint): bool {.
    cdecl, importc: "SDL_GetRectAndLineIntersection".}
proc SDL_HasRectIntersectionFloat*(A: ptr SDL_FRect; B: ptr SDL_FRect): bool {.
    cdecl, importc: "SDL_HasRectIntersectionFloat".}
proc SDL_GetRectIntersectionFloat*(A: ptr SDL_FRect; B: ptr SDL_FRect;
                                   result: ptr SDL_FRect): bool {.cdecl,
    importc: "SDL_GetRectIntersectionFloat".}
proc SDL_GetRectUnionFloat*(A: ptr SDL_FRect; B: ptr SDL_FRect;
                            result: ptr SDL_FRect): bool {.cdecl,
    importc: "SDL_GetRectUnionFloat".}
proc SDL_GetRectEnclosingPointsFloat*(points: ptr SDL_FPoint; count: cint;
                                      clip: ptr SDL_FRect; result: ptr SDL_FRect): bool {.
    cdecl, importc: "SDL_GetRectEnclosingPointsFloat".}
proc SDL_GetRectAndLineIntersectionFloat*(rect: ptr SDL_FRect; X1: ptr cfloat;
    Y1: ptr cfloat; X2: ptr cfloat; Y2: ptr cfloat): bool {.cdecl,
    importc: "SDL_GetRectAndLineIntersectionFloat".}
proc SDL_CreateSurface*(width: cint; height: cint; format: SDL_PixelFormat): ptr SDL_Surface {.
    cdecl, importc: "SDL_CreateSurface".}
proc SDL_CreateSurfaceFrom*(width: cint; height: cint; format: SDL_PixelFormat;
                            pixels: pointer; pitch: cint): ptr SDL_Surface {.
    cdecl, importc: "SDL_CreateSurfaceFrom".}
proc SDL_DestroySurface*(surface: ptr SDL_Surface): void {.cdecl,
    importc: "SDL_DestroySurface".}
proc SDL_GetSurfaceProperties*(surface: ptr SDL_Surface): SDL_PropertiesID {.
    cdecl, importc: "SDL_GetSurfaceProperties".}
proc SDL_SetSurfaceColorspace*(surface: ptr SDL_Surface;
                               colorspace: SDL_Colorspace): bool {.cdecl,
    importc: "SDL_SetSurfaceColorspace".}
proc SDL_GetSurfaceColorspace*(surface: ptr SDL_Surface): SDL_Colorspace {.
    cdecl, importc: "SDL_GetSurfaceColorspace".}
proc SDL_CreateSurfacePalette*(surface: ptr SDL_Surface): ptr SDL_Palette {.
    cdecl, importc: "SDL_CreateSurfacePalette".}
proc SDL_SetSurfacePalette*(surface: ptr SDL_Surface; palette: ptr SDL_Palette): bool {.
    cdecl, importc: "SDL_SetSurfacePalette".}
proc SDL_GetSurfacePalette*(surface: ptr SDL_Surface): ptr SDL_Palette {.cdecl,
    importc: "SDL_GetSurfacePalette".}
proc SDL_AddSurfaceAlternateImage*(surface: ptr SDL_Surface;
                                   image: ptr SDL_Surface): bool {.cdecl,
    importc: "SDL_AddSurfaceAlternateImage".}
proc SDL_SurfaceHasAlternateImages*(surface: ptr SDL_Surface): bool {.cdecl,
    importc: "SDL_SurfaceHasAlternateImages".}
proc SDL_GetSurfaceImages*(surface: ptr SDL_Surface; count: ptr cint): ptr ptr SDL_Surface {.
    cdecl, importc: "SDL_GetSurfaceImages".}
proc SDL_RemoveSurfaceAlternateImages*(surface: ptr SDL_Surface): void {.cdecl,
    importc: "SDL_RemoveSurfaceAlternateImages".}
proc SDL_LockSurface*(surface: ptr SDL_Surface): bool {.cdecl,
    importc: "SDL_LockSurface".}
proc SDL_UnlockSurface*(surface: ptr SDL_Surface): void {.cdecl,
    importc: "SDL_UnlockSurface".}
proc SDL_LoadBMP_IO*(src: ptr SDL_IOStream; closeio: bool): ptr SDL_Surface {.
    cdecl, importc: "SDL_LoadBMP_IO".}
proc SDL_LoadBMP*(file: cstring): ptr SDL_Surface {.cdecl,
    importc: "SDL_LoadBMP".}
proc SDL_SaveBMP_IO*(surface: ptr SDL_Surface; dst: ptr SDL_IOStream;
                     closeio: bool): bool {.cdecl, importc: "SDL_SaveBMP_IO".}
proc SDL_SaveBMP*(surface: ptr SDL_Surface; file: cstring): bool {.cdecl,
    importc: "SDL_SaveBMP".}
proc SDL_SetSurfaceRLE*(surface: ptr SDL_Surface; enabled: bool): bool {.cdecl,
    importc: "SDL_SetSurfaceRLE".}
proc SDL_SurfaceHasRLE*(surface: ptr SDL_Surface): bool {.cdecl,
    importc: "SDL_SurfaceHasRLE".}
proc SDL_SetSurfaceColorKey*(surface: ptr SDL_Surface; enabled: bool;
                             key: Uint32): bool {.cdecl,
    importc: "SDL_SetSurfaceColorKey".}
proc SDL_SurfaceHasColorKey*(surface: ptr SDL_Surface): bool {.cdecl,
    importc: "SDL_SurfaceHasColorKey".}
proc SDL_GetSurfaceColorKey*(surface: ptr SDL_Surface; key: ptr Uint32): bool {.
    cdecl, importc: "SDL_GetSurfaceColorKey".}
proc SDL_SetSurfaceColorMod*(surface: ptr SDL_Surface; r: Uint8; g: Uint8;
                             b: Uint8): bool {.cdecl,
    importc: "SDL_SetSurfaceColorMod".}
proc SDL_GetSurfaceColorMod*(surface: ptr SDL_Surface; r: ptr Uint8;
                             g: ptr Uint8; b: ptr Uint8): bool {.cdecl,
    importc: "SDL_GetSurfaceColorMod".}
proc SDL_SetSurfaceAlphaMod*(surface: ptr SDL_Surface; alpha: Uint8): bool {.
    cdecl, importc: "SDL_SetSurfaceAlphaMod".}
proc SDL_GetSurfaceAlphaMod*(surface: ptr SDL_Surface; alpha: ptr Uint8): bool {.
    cdecl, importc: "SDL_GetSurfaceAlphaMod".}
proc SDL_SetSurfaceBlendMode*(surface: ptr SDL_Surface; blendMode: SDL_BlendMode): bool {.
    cdecl, importc: "SDL_SetSurfaceBlendMode".}
proc SDL_GetSurfaceBlendMode*(surface: ptr SDL_Surface;
                              blendMode: ptr SDL_BlendMode): bool {.cdecl,
    importc: "SDL_GetSurfaceBlendMode".}
proc SDL_SetSurfaceClipRect*(surface: ptr SDL_Surface; rect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_SetSurfaceClipRect".}
proc SDL_GetSurfaceClipRect*(surface: ptr SDL_Surface; rect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_GetSurfaceClipRect".}
proc SDL_FlipSurface*(surface: ptr SDL_Surface; flip: SDL_FlipMode): bool {.
    cdecl, importc: "SDL_FlipSurface".}
proc SDL_DuplicateSurface*(surface: ptr SDL_Surface): ptr SDL_Surface {.cdecl,
    importc: "SDL_DuplicateSurface".}
proc SDL_ScaleSurface*(surface: ptr SDL_Surface; width: cint; height: cint;
                       scaleMode: SDL_ScaleMode): ptr SDL_Surface {.cdecl,
    importc: "SDL_ScaleSurface".}
proc SDL_ConvertSurface*(surface: ptr SDL_Surface; format: SDL_PixelFormat): ptr SDL_Surface {.
    cdecl, importc: "SDL_ConvertSurface".}
proc SDL_ConvertSurfaceAndColorspace*(surface: ptr SDL_Surface;
                                      format: SDL_PixelFormat;
                                      palette: ptr SDL_Palette;
                                      colorspace: SDL_Colorspace;
                                      props: SDL_PropertiesID): ptr SDL_Surface {.
    cdecl, importc: "SDL_ConvertSurfaceAndColorspace".}
proc SDL_ConvertPixels*(width: cint; height: cint; src_format: SDL_PixelFormat;
                        src: pointer; src_pitch: cint;
                        dst_format: SDL_PixelFormat; dst: pointer;
                        dst_pitch: cint): bool {.cdecl,
    importc: "SDL_ConvertPixels".}
proc SDL_ConvertPixelsAndColorspace*(width: cint; height: cint;
                                     src_format: SDL_PixelFormat;
                                     src_colorspace: SDL_Colorspace;
                                     src_properties: SDL_PropertiesID;
                                     src: pointer; src_pitch: cint;
                                     dst_format: SDL_PixelFormat;
                                     dst_colorspace: SDL_Colorspace;
                                     dst_properties: SDL_PropertiesID;
                                     dst: pointer; dst_pitch: cint): bool {.
    cdecl, importc: "SDL_ConvertPixelsAndColorspace".}
proc SDL_PremultiplyAlpha*(width: cint; height: cint;
                           src_format: SDL_PixelFormat; src: pointer;
                           src_pitch: cint; dst_format: SDL_PixelFormat;
                           dst: pointer; dst_pitch: cint; linear: bool): bool {.
    cdecl, importc: "SDL_PremultiplyAlpha".}
proc SDL_PremultiplySurfaceAlpha*(surface: ptr SDL_Surface; linear: bool): bool {.
    cdecl, importc: "SDL_PremultiplySurfaceAlpha".}
proc SDL_ClearSurface*(surface: ptr SDL_Surface; r: cfloat; g: cfloat;
                       b: cfloat; a: cfloat): bool {.cdecl,
    importc: "SDL_ClearSurface".}
proc SDL_FillSurfaceRect*(dst: ptr SDL_Surface; rect: ptr SDL_Rect;
                          color: Uint32): bool {.cdecl,
    importc: "SDL_FillSurfaceRect".}
proc SDL_FillSurfaceRects*(dst: ptr SDL_Surface; rects: ptr SDL_Rect;
                           count: cint; color: Uint32): bool {.cdecl,
    importc: "SDL_FillSurfaceRects".}
proc SDL_BlitSurface*(src: ptr SDL_Surface; srcrect: ptr SDL_Rect;
                      dst: ptr SDL_Surface; dstrect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_BlitSurface".}
proc SDL_BlitSurfaceUnchecked*(src: ptr SDL_Surface; srcrect: ptr SDL_Rect;
                               dst: ptr SDL_Surface; dstrect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_BlitSurfaceUnchecked".}
proc SDL_BlitSurfaceScaled*(src: ptr SDL_Surface; srcrect: ptr SDL_Rect;
                            dst: ptr SDL_Surface; dstrect: ptr SDL_Rect;
                            scaleMode: SDL_ScaleMode): bool {.cdecl,
    importc: "SDL_BlitSurfaceScaled".}
proc SDL_BlitSurfaceUncheckedScaled*(src: ptr SDL_Surface;
                                     srcrect: ptr SDL_Rect;
                                     dst: ptr SDL_Surface;
                                     dstrect: ptr SDL_Rect;
                                     scaleMode: SDL_ScaleMode): bool {.cdecl,
    importc: "SDL_BlitSurfaceUncheckedScaled".}
proc SDL_BlitSurfaceTiled*(src: ptr SDL_Surface; srcrect: ptr SDL_Rect;
                           dst: ptr SDL_Surface; dstrect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_BlitSurfaceTiled".}
proc SDL_BlitSurfaceTiledWithScale*(src: ptr SDL_Surface; srcrect: ptr SDL_Rect;
                                    scale: cfloat; scaleMode: SDL_ScaleMode;
                                    dst: ptr SDL_Surface; dstrect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_BlitSurfaceTiledWithScale".}
proc SDL_BlitSurface9Grid*(src: ptr SDL_Surface; srcrect: ptr SDL_Rect;
                           left_width: cint; right_width: cint;
                           top_height: cint; bottom_height: cint; scale: cfloat;
                           scaleMode: SDL_ScaleMode; dst: ptr SDL_Surface;
                           dstrect: ptr SDL_Rect): bool {.cdecl,
    importc: "SDL_BlitSurface9Grid".}
proc SDL_MapSurfaceRGB*(surface: ptr SDL_Surface; r: Uint8; g: Uint8; b: Uint8): Uint32 {.
    cdecl, importc: "SDL_MapSurfaceRGB".}
proc SDL_MapSurfaceRGBA*(surface: ptr SDL_Surface; r: Uint8; g: Uint8; b: Uint8;
                         a: Uint8): Uint32 {.cdecl,
    importc: "SDL_MapSurfaceRGBA".}
proc SDL_ReadSurfacePixel*(surface: ptr SDL_Surface; x: cint; y: cint;
                           r: ptr Uint8; g: ptr Uint8; b: ptr Uint8;
                           a: ptr Uint8): bool {.cdecl,
    importc: "SDL_ReadSurfacePixel".}
proc SDL_ReadSurfacePixelFloat*(surface: ptr SDL_Surface; x: cint; y: cint;
                                r: ptr cfloat; g: ptr cfloat; b: ptr cfloat;
                                a: ptr cfloat): bool {.cdecl,
    importc: "SDL_ReadSurfacePixelFloat".}
proc SDL_WriteSurfacePixel*(surface: ptr SDL_Surface; x: cint; y: cint;
                            r: Uint8; g: Uint8; b: Uint8; a: Uint8): bool {.
    cdecl, importc: "SDL_WriteSurfacePixel".}
proc SDL_WriteSurfacePixelFloat*(surface: ptr SDL_Surface; x: cint; y: cint;
                                 r: cfloat; g: cfloat; b: cfloat; a: cfloat): bool {.
    cdecl, importc: "SDL_WriteSurfacePixelFloat".}
proc SDL_GetNumCameraDrivers*(): cint {.cdecl,
                                        importc: "SDL_GetNumCameraDrivers".}
proc SDL_GetCameraDriver*(index: cint): cstring {.cdecl,
    importc: "SDL_GetCameraDriver".}
proc SDL_GetCurrentCameraDriver*(): cstring {.cdecl,
    importc: "SDL_GetCurrentCameraDriver".}
proc SDL_GetCameras*(count: ptr cint): ptr SDL_CameraID {.cdecl,
    importc: "SDL_GetCameras".}
proc SDL_GetCameraSupportedFormats*(devid: SDL_CameraID; count: ptr cint): ptr ptr SDL_CameraSpec {.
    cdecl, importc: "SDL_GetCameraSupportedFormats".}
proc SDL_GetCameraName*(instance_id: SDL_CameraID): cstring {.cdecl,
    importc: "SDL_GetCameraName".}
proc SDL_GetCameraPosition*(instance_id: SDL_CameraID): SDL_CameraPosition {.
    cdecl, importc: "SDL_GetCameraPosition".}
proc SDL_OpenCamera*(instance_id: SDL_CameraID; spec: ptr SDL_CameraSpec): ptr SDL_Camera {.
    cdecl, importc: "SDL_OpenCamera".}
proc SDL_GetCameraPermissionState*(camera: ptr SDL_Camera): cint {.cdecl,
    importc: "SDL_GetCameraPermissionState".}
proc SDL_GetCameraID*(camera: ptr SDL_Camera): SDL_CameraID {.cdecl,
    importc: "SDL_GetCameraID".}
proc SDL_GetCameraProperties*(camera: ptr SDL_Camera): SDL_PropertiesID {.cdecl,
    importc: "SDL_GetCameraProperties".}
proc SDL_GetCameraFormat*(camera: ptr SDL_Camera; spec: ptr SDL_CameraSpec): bool {.
    cdecl, importc: "SDL_GetCameraFormat".}
proc SDL_AcquireCameraFrame*(camera: ptr SDL_Camera; timestampNS: ptr Uint64): ptr SDL_Surface {.
    cdecl, importc: "SDL_AcquireCameraFrame".}
proc SDL_ReleaseCameraFrame*(camera: ptr SDL_Camera; frame: ptr SDL_Surface): void {.
    cdecl, importc: "SDL_ReleaseCameraFrame".}
proc SDL_CloseCamera*(camera: ptr SDL_Camera): void {.cdecl,
    importc: "SDL_CloseCamera".}
proc SDL_SetClipboardText*(text: cstring): bool {.cdecl,
    importc: "SDL_SetClipboardText".}
proc SDL_GetClipboardText*(): cstring {.cdecl, importc: "SDL_GetClipboardText".}
proc SDL_HasClipboardText*(): bool {.cdecl, importc: "SDL_HasClipboardText".}
proc SDL_SetPrimarySelectionText*(text: cstring): bool {.cdecl,
    importc: "SDL_SetPrimarySelectionText".}
proc SDL_GetPrimarySelectionText*(): cstring {.cdecl,
    importc: "SDL_GetPrimarySelectionText".}
proc SDL_HasPrimarySelectionText*(): bool {.cdecl,
    importc: "SDL_HasPrimarySelectionText".}
proc SDL_SetClipboardData*(callback: SDL_ClipboardDataCallback;
                           cleanup: SDL_ClipboardCleanupCallback;
                           userdata: pointer; mime_types: ptr cstring;
                           num_mime_types: csize_t): bool {.cdecl,
    importc: "SDL_SetClipboardData".}
proc SDL_ClearClipboardData*(): bool {.cdecl, importc: "SDL_ClearClipboardData".}
proc SDL_GetClipboardData*(mime_type: cstring; size: ptr csize_t): pointer {.
    cdecl, importc: "SDL_GetClipboardData".}
proc SDL_HasClipboardData*(mime_type: cstring): bool {.cdecl,
    importc: "SDL_HasClipboardData".}
proc SDL_GetClipboardMimeTypes*(num_mime_types: ptr csize_t): ptr cstring {.
    cdecl, importc: "SDL_GetClipboardMimeTypes".}
proc SDL_GetNumLogicalCPUCores*(): cint {.cdecl,
    importc: "SDL_GetNumLogicalCPUCores".}
proc SDL_GetCPUCacheLineSize*(): cint {.cdecl,
                                        importc: "SDL_GetCPUCacheLineSize".}
proc SDL_HasAltiVec*(): bool {.cdecl, importc: "SDL_HasAltiVec".}
proc SDL_HasMMX*(): bool {.cdecl, importc: "SDL_HasMMX".}
proc SDL_HasSSE*(): bool {.cdecl, importc: "SDL_HasSSE".}
proc SDL_HasSSE2*(): bool {.cdecl, importc: "SDL_HasSSE2".}
proc SDL_HasSSE3*(): bool {.cdecl, importc: "SDL_HasSSE3".}
proc SDL_HasSSE41*(): bool {.cdecl, importc: "SDL_HasSSE41".}
proc SDL_HasSSE42*(): bool {.cdecl, importc: "SDL_HasSSE42".}
proc SDL_HasAVX*(): bool {.cdecl, importc: "SDL_HasAVX".}
proc SDL_HasAVX2*(): bool {.cdecl, importc: "SDL_HasAVX2".}
proc SDL_HasAVX512F*(): bool {.cdecl, importc: "SDL_HasAVX512F".}
proc SDL_HasARMSIMD*(): bool {.cdecl, importc: "SDL_HasARMSIMD".}
proc SDL_HasNEON*(): bool {.cdecl, importc: "SDL_HasNEON".}
proc SDL_HasLSX*(): bool {.cdecl, importc: "SDL_HasLSX".}
proc SDL_HasLASX*(): bool {.cdecl, importc: "SDL_HasLASX".}
proc SDL_GetSystemRAM*(): cint {.cdecl, importc: "SDL_GetSystemRAM".}
proc SDL_GetSIMDAlignment*(): csize_t {.cdecl, importc: "SDL_GetSIMDAlignment".}
proc SDL_GetNumVideoDrivers*(): cint {.cdecl, importc: "SDL_GetNumVideoDrivers".}
proc SDL_GetVideoDriver*(index: cint): cstring {.cdecl,
    importc: "SDL_GetVideoDriver".}
proc SDL_GetCurrentVideoDriver*(): cstring {.cdecl,
    importc: "SDL_GetCurrentVideoDriver".}
proc SDL_GetSystemTheme*(): SDL_SystemTheme {.cdecl,
    importc: "SDL_GetSystemTheme".}
proc SDL_GetDisplays*(count: ptr cint): ptr SDL_DisplayID {.cdecl,
    importc: "SDL_GetDisplays".}
proc SDL_GetPrimaryDisplay*(): SDL_DisplayID {.cdecl,
    importc: "SDL_GetPrimaryDisplay".}
proc SDL_GetDisplayProperties*(displayID: SDL_DisplayID): SDL_PropertiesID {.
    cdecl, importc: "SDL_GetDisplayProperties".}
proc SDL_GetDisplayName*(displayID: SDL_DisplayID): cstring {.cdecl,
    importc: "SDL_GetDisplayName".}
proc SDL_GetDisplayBounds*(displayID: SDL_DisplayID; rect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_GetDisplayBounds".}
proc SDL_GetDisplayUsableBounds*(displayID: SDL_DisplayID; rect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_GetDisplayUsableBounds".}
proc SDL_GetNaturalDisplayOrientation*(displayID: SDL_DisplayID): SDL_DisplayOrientation {.
    cdecl, importc: "SDL_GetNaturalDisplayOrientation".}
proc SDL_GetCurrentDisplayOrientation*(displayID: SDL_DisplayID): SDL_DisplayOrientation {.
    cdecl, importc: "SDL_GetCurrentDisplayOrientation".}
proc SDL_GetDisplayContentScale*(displayID: SDL_DisplayID): cfloat {.cdecl,
    importc: "SDL_GetDisplayContentScale".}
proc SDL_GetFullscreenDisplayModes*(displayID: SDL_DisplayID; count: ptr cint): ptr ptr SDL_DisplayMode {.
    cdecl, importc: "SDL_GetFullscreenDisplayModes".}
proc SDL_GetClosestFullscreenDisplayMode*(displayID: SDL_DisplayID; w: cint;
    h: cint; refresh_rate: cfloat; include_high_density_modes: bool;
    mode: ptr SDL_DisplayMode): bool {.cdecl, importc: "SDL_GetClosestFullscreenDisplayMode".}
proc SDL_GetDesktopDisplayMode*(displayID: SDL_DisplayID): ptr SDL_DisplayMode {.
    cdecl, importc: "SDL_GetDesktopDisplayMode".}
proc SDL_GetCurrentDisplayMode*(displayID: SDL_DisplayID): ptr SDL_DisplayMode {.
    cdecl, importc: "SDL_GetCurrentDisplayMode".}
proc SDL_GetDisplayForPoint*(point: ptr SDL_Point): SDL_DisplayID {.cdecl,
    importc: "SDL_GetDisplayForPoint".}
proc SDL_GetDisplayForRect*(rect: ptr SDL_Rect): SDL_DisplayID {.cdecl,
    importc: "SDL_GetDisplayForRect".}
proc SDL_GetDisplayForWindow*(window: ptr SDL_Window): SDL_DisplayID {.cdecl,
    importc: "SDL_GetDisplayForWindow".}
proc SDL_GetWindowPixelDensity*(window: ptr SDL_Window): cfloat {.cdecl,
    importc: "SDL_GetWindowPixelDensity".}
proc SDL_GetWindowDisplayScale*(window: ptr SDL_Window): cfloat {.cdecl,
    importc: "SDL_GetWindowDisplayScale".}
proc SDL_SetWindowFullscreenMode*(window: ptr SDL_Window;
                                  mode: ptr SDL_DisplayMode): bool {.cdecl,
    importc: "SDL_SetWindowFullscreenMode".}
proc SDL_GetWindowFullscreenMode*(window: ptr SDL_Window): ptr SDL_DisplayMode {.
    cdecl, importc: "SDL_GetWindowFullscreenMode".}
proc SDL_GetWindowICCProfile*(window: ptr SDL_Window; size: ptr csize_t): pointer {.
    cdecl, importc: "SDL_GetWindowICCProfile".}
proc SDL_GetWindowPixelFormat*(window: ptr SDL_Window): SDL_PixelFormat {.cdecl,
    importc: "SDL_GetWindowPixelFormat".}
proc SDL_GetWindows*(count: ptr cint): ptr ptr SDL_Window {.cdecl,
    importc: "SDL_GetWindows".}
proc SDL_CreateWindow*(title: cstring; w: cint; h: cint; flags: SDL_WindowFlags): ptr SDL_Window {.
    cdecl, importc: "SDL_CreateWindow".}
proc SDL_CreatePopupWindow*(parent: ptr SDL_Window; offset_x: cint;
                            offset_y: cint; w: cint; h: cint;
                            flags: SDL_WindowFlags): ptr SDL_Window {.cdecl,
    importc: "SDL_CreatePopupWindow".}
proc SDL_CreateWindowWithProperties*(props: SDL_PropertiesID): ptr SDL_Window {.
    cdecl, importc: "SDL_CreateWindowWithProperties".}
proc SDL_GetWindowID*(window: ptr SDL_Window): SDL_WindowID {.cdecl,
    importc: "SDL_GetWindowID".}
proc SDL_GetWindowFromID*(id: SDL_WindowID): ptr SDL_Window {.cdecl,
    importc: "SDL_GetWindowFromID".}
proc SDL_GetWindowParent*(window: ptr SDL_Window): ptr SDL_Window {.cdecl,
    importc: "SDL_GetWindowParent".}
proc SDL_GetWindowProperties*(window: ptr SDL_Window): SDL_PropertiesID {.cdecl,
    importc: "SDL_GetWindowProperties".}
proc SDL_GetWindowFlags*(window: ptr SDL_Window): SDL_WindowFlags {.cdecl,
    importc: "SDL_GetWindowFlags".}
proc SDL_SetWindowTitle*(window: ptr SDL_Window; title: cstring): bool {.cdecl,
    importc: "SDL_SetWindowTitle".}
proc SDL_GetWindowTitle*(window: ptr SDL_Window): cstring {.cdecl,
    importc: "SDL_GetWindowTitle".}
proc SDL_SetWindowIcon*(window: ptr SDL_Window; icon: ptr SDL_Surface): bool {.
    cdecl, importc: "SDL_SetWindowIcon".}
proc SDL_SetWindowPosition*(window: ptr SDL_Window; x: cint; y: cint): bool {.
    cdecl, importc: "SDL_SetWindowPosition".}
proc SDL_GetWindowPosition*(window: ptr SDL_Window; x: ptr cint; y: ptr cint): bool {.
    cdecl, importc: "SDL_GetWindowPosition".}
proc SDL_SetWindowSize*(window: ptr SDL_Window; w: cint; h: cint): bool {.cdecl,
    importc: "SDL_SetWindowSize".}
proc SDL_GetWindowSize*(window: ptr SDL_Window; w: ptr cint; h: ptr cint): bool {.
    cdecl, importc: "SDL_GetWindowSize".}
proc SDL_GetWindowSafeArea*(window: ptr SDL_Window; rect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_GetWindowSafeArea".}
proc SDL_SetWindowAspectRatio*(window: ptr SDL_Window; min_aspect: cfloat;
                               max_aspect: cfloat): bool {.cdecl,
    importc: "SDL_SetWindowAspectRatio".}
proc SDL_GetWindowAspectRatio*(window: ptr SDL_Window; min_aspect: ptr cfloat;
                               max_aspect: ptr cfloat): bool {.cdecl,
    importc: "SDL_GetWindowAspectRatio".}
proc SDL_GetWindowBordersSize*(window: ptr SDL_Window; top: ptr cint;
                               left: ptr cint; bottom: ptr cint; right: ptr cint): bool {.
    cdecl, importc: "SDL_GetWindowBordersSize".}
proc SDL_GetWindowSizeInPixels*(window: ptr SDL_Window; w: ptr cint; h: ptr cint): bool {.
    cdecl, importc: "SDL_GetWindowSizeInPixels".}
proc SDL_SetWindowMinimumSize*(window: ptr SDL_Window; min_w: cint; min_h: cint): bool {.
    cdecl, importc: "SDL_SetWindowMinimumSize".}
proc SDL_GetWindowMinimumSize*(window: ptr SDL_Window; w: ptr cint; h: ptr cint): bool {.
    cdecl, importc: "SDL_GetWindowMinimumSize".}
proc SDL_SetWindowMaximumSize*(window: ptr SDL_Window; max_w: cint; max_h: cint): bool {.
    cdecl, importc: "SDL_SetWindowMaximumSize".}
proc SDL_GetWindowMaximumSize*(window: ptr SDL_Window; w: ptr cint; h: ptr cint): bool {.
    cdecl, importc: "SDL_GetWindowMaximumSize".}
proc SDL_SetWindowBordered*(window: ptr SDL_Window; bordered: bool): bool {.
    cdecl, importc: "SDL_SetWindowBordered".}
proc SDL_SetWindowResizable*(window: ptr SDL_Window; resizable: bool): bool {.
    cdecl, importc: "SDL_SetWindowResizable".}
proc SDL_SetWindowAlwaysOnTop*(window: ptr SDL_Window; on_top: bool): bool {.
    cdecl, importc: "SDL_SetWindowAlwaysOnTop".}
proc SDL_ShowWindow*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_ShowWindow".}
proc SDL_HideWindow*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_HideWindow".}
proc SDL_RaiseWindow*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_RaiseWindow".}
proc SDL_MaximizeWindow*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_MaximizeWindow".}
proc SDL_MinimizeWindow*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_MinimizeWindow".}
proc SDL_RestoreWindow*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_RestoreWindow".}
proc SDL_SetWindowFullscreen*(window: ptr SDL_Window; fullscreen: bool): bool {.
    cdecl, importc: "SDL_SetWindowFullscreen".}
proc SDL_SyncWindow*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_SyncWindow".}
proc SDL_WindowHasSurface*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_WindowHasSurface".}
proc SDL_GetWindowSurface*(window: ptr SDL_Window): ptr SDL_Surface {.cdecl,
    importc: "SDL_GetWindowSurface".}
proc SDL_SetWindowSurfaceVSync*(window: ptr SDL_Window; vsync: cint): bool {.
    cdecl, importc: "SDL_SetWindowSurfaceVSync".}
proc SDL_GetWindowSurfaceVSync*(window: ptr SDL_Window; vsync: ptr cint): bool {.
    cdecl, importc: "SDL_GetWindowSurfaceVSync".}
proc SDL_UpdateWindowSurface*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_UpdateWindowSurface".}
proc SDL_UpdateWindowSurfaceRects*(window: ptr SDL_Window; rects: ptr SDL_Rect;
                                   numrects: cint): bool {.cdecl,
    importc: "SDL_UpdateWindowSurfaceRects".}
proc SDL_DestroyWindowSurface*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_DestroyWindowSurface".}
proc SDL_SetWindowKeyboardGrab*(window: ptr SDL_Window; grabbed: bool): bool {.
    cdecl, importc: "SDL_SetWindowKeyboardGrab".}
proc SDL_SetWindowMouseGrab*(window: ptr SDL_Window; grabbed: bool): bool {.
    cdecl, importc: "SDL_SetWindowMouseGrab".}
proc SDL_GetWindowKeyboardGrab*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_GetWindowKeyboardGrab".}
proc SDL_GetWindowMouseGrab*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_GetWindowMouseGrab".}
proc SDL_GetGrabbedWindow*(): ptr SDL_Window {.cdecl,
    importc: "SDL_GetGrabbedWindow".}
proc SDL_SetWindowMouseRect*(window: ptr SDL_Window; rect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_SetWindowMouseRect".}
proc SDL_GetWindowMouseRect*(window: ptr SDL_Window): ptr SDL_Rect {.cdecl,
    importc: "SDL_GetWindowMouseRect".}
proc SDL_SetWindowOpacity*(window: ptr SDL_Window; opacity: cfloat): bool {.
    cdecl, importc: "SDL_SetWindowOpacity".}
proc SDL_GetWindowOpacity*(window: ptr SDL_Window): cfloat {.cdecl,
    importc: "SDL_GetWindowOpacity".}
proc SDL_SetWindowParent*(window: ptr SDL_Window; parent: ptr SDL_Window): bool {.
    cdecl, importc: "SDL_SetWindowParent".}
proc SDL_SetWindowModal*(window: ptr SDL_Window; modal: bool): bool {.cdecl,
    importc: "SDL_SetWindowModal".}
proc SDL_SetWindowFocusable*(window: ptr SDL_Window; focusable: bool): bool {.
    cdecl, importc: "SDL_SetWindowFocusable".}
proc SDL_ShowWindowSystemMenu*(window: ptr SDL_Window; x: cint; y: cint): bool {.
    cdecl, importc: "SDL_ShowWindowSystemMenu".}
proc SDL_SetWindowHitTest*(window: ptr SDL_Window; callback: SDL_HitTest;
                           callback_data: pointer): bool {.cdecl,
    importc: "SDL_SetWindowHitTest".}
proc SDL_SetWindowShape*(window: ptr SDL_Window; shape: ptr SDL_Surface): bool {.
    cdecl, importc: "SDL_SetWindowShape".}
proc SDL_FlashWindow*(window: ptr SDL_Window; operation: SDL_FlashOperation): bool {.
    cdecl, importc: "SDL_FlashWindow".}
proc SDL_DestroyWindow*(window: ptr SDL_Window): void {.cdecl,
    importc: "SDL_DestroyWindow".}
proc SDL_ScreenSaverEnabled*(): bool {.cdecl, importc: "SDL_ScreenSaverEnabled".}
proc SDL_EnableScreenSaver*(): bool {.cdecl, importc: "SDL_EnableScreenSaver".}
proc SDL_DisableScreenSaver*(): bool {.cdecl, importc: "SDL_DisableScreenSaver".}
proc SDL_GL_LoadLibrary*(path: cstring): bool {.cdecl,
    importc: "SDL_GL_LoadLibrary".}
proc SDL_GL_GetProcAddress*(proc_arg: cstring): SDL_FunctionPointer {.cdecl,
    importc: "SDL_GL_GetProcAddress".}
proc SDL_EGL_GetProcAddress*(proc_arg: cstring): SDL_FunctionPointer {.cdecl,
    importc: "SDL_EGL_GetProcAddress".}
proc SDL_GL_UnloadLibrary*(): void {.cdecl, importc: "SDL_GL_UnloadLibrary".}
proc SDL_GL_ExtensionSupported*(extension: cstring): bool {.cdecl,
    importc: "SDL_GL_ExtensionSupported".}
proc SDL_GL_ResetAttributes*(): void {.cdecl, importc: "SDL_GL_ResetAttributes".}
proc SDL_GL_SetAttribute*(attr: SDL_GLAttr_typedef; value: cint): bool {.cdecl,
    importc: "SDL_GL_SetAttribute".}
proc SDL_GL_GetAttribute*(attr: SDL_GLAttr_typedef; value: ptr cint): bool {.
    cdecl, importc: "SDL_GL_GetAttribute".}
proc SDL_GL_CreateContext*(window: ptr SDL_Window): SDL_GLContext {.cdecl,
    importc: "SDL_GL_CreateContext".}
proc SDL_GL_MakeCurrent*(window: ptr SDL_Window; context: SDL_GLContext): bool {.
    cdecl, importc: "SDL_GL_MakeCurrent".}
proc SDL_GL_GetCurrentWindow*(): ptr SDL_Window {.cdecl,
    importc: "SDL_GL_GetCurrentWindow".}
proc SDL_GL_GetCurrentContext*(): SDL_GLContext {.cdecl,
    importc: "SDL_GL_GetCurrentContext".}
proc SDL_EGL_GetCurrentDisplay*(): SDL_EGLDisplay {.cdecl,
    importc: "SDL_EGL_GetCurrentDisplay".}
proc SDL_EGL_GetCurrentConfig*(): SDL_EGLConfig {.cdecl,
    importc: "SDL_EGL_GetCurrentConfig".}
proc SDL_EGL_GetWindowSurface*(window: ptr SDL_Window): SDL_EGLSurface {.cdecl,
    importc: "SDL_EGL_GetWindowSurface".}
proc SDL_EGL_SetAttributeCallbacks*(platformAttribCallback: SDL_EGLAttribArrayCallback;
    surfaceAttribCallback: SDL_EGLIntArrayCallback; contextAttribCallback: SDL_EGLIntArrayCallback;
                                    userdata: pointer): void {.cdecl,
    importc: "SDL_EGL_SetAttributeCallbacks".}
proc SDL_GL_SetSwapInterval*(interval: cint): bool {.cdecl,
    importc: "SDL_GL_SetSwapInterval".}
proc SDL_GL_GetSwapInterval*(interval: ptr cint): bool {.cdecl,
    importc: "SDL_GL_GetSwapInterval".}
proc SDL_GL_SwapWindow*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_GL_SwapWindow".}
proc SDL_GL_DestroyContext*(context: SDL_GLContext): bool {.cdecl,
    importc: "SDL_GL_DestroyContext".}
proc SDL_ShowOpenFileDialog*(callback: SDL_DialogFileCallback;
                             userdata: pointer; window: ptr SDL_Window;
                             filters: ptr SDL_DialogFileFilter; nfilters: cint;
                             default_location: cstring; allow_many: bool): void {.
    cdecl, importc: "SDL_ShowOpenFileDialog".}
proc SDL_ShowSaveFileDialog*(callback: SDL_DialogFileCallback;
                             userdata: pointer; window: ptr SDL_Window;
                             filters: ptr SDL_DialogFileFilter; nfilters: cint;
                             default_location: cstring): void {.cdecl,
    importc: "SDL_ShowSaveFileDialog".}
proc SDL_ShowOpenFolderDialog*(callback: SDL_DialogFileCallback;
                               userdata: pointer; window: ptr SDL_Window;
                               default_location: cstring; allow_many: bool): void {.
    cdecl, importc: "SDL_ShowOpenFolderDialog".}
proc SDL_GUIDToString*(guid: SDL_GUID; pszGUID: cstring; cbGUID: cint): void {.
    cdecl, importc: "SDL_GUIDToString".}
proc SDL_StringToGUID*(pchGUID: cstring): SDL_GUID {.cdecl,
    importc: "SDL_StringToGUID".}
proc SDL_GetPowerInfo*(seconds: ptr cint; percent: ptr cint): SDL_PowerState {.
    cdecl, importc: "SDL_GetPowerInfo".}
proc SDL_GetSensors*(count: ptr cint): ptr SDL_SensorID {.cdecl,
    importc: "SDL_GetSensors".}
proc SDL_GetSensorNameForID*(instance_id: SDL_SensorID): cstring {.cdecl,
    importc: "SDL_GetSensorNameForID".}
proc SDL_GetSensorTypeForID*(instance_id: SDL_SensorID): SDL_SensorType {.cdecl,
    importc: "SDL_GetSensorTypeForID".}
proc SDL_GetSensorNonPortableTypeForID*(instance_id: SDL_SensorID): cint {.
    cdecl, importc: "SDL_GetSensorNonPortableTypeForID".}
proc SDL_OpenSensor*(instance_id: SDL_SensorID): ptr SDL_Sensor {.cdecl,
    importc: "SDL_OpenSensor".}
proc SDL_GetSensorFromID*(instance_id: SDL_SensorID): ptr SDL_Sensor {.cdecl,
    importc: "SDL_GetSensorFromID".}
proc SDL_GetSensorProperties*(sensor: ptr SDL_Sensor): SDL_PropertiesID {.cdecl,
    importc: "SDL_GetSensorProperties".}
proc SDL_GetSensorName*(sensor: ptr SDL_Sensor): cstring {.cdecl,
    importc: "SDL_GetSensorName".}
proc SDL_GetSensorType*(sensor: ptr SDL_Sensor): SDL_SensorType {.cdecl,
    importc: "SDL_GetSensorType".}
proc SDL_GetSensorNonPortableType*(sensor: ptr SDL_Sensor): cint {.cdecl,
    importc: "SDL_GetSensorNonPortableType".}
proc SDL_GetSensorID*(sensor: ptr SDL_Sensor): SDL_SensorID {.cdecl,
    importc: "SDL_GetSensorID".}
proc SDL_GetSensorData*(sensor: ptr SDL_Sensor; data: ptr cfloat;
                        num_values: cint): bool {.cdecl,
    importc: "SDL_GetSensorData".}
proc SDL_CloseSensor*(sensor: ptr SDL_Sensor): void {.cdecl,
    importc: "SDL_CloseSensor".}
proc SDL_UpdateSensors*(): void {.cdecl, importc: "SDL_UpdateSensors".}
proc SDL_LockJoysticks*(): void {.cdecl, importc: "SDL_LockJoysticks".}
proc SDL_UnlockJoysticks*(): void {.cdecl, importc: "SDL_UnlockJoysticks".}
proc SDL_HasJoystick*(): bool {.cdecl, importc: "SDL_HasJoystick".}
proc SDL_GetJoysticks*(count: ptr cint): ptr SDL_JoystickID {.cdecl,
    importc: "SDL_GetJoysticks".}
proc SDL_GetJoystickNameForID*(instance_id: SDL_JoystickID): cstring {.cdecl,
    importc: "SDL_GetJoystickNameForID".}
proc SDL_GetJoystickPathForID*(instance_id: SDL_JoystickID): cstring {.cdecl,
    importc: "SDL_GetJoystickPathForID".}
proc SDL_GetJoystickPlayerIndexForID*(instance_id: SDL_JoystickID): cint {.
    cdecl, importc: "SDL_GetJoystickPlayerIndexForID".}
proc SDL_GetJoystickGUIDForID*(instance_id: SDL_JoystickID): SDL_GUID {.cdecl,
    importc: "SDL_GetJoystickGUIDForID".}
proc SDL_GetJoystickVendorForID*(instance_id: SDL_JoystickID): Uint16 {.cdecl,
    importc: "SDL_GetJoystickVendorForID".}
proc SDL_GetJoystickProductForID*(instance_id: SDL_JoystickID): Uint16 {.cdecl,
    importc: "SDL_GetJoystickProductForID".}
proc SDL_GetJoystickProductVersionForID*(instance_id: SDL_JoystickID): Uint16 {.
    cdecl, importc: "SDL_GetJoystickProductVersionForID".}
proc SDL_GetJoystickTypeForID*(instance_id: SDL_JoystickID): SDL_JoystickType {.
    cdecl, importc: "SDL_GetJoystickTypeForID".}
proc SDL_OpenJoystick*(instance_id: SDL_JoystickID): ptr SDL_Joystick {.cdecl,
    importc: "SDL_OpenJoystick".}
proc SDL_GetJoystickFromID*(instance_id: SDL_JoystickID): ptr SDL_Joystick {.
    cdecl, importc: "SDL_GetJoystickFromID".}
proc SDL_GetJoystickFromPlayerIndex*(player_index: cint): ptr SDL_Joystick {.
    cdecl, importc: "SDL_GetJoystickFromPlayerIndex".}
proc SDL_AttachVirtualJoystick*(desc: ptr SDL_VirtualJoystickDesc): SDL_JoystickID {.
    cdecl, importc: "SDL_AttachVirtualJoystick".}
proc SDL_DetachVirtualJoystick*(instance_id: SDL_JoystickID): bool {.cdecl,
    importc: "SDL_DetachVirtualJoystick".}
proc SDL_IsJoystickVirtual*(instance_id: SDL_JoystickID): bool {.cdecl,
    importc: "SDL_IsJoystickVirtual".}
proc SDL_SetJoystickVirtualAxis*(joystick: ptr SDL_Joystick; axis: cint;
                                 value: Sint16): bool {.cdecl,
    importc: "SDL_SetJoystickVirtualAxis".}
proc SDL_SetJoystickVirtualBall*(joystick: ptr SDL_Joystick; ball: cint;
                                 xrel: Sint16; yrel: Sint16): bool {.cdecl,
    importc: "SDL_SetJoystickVirtualBall".}
proc SDL_SetJoystickVirtualButton*(joystick: ptr SDL_Joystick; button: cint;
                                   down: bool): bool {.cdecl,
    importc: "SDL_SetJoystickVirtualButton".}
proc SDL_SetJoystickVirtualHat*(joystick: ptr SDL_Joystick; hat: cint;
                                value: Uint8): bool {.cdecl,
    importc: "SDL_SetJoystickVirtualHat".}
proc SDL_SetJoystickVirtualTouchpad*(joystick: ptr SDL_Joystick; touchpad: cint;
                                     finger: cint; down: bool; x: cfloat;
                                     y: cfloat; pressure: cfloat): bool {.cdecl,
    importc: "SDL_SetJoystickVirtualTouchpad".}
proc SDL_SendJoystickVirtualSensorData*(joystick: ptr SDL_Joystick;
                                        type_arg: SDL_SensorType;
                                        sensor_timestamp: Uint64;
                                        data: ptr cfloat; num_values: cint): bool {.
    cdecl, importc: "SDL_SendJoystickVirtualSensorData".}
proc SDL_GetJoystickProperties*(joystick: ptr SDL_Joystick): SDL_PropertiesID {.
    cdecl, importc: "SDL_GetJoystickProperties".}
proc SDL_GetJoystickName*(joystick: ptr SDL_Joystick): cstring {.cdecl,
    importc: "SDL_GetJoystickName".}
proc SDL_GetJoystickPath*(joystick: ptr SDL_Joystick): cstring {.cdecl,
    importc: "SDL_GetJoystickPath".}
proc SDL_GetJoystickPlayerIndex*(joystick: ptr SDL_Joystick): cint {.cdecl,
    importc: "SDL_GetJoystickPlayerIndex".}
proc SDL_SetJoystickPlayerIndex*(joystick: ptr SDL_Joystick; player_index: cint): bool {.
    cdecl, importc: "SDL_SetJoystickPlayerIndex".}
proc SDL_GetJoystickGUID*(joystick: ptr SDL_Joystick): SDL_GUID {.cdecl,
    importc: "SDL_GetJoystickGUID".}
proc SDL_GetJoystickVendor*(joystick: ptr SDL_Joystick): Uint16 {.cdecl,
    importc: "SDL_GetJoystickVendor".}
proc SDL_GetJoystickProduct*(joystick: ptr SDL_Joystick): Uint16 {.cdecl,
    importc: "SDL_GetJoystickProduct".}
proc SDL_GetJoystickProductVersion*(joystick: ptr SDL_Joystick): Uint16 {.cdecl,
    importc: "SDL_GetJoystickProductVersion".}
proc SDL_GetJoystickFirmwareVersion*(joystick: ptr SDL_Joystick): Uint16 {.
    cdecl, importc: "SDL_GetJoystickFirmwareVersion".}
proc SDL_GetJoystickSerial*(joystick: ptr SDL_Joystick): cstring {.cdecl,
    importc: "SDL_GetJoystickSerial".}
proc SDL_GetJoystickType*(joystick: ptr SDL_Joystick): SDL_JoystickType {.cdecl,
    importc: "SDL_GetJoystickType".}
proc SDL_GetJoystickGUIDInfo*(guid: SDL_GUID; vendor: ptr Uint16;
                              product: ptr Uint16; version: ptr Uint16;
                              crc16: ptr Uint16): void {.cdecl,
    importc: "SDL_GetJoystickGUIDInfo".}
proc SDL_JoystickConnected*(joystick: ptr SDL_Joystick): bool {.cdecl,
    importc: "SDL_JoystickConnected".}
proc SDL_GetJoystickID*(joystick: ptr SDL_Joystick): SDL_JoystickID {.cdecl,
    importc: "SDL_GetJoystickID".}
proc SDL_GetNumJoystickAxes*(joystick: ptr SDL_Joystick): cint {.cdecl,
    importc: "SDL_GetNumJoystickAxes".}
proc SDL_GetNumJoystickBalls*(joystick: ptr SDL_Joystick): cint {.cdecl,
    importc: "SDL_GetNumJoystickBalls".}
proc SDL_GetNumJoystickHats*(joystick: ptr SDL_Joystick): cint {.cdecl,
    importc: "SDL_GetNumJoystickHats".}
proc SDL_GetNumJoystickButtons*(joystick: ptr SDL_Joystick): cint {.cdecl,
    importc: "SDL_GetNumJoystickButtons".}
proc SDL_SetJoystickEventsEnabled*(enabled: bool): void {.cdecl,
    importc: "SDL_SetJoystickEventsEnabled".}
proc SDL_JoystickEventsEnabled*(): bool {.cdecl,
    importc: "SDL_JoystickEventsEnabled".}
proc SDL_UpdateJoysticks*(): void {.cdecl, importc: "SDL_UpdateJoysticks".}
proc SDL_GetJoystickAxis*(joystick: ptr SDL_Joystick; axis: cint): Sint16 {.
    cdecl, importc: "SDL_GetJoystickAxis".}
proc SDL_GetJoystickAxisInitialState*(joystick: ptr SDL_Joystick; axis: cint;
                                      state: ptr Sint16): bool {.cdecl,
    importc: "SDL_GetJoystickAxisInitialState".}
proc SDL_GetJoystickBall*(joystick: ptr SDL_Joystick; ball: cint; dx: ptr cint;
                          dy: ptr cint): bool {.cdecl,
    importc: "SDL_GetJoystickBall".}
proc SDL_GetJoystickHat*(joystick: ptr SDL_Joystick; hat: cint): Uint8 {.cdecl,
    importc: "SDL_GetJoystickHat".}
proc SDL_GetJoystickButton*(joystick: ptr SDL_Joystick; button: cint): bool {.
    cdecl, importc: "SDL_GetJoystickButton".}
proc SDL_RumbleJoystick*(joystick: ptr SDL_Joystick;
                         low_frequency_rumble: Uint16;
                         high_frequency_rumble: Uint16; duration_ms: Uint32): bool {.
    cdecl, importc: "SDL_RumbleJoystick".}
proc SDL_RumbleJoystickTriggers*(joystick: ptr SDL_Joystick;
                                 left_rumble: Uint16; right_rumble: Uint16;
                                 duration_ms: Uint32): bool {.cdecl,
    importc: "SDL_RumbleJoystickTriggers".}
proc SDL_SetJoystickLED*(joystick: ptr SDL_Joystick; red: Uint8; green: Uint8;
                         blue: Uint8): bool {.cdecl,
    importc: "SDL_SetJoystickLED".}
proc SDL_SendJoystickEffect*(joystick: ptr SDL_Joystick; data: pointer;
                             size: cint): bool {.cdecl,
    importc: "SDL_SendJoystickEffect".}
proc SDL_CloseJoystick*(joystick: ptr SDL_Joystick): void {.cdecl,
    importc: "SDL_CloseJoystick".}
proc SDL_GetJoystickConnectionState*(joystick: ptr SDL_Joystick): SDL_JoystickConnectionState {.
    cdecl, importc: "SDL_GetJoystickConnectionState".}
proc SDL_GetJoystickPowerInfo*(joystick: ptr SDL_Joystick; percent: ptr cint): SDL_PowerState {.
    cdecl, importc: "SDL_GetJoystickPowerInfo".}
proc SDL_AddGamepadMapping*(mapping: cstring): cint {.cdecl,
    importc: "SDL_AddGamepadMapping".}
proc SDL_AddGamepadMappingsFromIO*(src: ptr SDL_IOStream; closeio: bool): cint {.
    cdecl, importc: "SDL_AddGamepadMappingsFromIO".}
proc SDL_AddGamepadMappingsFromFile*(file: cstring): cint {.cdecl,
    importc: "SDL_AddGamepadMappingsFromFile".}
proc SDL_ReloadGamepadMappings*(): bool {.cdecl,
    importc: "SDL_ReloadGamepadMappings".}
proc SDL_GetGamepadMappings*(count: ptr cint): ptr cstring {.cdecl,
    importc: "SDL_GetGamepadMappings".}
proc SDL_GetGamepadMappingForGUID*(guid: SDL_GUID): cstring {.cdecl,
    importc: "SDL_GetGamepadMappingForGUID".}
proc SDL_GetGamepadMapping*(gamepad: ptr SDL_Gamepad): cstring {.cdecl,
    importc: "SDL_GetGamepadMapping".}
proc SDL_SetGamepadMapping*(instance_id: SDL_JoystickID; mapping: cstring): bool {.
    cdecl, importc: "SDL_SetGamepadMapping".}
proc SDL_HasGamepad*(): bool {.cdecl, importc: "SDL_HasGamepad".}
proc SDL_GetGamepads*(count: ptr cint): ptr SDL_JoystickID {.cdecl,
    importc: "SDL_GetGamepads".}
proc SDL_IsGamepad*(instance_id: SDL_JoystickID): bool {.cdecl,
    importc: "SDL_IsGamepad".}
proc SDL_GetGamepadNameForID*(instance_id: SDL_JoystickID): cstring {.cdecl,
    importc: "SDL_GetGamepadNameForID".}
proc SDL_GetGamepadPathForID*(instance_id: SDL_JoystickID): cstring {.cdecl,
    importc: "SDL_GetGamepadPathForID".}
proc SDL_GetGamepadPlayerIndexForID*(instance_id: SDL_JoystickID): cint {.cdecl,
    importc: "SDL_GetGamepadPlayerIndexForID".}
proc SDL_GetGamepadGUIDForID*(instance_id: SDL_JoystickID): SDL_GUID {.cdecl,
    importc: "SDL_GetGamepadGUIDForID".}
proc SDL_GetGamepadVendorForID*(instance_id: SDL_JoystickID): Uint16 {.cdecl,
    importc: "SDL_GetGamepadVendorForID".}
proc SDL_GetGamepadProductForID*(instance_id: SDL_JoystickID): Uint16 {.cdecl,
    importc: "SDL_GetGamepadProductForID".}
proc SDL_GetGamepadProductVersionForID*(instance_id: SDL_JoystickID): Uint16 {.
    cdecl, importc: "SDL_GetGamepadProductVersionForID".}
proc SDL_GetGamepadTypeForID*(instance_id: SDL_JoystickID): SDL_GamepadType {.
    cdecl, importc: "SDL_GetGamepadTypeForID".}
proc SDL_GetRealGamepadTypeForID*(instance_id: SDL_JoystickID): SDL_GamepadType {.
    cdecl, importc: "SDL_GetRealGamepadTypeForID".}
proc SDL_GetGamepadMappingForID*(instance_id: SDL_JoystickID): cstring {.cdecl,
    importc: "SDL_GetGamepadMappingForID".}
proc SDL_OpenGamepad*(instance_id: SDL_JoystickID): ptr SDL_Gamepad {.cdecl,
    importc: "SDL_OpenGamepad".}
proc SDL_GetGamepadFromID*(instance_id: SDL_JoystickID): ptr SDL_Gamepad {.
    cdecl, importc: "SDL_GetGamepadFromID".}
proc SDL_GetGamepadFromPlayerIndex*(player_index: cint): ptr SDL_Gamepad {.
    cdecl, importc: "SDL_GetGamepadFromPlayerIndex".}
proc SDL_GetGamepadProperties*(gamepad: ptr SDL_Gamepad): SDL_PropertiesID {.
    cdecl, importc: "SDL_GetGamepadProperties".}
proc SDL_GetGamepadID*(gamepad: ptr SDL_Gamepad): SDL_JoystickID {.cdecl,
    importc: "SDL_GetGamepadID".}
proc SDL_GetGamepadName*(gamepad: ptr SDL_Gamepad): cstring {.cdecl,
    importc: "SDL_GetGamepadName".}
proc SDL_GetGamepadPath*(gamepad: ptr SDL_Gamepad): cstring {.cdecl,
    importc: "SDL_GetGamepadPath".}
proc SDL_GetGamepadType*(gamepad: ptr SDL_Gamepad): SDL_GamepadType {.cdecl,
    importc: "SDL_GetGamepadType".}
proc SDL_GetRealGamepadType*(gamepad: ptr SDL_Gamepad): SDL_GamepadType {.cdecl,
    importc: "SDL_GetRealGamepadType".}
proc SDL_GetGamepadPlayerIndex*(gamepad: ptr SDL_Gamepad): cint {.cdecl,
    importc: "SDL_GetGamepadPlayerIndex".}
proc SDL_SetGamepadPlayerIndex*(gamepad: ptr SDL_Gamepad; player_index: cint): bool {.
    cdecl, importc: "SDL_SetGamepadPlayerIndex".}
proc SDL_GetGamepadVendor*(gamepad: ptr SDL_Gamepad): Uint16 {.cdecl,
    importc: "SDL_GetGamepadVendor".}
proc SDL_GetGamepadProduct*(gamepad: ptr SDL_Gamepad): Uint16 {.cdecl,
    importc: "SDL_GetGamepadProduct".}
proc SDL_GetGamepadProductVersion*(gamepad: ptr SDL_Gamepad): Uint16 {.cdecl,
    importc: "SDL_GetGamepadProductVersion".}
proc SDL_GetGamepadFirmwareVersion*(gamepad: ptr SDL_Gamepad): Uint16 {.cdecl,
    importc: "SDL_GetGamepadFirmwareVersion".}
proc SDL_GetGamepadSerial*(gamepad: ptr SDL_Gamepad): cstring {.cdecl,
    importc: "SDL_GetGamepadSerial".}
proc SDL_GetGamepadSteamHandle*(gamepad: ptr SDL_Gamepad): Uint64 {.cdecl,
    importc: "SDL_GetGamepadSteamHandle".}
proc SDL_GetGamepadConnectionState*(gamepad: ptr SDL_Gamepad): SDL_JoystickConnectionState {.
    cdecl, importc: "SDL_GetGamepadConnectionState".}
proc SDL_GetGamepadPowerInfo*(gamepad: ptr SDL_Gamepad; percent: ptr cint): SDL_PowerState {.
    cdecl, importc: "SDL_GetGamepadPowerInfo".}
proc SDL_GamepadConnected*(gamepad: ptr SDL_Gamepad): bool {.cdecl,
    importc: "SDL_GamepadConnected".}
proc SDL_GetGamepadJoystick*(gamepad: ptr SDL_Gamepad): ptr SDL_Joystick {.
    cdecl, importc: "SDL_GetGamepadJoystick".}
proc SDL_SetGamepadEventsEnabled*(enabled: bool): void {.cdecl,
    importc: "SDL_SetGamepadEventsEnabled".}
proc SDL_GamepadEventsEnabled*(): bool {.cdecl,
    importc: "SDL_GamepadEventsEnabled".}
proc SDL_GetGamepadBindings*(gamepad: ptr SDL_Gamepad; count: ptr cint): ptr ptr SDL_GamepadBinding {.
    cdecl, importc: "SDL_GetGamepadBindings".}
proc SDL_UpdateGamepads*(): void {.cdecl, importc: "SDL_UpdateGamepads".}
proc SDL_GetGamepadTypeFromString*(str: cstring): SDL_GamepadType {.cdecl,
    importc: "SDL_GetGamepadTypeFromString".}
proc SDL_GetGamepadStringForType*(type_arg: SDL_GamepadType): cstring {.cdecl,
    importc: "SDL_GetGamepadStringForType".}
proc SDL_GetGamepadAxisFromString*(str: cstring): SDL_GamepadAxis {.cdecl,
    importc: "SDL_GetGamepadAxisFromString".}
proc SDL_GetGamepadStringForAxis*(axis: SDL_GamepadAxis): cstring {.cdecl,
    importc: "SDL_GetGamepadStringForAxis".}
proc SDL_GamepadHasAxis*(gamepad: ptr SDL_Gamepad; axis: SDL_GamepadAxis): bool {.
    cdecl, importc: "SDL_GamepadHasAxis".}
proc SDL_GetGamepadAxis*(gamepad: ptr SDL_Gamepad; axis: SDL_GamepadAxis): Sint16 {.
    cdecl, importc: "SDL_GetGamepadAxis".}
proc SDL_GetGamepadButtonFromString*(str: cstring): SDL_GamepadButton {.cdecl,
    importc: "SDL_GetGamepadButtonFromString".}
proc SDL_GetGamepadStringForButton*(button: SDL_GamepadButton): cstring {.cdecl,
    importc: "SDL_GetGamepadStringForButton".}
proc SDL_GamepadHasButton*(gamepad: ptr SDL_Gamepad; button: SDL_GamepadButton): bool {.
    cdecl, importc: "SDL_GamepadHasButton".}
proc SDL_GetGamepadButton*(gamepad: ptr SDL_Gamepad; button: SDL_GamepadButton): bool {.
    cdecl, importc: "SDL_GetGamepadButton".}
proc SDL_GetGamepadButtonLabelForType*(type_arg: SDL_GamepadType;
                                       button: SDL_GamepadButton): SDL_GamepadButtonLabel {.
    cdecl, importc: "SDL_GetGamepadButtonLabelForType".}
proc SDL_GetGamepadButtonLabel*(gamepad: ptr SDL_Gamepad;
                                button: SDL_GamepadButton): SDL_GamepadButtonLabel {.
    cdecl, importc: "SDL_GetGamepadButtonLabel".}
proc SDL_GetNumGamepadTouchpads*(gamepad: ptr SDL_Gamepad): cint {.cdecl,
    importc: "SDL_GetNumGamepadTouchpads".}
proc SDL_GetNumGamepadTouchpadFingers*(gamepad: ptr SDL_Gamepad; touchpad: cint): cint {.
    cdecl, importc: "SDL_GetNumGamepadTouchpadFingers".}
proc SDL_GetGamepadTouchpadFinger*(gamepad: ptr SDL_Gamepad; touchpad: cint;
                                   finger: cint; down: ptr bool; x: ptr cfloat;
                                   y: ptr cfloat; pressure: ptr cfloat): bool {.
    cdecl, importc: "SDL_GetGamepadTouchpadFinger".}
proc SDL_GamepadHasSensor*(gamepad: ptr SDL_Gamepad; type_arg: SDL_SensorType): bool {.
    cdecl, importc: "SDL_GamepadHasSensor".}
proc SDL_SetGamepadSensorEnabled*(gamepad: ptr SDL_Gamepad;
                                  type_arg: SDL_SensorType; enabled: bool): bool {.
    cdecl, importc: "SDL_SetGamepadSensorEnabled".}
proc SDL_GamepadSensorEnabled*(gamepad: ptr SDL_Gamepad;
                               type_arg: SDL_SensorType): bool {.cdecl,
    importc: "SDL_GamepadSensorEnabled".}
proc SDL_GetGamepadSensorDataRate*(gamepad: ptr SDL_Gamepad;
                                   type_arg: SDL_SensorType): cfloat {.cdecl,
    importc: "SDL_GetGamepadSensorDataRate".}
proc SDL_GetGamepadSensorData*(gamepad: ptr SDL_Gamepad;
                               type_arg: SDL_SensorType; data: ptr cfloat;
                               num_values: cint): bool {.cdecl,
    importc: "SDL_GetGamepadSensorData".}
proc SDL_RumbleGamepad*(gamepad: ptr SDL_Gamepad; low_frequency_rumble: Uint16;
                        high_frequency_rumble: Uint16; duration_ms: Uint32): bool {.
    cdecl, importc: "SDL_RumbleGamepad".}
proc SDL_RumbleGamepadTriggers*(gamepad: ptr SDL_Gamepad; left_rumble: Uint16;
                                right_rumble: Uint16; duration_ms: Uint32): bool {.
    cdecl, importc: "SDL_RumbleGamepadTriggers".}
proc SDL_SetGamepadLED*(gamepad: ptr SDL_Gamepad; red: Uint8; green: Uint8;
                        blue: Uint8): bool {.cdecl, importc: "SDL_SetGamepadLED".}
proc SDL_SendGamepadEffect*(gamepad: ptr SDL_Gamepad; data: pointer; size: cint): bool {.
    cdecl, importc: "SDL_SendGamepadEffect".}
proc SDL_CloseGamepad*(gamepad: ptr SDL_Gamepad): void {.cdecl,
    importc: "SDL_CloseGamepad".}
proc SDL_GetGamepadAppleSFSymbolsNameForButton*(gamepad: ptr SDL_Gamepad;
    button: SDL_GamepadButton): cstring {.cdecl,
    importc: "SDL_GetGamepadAppleSFSymbolsNameForButton".}
proc SDL_GetGamepadAppleSFSymbolsNameForAxis*(gamepad: ptr SDL_Gamepad;
    axis: SDL_GamepadAxis): cstring {.cdecl, importc: "SDL_GetGamepadAppleSFSymbolsNameForAxis".}
proc SDL_HasKeyboard*(): bool {.cdecl, importc: "SDL_HasKeyboard".}
proc SDL_GetKeyboards*(count: ptr cint): ptr SDL_KeyboardID {.cdecl,
    importc: "SDL_GetKeyboards".}
proc SDL_GetKeyboardNameForID*(instance_id: SDL_KeyboardID): cstring {.cdecl,
    importc: "SDL_GetKeyboardNameForID".}
proc SDL_GetKeyboardFocus*(): ptr SDL_Window {.cdecl,
    importc: "SDL_GetKeyboardFocus".}
proc SDL_GetKeyboardState*(numkeys: ptr cint): ptr bool {.cdecl,
    importc: "SDL_GetKeyboardState".}
proc SDL_ResetKeyboard*(): void {.cdecl, importc: "SDL_ResetKeyboard".}
proc SDL_GetModState*(): SDL_Keymod {.cdecl, importc: "SDL_GetModState".}
proc SDL_SetModState*(modstate: SDL_Keymod): void {.cdecl,
    importc: "SDL_SetModState".}
proc SDL_GetKeyFromScancode*(scancode: SDL_Scancode; modstate: SDL_Keymod;
                             key_event: bool): SDL_Keycode {.cdecl,
    importc: "SDL_GetKeyFromScancode".}
proc SDL_GetScancodeFromKey*(key: SDL_Keycode; modstate: ptr SDL_Keymod): SDL_Scancode {.
    cdecl, importc: "SDL_GetScancodeFromKey".}
proc SDL_SetScancodeName*(scancode: SDL_Scancode; name: cstring): bool {.cdecl,
    importc: "SDL_SetScancodeName".}
proc SDL_GetScancodeName*(scancode: SDL_Scancode): cstring {.cdecl,
    importc: "SDL_GetScancodeName".}
proc SDL_GetScancodeFromName*(name: cstring): SDL_Scancode {.cdecl,
    importc: "SDL_GetScancodeFromName".}
proc SDL_GetKeyName*(key: SDL_Keycode): cstring {.cdecl,
    importc: "SDL_GetKeyName".}
proc SDL_GetKeyFromName*(name: cstring): SDL_Keycode {.cdecl,
    importc: "SDL_GetKeyFromName".}
proc SDL_StartTextInput*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_StartTextInput".}
proc SDL_StartTextInputWithProperties*(window: ptr SDL_Window;
                                       props: SDL_PropertiesID): bool {.cdecl,
    importc: "SDL_StartTextInputWithProperties".}
proc SDL_TextInputActive*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_TextInputActive".}
proc SDL_StopTextInput*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_StopTextInput".}
proc SDL_ClearComposition*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_ClearComposition".}
proc SDL_SetTextInputArea*(window: ptr SDL_Window; rect: ptr SDL_Rect;
                           cursor: cint): bool {.cdecl,
    importc: "SDL_SetTextInputArea".}
proc SDL_GetTextInputArea*(window: ptr SDL_Window; rect: ptr SDL_Rect;
                           cursor: ptr cint): bool {.cdecl,
    importc: "SDL_GetTextInputArea".}
proc SDL_HasScreenKeyboardSupport*(): bool {.cdecl,
    importc: "SDL_HasScreenKeyboardSupport".}
proc SDL_ScreenKeyboardShown*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_ScreenKeyboardShown".}
proc SDL_HasMouse*(): bool {.cdecl, importc: "SDL_HasMouse".}
proc SDL_GetMice*(count: ptr cint): ptr SDL_MouseID {.cdecl,
    importc: "SDL_GetMice".}
proc SDL_GetMouseNameForID*(instance_id: SDL_MouseID): cstring {.cdecl,
    importc: "SDL_GetMouseNameForID".}
proc SDL_GetMouseFocus*(): ptr SDL_Window {.cdecl, importc: "SDL_GetMouseFocus".}
proc SDL_GetMouseState*(x: ptr cfloat; y: ptr cfloat): SDL_MouseButtonFlags {.
    cdecl, importc: "SDL_GetMouseState".}
proc SDL_GetGlobalMouseState*(x: ptr cfloat; y: ptr cfloat): SDL_MouseButtonFlags {.
    cdecl, importc: "SDL_GetGlobalMouseState".}
proc SDL_GetRelativeMouseState*(x: ptr cfloat; y: ptr cfloat): SDL_MouseButtonFlags {.
    cdecl, importc: "SDL_GetRelativeMouseState".}
proc SDL_WarpMouseInWindow*(window: ptr SDL_Window; x: cfloat; y: cfloat): void {.
    cdecl, importc: "SDL_WarpMouseInWindow".}
proc SDL_WarpMouseGlobal*(x: cfloat; y: cfloat): bool {.cdecl,
    importc: "SDL_WarpMouseGlobal".}
proc SDL_SetWindowRelativeMouseMode*(window: ptr SDL_Window; enabled: bool): bool {.
    cdecl, importc: "SDL_SetWindowRelativeMouseMode".}
proc SDL_GetWindowRelativeMouseMode*(window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_GetWindowRelativeMouseMode".}
proc SDL_CaptureMouse*(enabled: bool): bool {.cdecl, importc: "SDL_CaptureMouse".}
proc SDL_CreateCursor*(data: ptr Uint8; mask: ptr Uint8; w: cint; h: cint;
                       hot_x: cint; hot_y: cint): ptr SDL_Cursor {.cdecl,
    importc: "SDL_CreateCursor".}
proc SDL_CreateColorCursor*(surface: ptr SDL_Surface; hot_x: cint; hot_y: cint): ptr SDL_Cursor {.
    cdecl, importc: "SDL_CreateColorCursor".}
proc SDL_CreateSystemCursor*(id: SDL_SystemCursor): ptr SDL_Cursor {.cdecl,
    importc: "SDL_CreateSystemCursor".}
proc SDL_SetCursor*(cursor: ptr SDL_Cursor): bool {.cdecl,
    importc: "SDL_SetCursor".}
proc SDL_GetCursor*(): ptr SDL_Cursor {.cdecl, importc: "SDL_GetCursor".}
proc SDL_GetDefaultCursor*(): ptr SDL_Cursor {.cdecl,
    importc: "SDL_GetDefaultCursor".}
proc SDL_DestroyCursor*(cursor: ptr SDL_Cursor): void {.cdecl,
    importc: "SDL_DestroyCursor".}
proc SDL_ShowCursor*(): bool {.cdecl, importc: "SDL_ShowCursor".}
proc SDL_HideCursor*(): bool {.cdecl, importc: "SDL_HideCursor".}
proc SDL_CursorVisible*(): bool {.cdecl, importc: "SDL_CursorVisible".}
proc SDL_GetTouchDevices*(count: ptr cint): ptr SDL_TouchID {.cdecl,
    importc: "SDL_GetTouchDevices".}
proc SDL_GetTouchDeviceName*(touchID: SDL_TouchID): cstring {.cdecl,
    importc: "SDL_GetTouchDeviceName".}
proc SDL_GetTouchDeviceType*(touchID: SDL_TouchID): SDL_TouchDeviceType {.cdecl,
    importc: "SDL_GetTouchDeviceType".}
proc SDL_GetTouchFingers*(touchID: SDL_TouchID; count: ptr cint): ptr ptr SDL_Finger {.
    cdecl, importc: "SDL_GetTouchFingers".}
proc SDL_PumpEvents*(): void {.cdecl, importc: "SDL_PumpEvents".}
proc SDL_PeepEvents*(events: ptr SDL_Event; numevents: cint;
                     action: SDL_EventAction_typedef; minType: Uint32;
                     maxType: Uint32): cint {.cdecl, importc: "SDL_PeepEvents".}
proc SDL_HasEvent*(type_arg: Uint32): bool {.cdecl, importc: "SDL_HasEvent".}
proc SDL_HasEvents*(minType: Uint32; maxType: Uint32): bool {.cdecl,
    importc: "SDL_HasEvents".}
proc SDL_FlushEvent*(type_arg: Uint32): void {.cdecl, importc: "SDL_FlushEvent".}
proc SDL_FlushEvents*(minType: Uint32; maxType: Uint32): void {.cdecl,
    importc: "SDL_FlushEvents".}
proc SDL_PollEvent*(event: ptr SDL_Event): bool {.cdecl,
    importc: "SDL_PollEvent".}
proc SDL_WaitEvent*(event: ptr SDL_Event): bool {.cdecl,
    importc: "SDL_WaitEvent".}
proc SDL_WaitEventTimeout*(event: ptr SDL_Event; timeoutMS: Sint32): bool {.
    cdecl, importc: "SDL_WaitEventTimeout".}
proc SDL_PushEvent*(event: ptr SDL_Event): bool {.cdecl,
    importc: "SDL_PushEvent".}
proc SDL_SetEventFilter*(filter: SDL_EventFilter; userdata: pointer): void {.
    cdecl, importc: "SDL_SetEventFilter".}
proc SDL_GetEventFilter*(filter: SDL_EventFilter; userdata: ptr pointer): bool {.
    cdecl, importc: "SDL_GetEventFilter".}
proc SDL_AddEventWatch*(filter: SDL_EventFilter; userdata: pointer): bool {.
    cdecl, importc: "SDL_AddEventWatch".}
proc SDL_RemoveEventWatch*(filter: SDL_EventFilter; userdata: pointer): void {.
    cdecl, importc: "SDL_RemoveEventWatch".}
proc SDL_FilterEvents*(filter: SDL_EventFilter; userdata: pointer): void {.
    cdecl, importc: "SDL_FilterEvents".}
proc SDL_SetEventEnabled*(type_arg: Uint32; enabled: bool): void {.cdecl,
    importc: "SDL_SetEventEnabled".}
proc SDL_EventEnabled*(type_arg: Uint32): bool {.cdecl,
    importc: "SDL_EventEnabled".}
proc SDL_RegisterEvents*(numevents: cint): Uint32 {.cdecl,
    importc: "SDL_RegisterEvents".}
proc SDL_GetWindowFromEvent*(event: ptr SDL_Event): ptr SDL_Window {.cdecl,
    importc: "SDL_GetWindowFromEvent".}
proc SDL_GetBasePath*(): cstring {.cdecl, importc: "SDL_GetBasePath".}
proc SDL_GetPrefPath*(org: cstring; app: cstring): cstring {.cdecl,
    importc: "SDL_GetPrefPath".}
proc SDL_GetUserFolder*(folder: SDL_Folder): cstring {.cdecl,
    importc: "SDL_GetUserFolder".}
proc SDL_CreateDirectory*(path: cstring): bool {.cdecl,
    importc: "SDL_CreateDirectory".}
proc SDL_EnumerateDirectory*(path: cstring;
                             callback: SDL_EnumerateDirectoryCallback;
                             userdata: pointer): bool {.cdecl,
    importc: "SDL_EnumerateDirectory".}
proc SDL_RemovePath*(path: cstring): bool {.cdecl, importc: "SDL_RemovePath".}
proc SDL_RenamePath*(oldpath: cstring; newpath: cstring): bool {.cdecl,
    importc: "SDL_RenamePath".}
proc SDL_CopyFile*(oldpath: cstring; newpath: cstring): bool {.cdecl,
    importc: "SDL_CopyFile".}
proc SDL_GetPathInfo*(path: cstring; info: ptr SDL_PathInfo): bool {.cdecl,
    importc: "SDL_GetPathInfo".}
proc SDL_GlobDirectory*(path: cstring; pattern: cstring; flags: SDL_GlobFlags;
                        count: ptr cint): ptr cstring {.cdecl,
    importc: "SDL_GlobDirectory".}
proc SDL_GPUSupportsShaderFormats*(format_flags: SDL_GPUShaderFormat;
                                   name: cstring): bool {.cdecl,
    importc: "SDL_GPUSupportsShaderFormats".}
proc SDL_GPUSupportsProperties*(props: SDL_PropertiesID): bool {.cdecl,
    importc: "SDL_GPUSupportsProperties".}
proc SDL_CreateGPUDevice*(format_flags: SDL_GPUShaderFormat; debug_mode: bool;
                          name: cstring): ptr SDL_GPUDevice {.cdecl,
    importc: "SDL_CreateGPUDevice".}
proc SDL_CreateGPUDeviceWithProperties*(props: SDL_PropertiesID): ptr SDL_GPUDevice {.
    cdecl, importc: "SDL_CreateGPUDeviceWithProperties".}
proc SDL_DestroyGPUDevice*(device: ptr SDL_GPUDevice): void {.cdecl,
    importc: "SDL_DestroyGPUDevice".}
proc SDL_GetNumGPUDrivers*(): cint {.cdecl, importc: "SDL_GetNumGPUDrivers".}
proc SDL_GetGPUDriver*(index: cint): cstring {.cdecl,
    importc: "SDL_GetGPUDriver".}
proc SDL_GetGPUDeviceDriver*(device: ptr SDL_GPUDevice): cstring {.cdecl,
    importc: "SDL_GetGPUDeviceDriver".}
proc SDL_GetGPUShaderFormats*(device: ptr SDL_GPUDevice): SDL_GPUShaderFormat {.
    cdecl, importc: "SDL_GetGPUShaderFormats".}
proc SDL_CreateGPUComputePipeline*(device: ptr SDL_GPUDevice; createinfo: ptr SDL_GPUComputePipelineCreateInfo): ptr SDL_GPUComputePipeline {.
    cdecl, importc: "SDL_CreateGPUComputePipeline".}
proc SDL_CreateGPUGraphicsPipeline*(device: ptr SDL_GPUDevice; createinfo: ptr SDL_GPUGraphicsPipelineCreateInfo): ptr SDL_GPUGraphicsPipeline {.
    cdecl, importc: "SDL_CreateGPUGraphicsPipeline".}
proc SDL_CreateGPUSampler*(device: ptr SDL_GPUDevice;
                           createinfo: ptr SDL_GPUSamplerCreateInfo): ptr SDL_GPUSampler {.
    cdecl, importc: "SDL_CreateGPUSampler".}
proc SDL_CreateGPUShader*(device: ptr SDL_GPUDevice;
                          createinfo: ptr SDL_GPUShaderCreateInfo): ptr SDL_GPUShader {.
    cdecl, importc: "SDL_CreateGPUShader".}
proc SDL_CreateGPUTexture*(device: ptr SDL_GPUDevice;
                           createinfo: ptr SDL_GPUTextureCreateInfo): ptr SDL_GPUTexture {.
    cdecl, importc: "SDL_CreateGPUTexture".}
proc SDL_CreateGPUBuffer*(device: ptr SDL_GPUDevice;
                          createinfo: ptr SDL_GPUBufferCreateInfo): ptr SDL_GPUBuffer {.
    cdecl, importc: "SDL_CreateGPUBuffer".}
proc SDL_CreateGPUTransferBuffer*(device: ptr SDL_GPUDevice; createinfo: ptr SDL_GPUTransferBufferCreateInfo): ptr SDL_GPUTransferBuffer {.
    cdecl, importc: "SDL_CreateGPUTransferBuffer".}
proc SDL_SetGPUBufferName*(device: ptr SDL_GPUDevice; buffer: ptr SDL_GPUBuffer;
                           text: cstring): void {.cdecl,
    importc: "SDL_SetGPUBufferName".}
proc SDL_SetGPUTextureName*(device: ptr SDL_GPUDevice;
                            texture: ptr SDL_GPUTexture; text: cstring): void {.
    cdecl, importc: "SDL_SetGPUTextureName".}
proc SDL_InsertGPUDebugLabel*(command_buffer: ptr SDL_GPUCommandBuffer;
                              text: cstring): void {.cdecl,
    importc: "SDL_InsertGPUDebugLabel".}
proc SDL_PushGPUDebugGroup*(command_buffer: ptr SDL_GPUCommandBuffer;
                            name: cstring): void {.cdecl,
    importc: "SDL_PushGPUDebugGroup".}
proc SDL_PopGPUDebugGroup*(command_buffer: ptr SDL_GPUCommandBuffer): void {.
    cdecl, importc: "SDL_PopGPUDebugGroup".}
proc SDL_ReleaseGPUTexture*(device: ptr SDL_GPUDevice;
                            texture: ptr SDL_GPUTexture): void {.cdecl,
    importc: "SDL_ReleaseGPUTexture".}
proc SDL_ReleaseGPUSampler*(device: ptr SDL_GPUDevice;
                            sampler: ptr SDL_GPUSampler): void {.cdecl,
    importc: "SDL_ReleaseGPUSampler".}
proc SDL_ReleaseGPUBuffer*(device: ptr SDL_GPUDevice; buffer: ptr SDL_GPUBuffer): void {.
    cdecl, importc: "SDL_ReleaseGPUBuffer".}
proc SDL_ReleaseGPUTransferBuffer*(device: ptr SDL_GPUDevice;
                                   transfer_buffer: ptr SDL_GPUTransferBuffer): void {.
    cdecl, importc: "SDL_ReleaseGPUTransferBuffer".}
proc SDL_ReleaseGPUComputePipeline*(device: ptr SDL_GPUDevice; compute_pipeline: ptr SDL_GPUComputePipeline): void {.
    cdecl, importc: "SDL_ReleaseGPUComputePipeline".}
proc SDL_ReleaseGPUShader*(device: ptr SDL_GPUDevice; shader: ptr SDL_GPUShader): void {.
    cdecl, importc: "SDL_ReleaseGPUShader".}
proc SDL_ReleaseGPUGraphicsPipeline*(device: ptr SDL_GPUDevice;
    graphics_pipeline: ptr SDL_GPUGraphicsPipeline): void {.cdecl,
    importc: "SDL_ReleaseGPUGraphicsPipeline".}
proc SDL_AcquireGPUCommandBuffer*(device: ptr SDL_GPUDevice): ptr SDL_GPUCommandBuffer {.
    cdecl, importc: "SDL_AcquireGPUCommandBuffer".}
proc SDL_PushGPUVertexUniformData*(command_buffer: ptr SDL_GPUCommandBuffer;
                                   slot_index: Uint32; data: pointer;
                                   length: Uint32): void {.cdecl,
    importc: "SDL_PushGPUVertexUniformData".}
proc SDL_PushGPUFragmentUniformData*(command_buffer: ptr SDL_GPUCommandBuffer;
                                     slot_index: Uint32; data: pointer;
                                     length: Uint32): void {.cdecl,
    importc: "SDL_PushGPUFragmentUniformData".}
proc SDL_PushGPUComputeUniformData*(command_buffer: ptr SDL_GPUCommandBuffer;
                                    slot_index: Uint32; data: pointer;
                                    length: Uint32): void {.cdecl,
    importc: "SDL_PushGPUComputeUniformData".}
proc SDL_BeginGPURenderPass*(command_buffer: ptr SDL_GPUCommandBuffer;
                             color_target_infos: ptr SDL_GPUColorTargetInfo;
                             num_color_targets: Uint32;
    depth_stencil_target_info: ptr SDL_GPUDepthStencilTargetInfo): ptr SDL_GPURenderPass {.
    cdecl, importc: "SDL_BeginGPURenderPass".}
proc SDL_BindGPUGraphicsPipeline*(render_pass: ptr SDL_GPURenderPass;
    graphics_pipeline: ptr SDL_GPUGraphicsPipeline): void {.cdecl,
    importc: "SDL_BindGPUGraphicsPipeline".}
proc SDL_SetGPUViewport*(render_pass: ptr SDL_GPURenderPass;
                         viewport: ptr SDL_GPUViewport): void {.cdecl,
    importc: "SDL_SetGPUViewport".}
proc SDL_SetGPUScissor*(render_pass: ptr SDL_GPURenderPass;
                        scissor: ptr SDL_Rect): void {.cdecl,
    importc: "SDL_SetGPUScissor".}
proc SDL_SetGPUBlendConstants*(render_pass: ptr SDL_GPURenderPass;
                               blend_constants: SDL_FColor): void {.cdecl,
    importc: "SDL_SetGPUBlendConstants".}
proc SDL_SetGPUStencilReference*(render_pass: ptr SDL_GPURenderPass;
                                 reference: Uint8): void {.cdecl,
    importc: "SDL_SetGPUStencilReference".}
proc SDL_BindGPUVertexBuffers*(render_pass: ptr SDL_GPURenderPass;
                               first_slot: Uint32;
                               bindings: ptr SDL_GPUBufferBinding;
                               num_bindings: Uint32): void {.cdecl,
    importc: "SDL_BindGPUVertexBuffers".}
proc SDL_BindGPUIndexBuffer*(render_pass: ptr SDL_GPURenderPass;
                             binding: ptr SDL_GPUBufferBinding;
                             index_element_size: SDL_GPUIndexElementSize): void {.
    cdecl, importc: "SDL_BindGPUIndexBuffer".}
proc SDL_BindGPUVertexSamplers*(render_pass: ptr SDL_GPURenderPass;
                                first_slot: Uint32; texture_sampler_bindings: ptr SDL_GPUTextureSamplerBinding;
                                num_bindings: Uint32): void {.cdecl,
    importc: "SDL_BindGPUVertexSamplers".}
proc SDL_BindGPUVertexStorageTextures*(render_pass: ptr SDL_GPURenderPass;
                                       first_slot: Uint32; storage_textures: ptr ptr SDL_GPUTexture;
                                       num_bindings: Uint32): void {.cdecl,
    importc: "SDL_BindGPUVertexStorageTextures".}
proc SDL_BindGPUVertexStorageBuffers*(render_pass: ptr SDL_GPURenderPass;
                                      first_slot: Uint32;
                                      storage_buffers: ptr ptr SDL_GPUBuffer;
                                      num_bindings: Uint32): void {.cdecl,
    importc: "SDL_BindGPUVertexStorageBuffers".}
proc SDL_BindGPUFragmentSamplers*(render_pass: ptr SDL_GPURenderPass;
                                  first_slot: Uint32; texture_sampler_bindings: ptr SDL_GPUTextureSamplerBinding;
                                  num_bindings: Uint32): void {.cdecl,
    importc: "SDL_BindGPUFragmentSamplers".}
proc SDL_BindGPUFragmentStorageTextures*(render_pass: ptr SDL_GPURenderPass;
    first_slot: Uint32; storage_textures: ptr ptr SDL_GPUTexture;
    num_bindings: Uint32): void {.cdecl,
                                  importc: "SDL_BindGPUFragmentStorageTextures".}
proc SDL_BindGPUFragmentStorageBuffers*(render_pass: ptr SDL_GPURenderPass;
                                        first_slot: Uint32;
                                        storage_buffers: ptr ptr SDL_GPUBuffer;
                                        num_bindings: Uint32): void {.cdecl,
    importc: "SDL_BindGPUFragmentStorageBuffers".}
proc SDL_DrawGPUIndexedPrimitives*(render_pass: ptr SDL_GPURenderPass;
                                   num_indices: Uint32; num_instances: Uint32;
                                   first_index: Uint32; vertex_offset: Sint32;
                                   first_instance: Uint32): void {.cdecl,
    importc: "SDL_DrawGPUIndexedPrimitives".}
proc SDL_DrawGPUPrimitives*(render_pass: ptr SDL_GPURenderPass;
                            num_vertices: Uint32; num_instances: Uint32;
                            first_vertex: Uint32; first_instance: Uint32): void {.
    cdecl, importc: "SDL_DrawGPUPrimitives".}
proc SDL_DrawGPUPrimitivesIndirect*(render_pass: ptr SDL_GPURenderPass;
                                    buffer: ptr SDL_GPUBuffer; offset: Uint32;
                                    draw_count: Uint32): void {.cdecl,
    importc: "SDL_DrawGPUPrimitivesIndirect".}
proc SDL_DrawGPUIndexedPrimitivesIndirect*(render_pass: ptr SDL_GPURenderPass;
    buffer: ptr SDL_GPUBuffer; offset: Uint32; draw_count: Uint32): void {.
    cdecl, importc: "SDL_DrawGPUIndexedPrimitivesIndirect".}
proc SDL_EndGPURenderPass*(render_pass: ptr SDL_GPURenderPass): void {.cdecl,
    importc: "SDL_EndGPURenderPass".}
proc SDL_BeginGPUComputePass*(command_buffer: ptr SDL_GPUCommandBuffer;
    storage_texture_bindings: ptr SDL_GPUStorageTextureReadWriteBinding;
                              num_storage_texture_bindings: Uint32;
    storage_buffer_bindings: ptr SDL_GPUStorageBufferReadWriteBinding;
                              num_storage_buffer_bindings: Uint32): ptr SDL_GPUComputePass {.
    cdecl, importc: "SDL_BeginGPUComputePass".}
proc SDL_BindGPUComputePipeline*(compute_pass: ptr SDL_GPUComputePass;
                                 compute_pipeline: ptr SDL_GPUComputePipeline): void {.
    cdecl, importc: "SDL_BindGPUComputePipeline".}
proc SDL_BindGPUComputeSamplers*(compute_pass: ptr SDL_GPUComputePass;
                                 first_slot: Uint32; texture_sampler_bindings: ptr SDL_GPUTextureSamplerBinding;
                                 num_bindings: Uint32): void {.cdecl,
    importc: "SDL_BindGPUComputeSamplers".}
proc SDL_BindGPUComputeStorageTextures*(compute_pass: ptr SDL_GPUComputePass;
                                        first_slot: Uint32; storage_textures: ptr ptr SDL_GPUTexture;
                                        num_bindings: Uint32): void {.cdecl,
    importc: "SDL_BindGPUComputeStorageTextures".}
proc SDL_BindGPUComputeStorageBuffers*(compute_pass: ptr SDL_GPUComputePass;
                                       first_slot: Uint32;
                                       storage_buffers: ptr ptr SDL_GPUBuffer;
                                       num_bindings: Uint32): void {.cdecl,
    importc: "SDL_BindGPUComputeStorageBuffers".}
proc SDL_DispatchGPUCompute*(compute_pass: ptr SDL_GPUComputePass;
                             groupcount_x: Uint32; groupcount_y: Uint32;
                             groupcount_z: Uint32): void {.cdecl,
    importc: "SDL_DispatchGPUCompute".}
proc SDL_DispatchGPUComputeIndirect*(compute_pass: ptr SDL_GPUComputePass;
                                     buffer: ptr SDL_GPUBuffer; offset: Uint32): void {.
    cdecl, importc: "SDL_DispatchGPUComputeIndirect".}
proc SDL_EndGPUComputePass*(compute_pass: ptr SDL_GPUComputePass): void {.cdecl,
    importc: "SDL_EndGPUComputePass".}
proc SDL_MapGPUTransferBuffer*(device: ptr SDL_GPUDevice;
                               transfer_buffer: ptr SDL_GPUTransferBuffer;
                               cycle: bool): pointer {.cdecl,
    importc: "SDL_MapGPUTransferBuffer".}
proc SDL_UnmapGPUTransferBuffer*(device: ptr SDL_GPUDevice;
                                 transfer_buffer: ptr SDL_GPUTransferBuffer): void {.
    cdecl, importc: "SDL_UnmapGPUTransferBuffer".}
proc SDL_BeginGPUCopyPass*(command_buffer: ptr SDL_GPUCommandBuffer): ptr SDL_GPUCopyPass {.
    cdecl, importc: "SDL_BeginGPUCopyPass".}
proc SDL_UploadToGPUTexture*(copy_pass: ptr SDL_GPUCopyPass;
                             source: ptr SDL_GPUTextureTransferInfo;
                             destination: ptr SDL_GPUTextureRegion; cycle: bool): void {.
    cdecl, importc: "SDL_UploadToGPUTexture".}
proc SDL_UploadToGPUBuffer*(copy_pass: ptr SDL_GPUCopyPass;
                            source: ptr SDL_GPUTransferBufferLocation;
                            destination: ptr SDL_GPUBufferRegion; cycle: bool): void {.
    cdecl, importc: "SDL_UploadToGPUBuffer".}
proc SDL_CopyGPUTextureToTexture*(copy_pass: ptr SDL_GPUCopyPass;
                                  source: ptr SDL_GPUTextureLocation;
                                  destination: ptr SDL_GPUTextureLocation;
                                  w: Uint32; h: Uint32; d: Uint32; cycle: bool): void {.
    cdecl, importc: "SDL_CopyGPUTextureToTexture".}
proc SDL_CopyGPUBufferToBuffer*(copy_pass: ptr SDL_GPUCopyPass;
                                source: ptr SDL_GPUBufferLocation;
                                destination: ptr SDL_GPUBufferLocation;
                                size: Uint32; cycle: bool): void {.cdecl,
    importc: "SDL_CopyGPUBufferToBuffer".}
proc SDL_DownloadFromGPUTexture*(copy_pass: ptr SDL_GPUCopyPass;
                                 source: ptr SDL_GPUTextureRegion;
                                 destination: ptr SDL_GPUTextureTransferInfo): void {.
    cdecl, importc: "SDL_DownloadFromGPUTexture".}
proc SDL_DownloadFromGPUBuffer*(copy_pass: ptr SDL_GPUCopyPass;
                                source: ptr SDL_GPUBufferRegion;
                                destination: ptr SDL_GPUTransferBufferLocation): void {.
    cdecl, importc: "SDL_DownloadFromGPUBuffer".}
proc SDL_EndGPUCopyPass*(copy_pass: ptr SDL_GPUCopyPass): void {.cdecl,
    importc: "SDL_EndGPUCopyPass".}
proc SDL_GenerateMipmapsForGPUTexture*(command_buffer: ptr SDL_GPUCommandBuffer;
                                       texture: ptr SDL_GPUTexture): void {.
    cdecl, importc: "SDL_GenerateMipmapsForGPUTexture".}
proc SDL_BlitGPUTexture*(command_buffer: ptr SDL_GPUCommandBuffer;
                         info: ptr SDL_GPUBlitInfo): void {.cdecl,
    importc: "SDL_BlitGPUTexture".}
proc SDL_WindowSupportsGPUSwapchainComposition*(device: ptr SDL_GPUDevice;
    window: ptr SDL_Window; swapchain_composition: SDL_GPUSwapchainComposition): bool {.
    cdecl, importc: "SDL_WindowSupportsGPUSwapchainComposition".}
proc SDL_WindowSupportsGPUPresentMode*(device: ptr SDL_GPUDevice;
                                       window: ptr SDL_Window;
                                       present_mode: SDL_GPUPresentMode): bool {.
    cdecl, importc: "SDL_WindowSupportsGPUPresentMode".}
proc SDL_ClaimWindowForGPUDevice*(device: ptr SDL_GPUDevice;
                                  window: ptr SDL_Window): bool {.cdecl,
    importc: "SDL_ClaimWindowForGPUDevice".}
proc SDL_ReleaseWindowFromGPUDevice*(device: ptr SDL_GPUDevice;
                                     window: ptr SDL_Window): void {.cdecl,
    importc: "SDL_ReleaseWindowFromGPUDevice".}
proc SDL_SetGPUSwapchainParameters*(device: ptr SDL_GPUDevice;
                                    window: ptr SDL_Window;
    swapchain_composition: SDL_GPUSwapchainComposition;
                                    present_mode: SDL_GPUPresentMode): bool {.
    cdecl, importc: "SDL_SetGPUSwapchainParameters".}
proc SDL_GetGPUSwapchainTextureFormat*(device: ptr SDL_GPUDevice;
                                       window: ptr SDL_Window): SDL_GPUTextureFormat {.
    cdecl, importc: "SDL_GetGPUSwapchainTextureFormat".}
proc SDL_AcquireGPUSwapchainTexture*(command_buffer: ptr SDL_GPUCommandBuffer;
                                     window: ptr SDL_Window;
                                     swapchain_texture: ptr ptr SDL_GPUTexture;
                                     swapchain_texture_width: ptr Uint32;
                                     swapchain_texture_height: ptr Uint32): bool {.
    cdecl, importc: "SDL_AcquireGPUSwapchainTexture".}
proc SDL_SubmitGPUCommandBuffer*(command_buffer: ptr SDL_GPUCommandBuffer): bool {.
    cdecl, importc: "SDL_SubmitGPUCommandBuffer".}
proc SDL_SubmitGPUCommandBufferAndAcquireFence*(
    command_buffer: ptr SDL_GPUCommandBuffer): ptr SDL_GPUFence {.cdecl,
    importc: "SDL_SubmitGPUCommandBufferAndAcquireFence".}
proc SDL_CancelGPUCommandBuffer*(command_buffer: ptr SDL_GPUCommandBuffer): bool {.
    cdecl, importc: "SDL_CancelGPUCommandBuffer".}
proc SDL_WaitForGPUIdle*(device: ptr SDL_GPUDevice): bool {.cdecl,
    importc: "SDL_WaitForGPUIdle".}
proc SDL_WaitForGPUFences*(device: ptr SDL_GPUDevice; wait_all: bool;
                           fences: ptr ptr SDL_GPUFence; num_fences: Uint32): bool {.
    cdecl, importc: "SDL_WaitForGPUFences".}
proc SDL_QueryGPUFence*(device: ptr SDL_GPUDevice; fence: ptr SDL_GPUFence): bool {.
    cdecl, importc: "SDL_QueryGPUFence".}
proc SDL_ReleaseGPUFence*(device: ptr SDL_GPUDevice; fence: ptr SDL_GPUFence): void {.
    cdecl, importc: "SDL_ReleaseGPUFence".}
proc SDL_GPUTextureFormatTexelBlockSize*(format: SDL_GPUTextureFormat): Uint32 {.
    cdecl, importc: "SDL_GPUTextureFormatTexelBlockSize".}
proc SDL_GPUTextureSupportsFormat*(device: ptr SDL_GPUDevice;
                                   format: SDL_GPUTextureFormat;
                                   type_arg: SDL_GPUTextureType;
                                   usage: SDL_GPUTextureUsageFlags): bool {.
    cdecl, importc: "SDL_GPUTextureSupportsFormat".}
proc SDL_GPUTextureSupportsSampleCount*(device: ptr SDL_GPUDevice;
                                        format: SDL_GPUTextureFormat;
                                        sample_count: SDL_GPUSampleCount): bool {.
    cdecl, importc: "SDL_GPUTextureSupportsSampleCount".}
proc SDL_CalculateGPUTextureFormatSize*(format: SDL_GPUTextureFormat;
                                        width: Uint32; height: Uint32;
                                        depth_or_layer_count: Uint32): Uint32 {.
    cdecl, importc: "SDL_CalculateGPUTextureFormatSize".}
proc SDL_GetHaptics*(count: ptr cint): ptr SDL_HapticID {.cdecl,
    importc: "SDL_GetHaptics".}
proc SDL_GetHapticNameForID*(instance_id: SDL_HapticID): cstring {.cdecl,
    importc: "SDL_GetHapticNameForID".}
proc SDL_OpenHaptic*(instance_id: SDL_HapticID): ptr SDL_Haptic {.cdecl,
    importc: "SDL_OpenHaptic".}
proc SDL_GetHapticFromID*(instance_id: SDL_HapticID): ptr SDL_Haptic {.cdecl,
    importc: "SDL_GetHapticFromID".}
proc SDL_GetHapticID*(haptic: ptr SDL_Haptic): SDL_HapticID {.cdecl,
    importc: "SDL_GetHapticID".}
proc SDL_GetHapticName*(haptic: ptr SDL_Haptic): cstring {.cdecl,
    importc: "SDL_GetHapticName".}
proc SDL_IsMouseHaptic*(): bool {.cdecl, importc: "SDL_IsMouseHaptic".}
proc SDL_OpenHapticFromMouse*(): ptr SDL_Haptic {.cdecl,
    importc: "SDL_OpenHapticFromMouse".}
proc SDL_IsJoystickHaptic*(joystick: ptr SDL_Joystick): bool {.cdecl,
    importc: "SDL_IsJoystickHaptic".}
proc SDL_OpenHapticFromJoystick*(joystick: ptr SDL_Joystick): ptr SDL_Haptic {.
    cdecl, importc: "SDL_OpenHapticFromJoystick".}
proc SDL_CloseHaptic*(haptic: ptr SDL_Haptic): void {.cdecl,
    importc: "SDL_CloseHaptic".}
proc SDL_GetMaxHapticEffects*(haptic: ptr SDL_Haptic): cint {.cdecl,
    importc: "SDL_GetMaxHapticEffects".}
proc SDL_GetMaxHapticEffectsPlaying*(haptic: ptr SDL_Haptic): cint {.cdecl,
    importc: "SDL_GetMaxHapticEffectsPlaying".}
proc SDL_GetHapticFeatures*(haptic: ptr SDL_Haptic): Uint32 {.cdecl,
    importc: "SDL_GetHapticFeatures".}
proc SDL_GetNumHapticAxes*(haptic: ptr SDL_Haptic): cint {.cdecl,
    importc: "SDL_GetNumHapticAxes".}
proc SDL_HapticEffectSupported*(haptic: ptr SDL_Haptic;
                                effect: ptr SDL_HapticEffect): bool {.cdecl,
    importc: "SDL_HapticEffectSupported".}
proc SDL_CreateHapticEffect*(haptic: ptr SDL_Haptic;
                             effect: ptr SDL_HapticEffect): cint {.cdecl,
    importc: "SDL_CreateHapticEffect".}
proc SDL_UpdateHapticEffect*(haptic: ptr SDL_Haptic; effect: cint;
                             data: ptr SDL_HapticEffect): bool {.cdecl,
    importc: "SDL_UpdateHapticEffect".}
proc SDL_RunHapticEffect*(haptic: ptr SDL_Haptic; effect: cint;
                          iterations: Uint32): bool {.cdecl,
    importc: "SDL_RunHapticEffect".}
proc SDL_StopHapticEffect*(haptic: ptr SDL_Haptic; effect: cint): bool {.cdecl,
    importc: "SDL_StopHapticEffect".}
proc SDL_DestroyHapticEffect*(haptic: ptr SDL_Haptic; effect: cint): void {.
    cdecl, importc: "SDL_DestroyHapticEffect".}
proc SDL_GetHapticEffectStatus*(haptic: ptr SDL_Haptic; effect: cint): bool {.
    cdecl, importc: "SDL_GetHapticEffectStatus".}
proc SDL_SetHapticGain*(haptic: ptr SDL_Haptic; gain: cint): bool {.cdecl,
    importc: "SDL_SetHapticGain".}
proc SDL_SetHapticAutocenter*(haptic: ptr SDL_Haptic; autocenter: cint): bool {.
    cdecl, importc: "SDL_SetHapticAutocenter".}
proc SDL_PauseHaptic*(haptic: ptr SDL_Haptic): bool {.cdecl,
    importc: "SDL_PauseHaptic".}
proc SDL_ResumeHaptic*(haptic: ptr SDL_Haptic): bool {.cdecl,
    importc: "SDL_ResumeHaptic".}
proc SDL_StopHapticEffects*(haptic: ptr SDL_Haptic): bool {.cdecl,
    importc: "SDL_StopHapticEffects".}
proc SDL_HapticRumbleSupported*(haptic: ptr SDL_Haptic): bool {.cdecl,
    importc: "SDL_HapticRumbleSupported".}
proc SDL_InitHapticRumble*(haptic: ptr SDL_Haptic): bool {.cdecl,
    importc: "SDL_InitHapticRumble".}
proc SDL_PlayHapticRumble*(haptic: ptr SDL_Haptic; strength: cfloat;
                           length: Uint32): bool {.cdecl,
    importc: "SDL_PlayHapticRumble".}
proc SDL_StopHapticRumble*(haptic: ptr SDL_Haptic): bool {.cdecl,
    importc: "SDL_StopHapticRumble".}
proc SDL_hid_init*(): cint {.cdecl, importc: "SDL_hid_init".}
proc SDL_hid_exit*(): cint {.cdecl, importc: "SDL_hid_exit".}
proc SDL_hid_device_change_count*(): Uint32 {.cdecl,
    importc: "SDL_hid_device_change_count".}
proc SDL_hid_enumerate*(vendor_id: cushort; product_id: cushort): ptr SDL_hid_device_info {.
    cdecl, importc: "SDL_hid_enumerate".}
proc SDL_hid_free_enumeration*(devs: ptr SDL_hid_device_info): void {.cdecl,
    importc: "SDL_hid_free_enumeration".}
proc SDL_hid_open*(vendor_id: cushort; product_id: cushort;
                   serial_number: ptr wchar_t): ptr SDL_hid_device {.cdecl,
    importc: "SDL_hid_open".}
proc SDL_hid_open_path*(path: cstring): ptr SDL_hid_device {.cdecl,
    importc: "SDL_hid_open_path".}
proc SDL_hid_write*(dev: ptr SDL_hid_device; data: ptr uint8; length: csize_t): cint {.
    cdecl, importc: "SDL_hid_write".}
proc SDL_hid_read_timeout*(dev: ptr SDL_hid_device; data: ptr uint8;
                           length: csize_t; milliseconds: cint): cint {.cdecl,
    importc: "SDL_hid_read_timeout".}
proc SDL_hid_read*(dev: ptr SDL_hid_device; data: ptr uint8; length: csize_t): cint {.
    cdecl, importc: "SDL_hid_read".}
proc SDL_hid_set_nonblocking*(dev: ptr SDL_hid_device; nonblock: cint): cint {.
    cdecl, importc: "SDL_hid_set_nonblocking".}
proc SDL_hid_send_feature_report*(dev: ptr SDL_hid_device; data: ptr uint8;
                                  length: csize_t): cint {.cdecl,
    importc: "SDL_hid_send_feature_report".}
proc SDL_hid_get_feature_report*(dev: ptr SDL_hid_device; data: ptr uint8;
                                 length: csize_t): cint {.cdecl,
    importc: "SDL_hid_get_feature_report".}
proc SDL_hid_get_input_report*(dev: ptr SDL_hid_device; data: ptr uint8;
                               length: csize_t): cint {.cdecl,
    importc: "SDL_hid_get_input_report".}
proc SDL_hid_close*(dev: ptr SDL_hid_device): cint {.cdecl,
    importc: "SDL_hid_close".}
proc SDL_hid_get_manufacturer_string*(dev: ptr SDL_hid_device;
                                      string_arg: ptr wchar_t; maxlen: csize_t): cint {.
    cdecl, importc: "SDL_hid_get_manufacturer_string".}
proc SDL_hid_get_product_string*(dev: ptr SDL_hid_device;
                                 string_arg: ptr wchar_t; maxlen: csize_t): cint {.
    cdecl, importc: "SDL_hid_get_product_string".}
proc SDL_hid_get_serial_number_string*(dev: ptr SDL_hid_device;
                                       string_arg: ptr wchar_t; maxlen: csize_t): cint {.
    cdecl, importc: "SDL_hid_get_serial_number_string".}
proc SDL_hid_get_indexed_string*(dev: ptr SDL_hid_device; string_index: cint;
                                 string_arg: ptr wchar_t; maxlen: csize_t): cint {.
    cdecl, importc: "SDL_hid_get_indexed_string".}
proc SDL_hid_get_device_info*(dev: ptr SDL_hid_device): ptr SDL_hid_device_info {.
    cdecl, importc: "SDL_hid_get_device_info".}
proc SDL_hid_get_report_descriptor*(dev: ptr SDL_hid_device; buf: ptr uint8;
                                    buf_size: csize_t): cint {.cdecl,
    importc: "SDL_hid_get_report_descriptor".}
proc SDL_hid_ble_scan*(active: bool): void {.cdecl, importc: "SDL_hid_ble_scan".}
proc SDL_SetHintWithPriority*(name: cstring; value: cstring;
                              priority: SDL_HintPriority): bool {.cdecl,
    importc: "SDL_SetHintWithPriority".}
proc SDL_SetHint*(name: cstring; value: cstring): bool {.cdecl,
    importc: "SDL_SetHint".}
proc SDL_ResetHint*(name: cstring): bool {.cdecl, importc: "SDL_ResetHint".}
proc SDL_ResetHints*(): void {.cdecl, importc: "SDL_ResetHints".}
proc SDL_GetHint*(name: cstring): cstring {.cdecl, importc: "SDL_GetHint".}
proc SDL_GetHintBoolean*(name: cstring; default_value: bool): bool {.cdecl,
    importc: "SDL_GetHintBoolean".}
proc SDL_AddHintCallback*(name: cstring; callback: SDL_HintCallback;
                          userdata: pointer): bool {.cdecl,
    importc: "SDL_AddHintCallback".}
proc SDL_RemoveHintCallback*(name: cstring; callback: SDL_HintCallback;
                             userdata: pointer): void {.cdecl,
    importc: "SDL_RemoveHintCallback".}
proc SDL_Init*(flags: SDL_InitFlags): bool {.cdecl, importc: "SDL_Init".}
proc SDL_InitSubSystem*(flags: SDL_InitFlags): bool {.cdecl,
    importc: "SDL_InitSubSystem".}
proc SDL_QuitSubSystem*(flags: SDL_InitFlags): void {.cdecl,
    importc: "SDL_QuitSubSystem".}
proc SDL_WasInit*(flags: SDL_InitFlags): SDL_InitFlags {.cdecl,
    importc: "SDL_WasInit".}
proc SDL_Quit_proc*(): void {.cdecl, importc: "SDL_Quit".}
proc SDL_SetAppMetadata*(appname: cstring; appversion: cstring;
                         appidentifier: cstring): bool {.cdecl,
    importc: "SDL_SetAppMetadata".}
proc SDL_SetAppMetadataProperty*(name: cstring; value: cstring): bool {.cdecl,
    importc: "SDL_SetAppMetadataProperty".}
proc SDL_GetAppMetadataProperty*(name: cstring): cstring {.cdecl,
    importc: "SDL_GetAppMetadataProperty".}
proc SDL_LoadObject*(sofile: cstring): ptr SDL_SharedObject {.cdecl,
    importc: "SDL_LoadObject".}
proc SDL_LoadFunction*(handle: ptr SDL_SharedObject; name: cstring): SDL_FunctionPointer {.
    cdecl, importc: "SDL_LoadFunction".}
proc SDL_UnloadObject*(handle: ptr SDL_SharedObject): void {.cdecl,
    importc: "SDL_UnloadObject".}
proc SDL_GetPreferredLocales*(count: ptr cint): ptr ptr SDL_Locale {.cdecl,
    importc: "SDL_GetPreferredLocales".}
proc SDL_SetLogPriorities*(priority: SDL_LogPriority): void {.cdecl,
    importc: "SDL_SetLogPriorities".}
proc SDL_SetLogPriority*(category: cint; priority: SDL_LogPriority): void {.
    cdecl, importc: "SDL_SetLogPriority".}
proc SDL_GetLogPriority*(category: cint): SDL_LogPriority {.cdecl,
    importc: "SDL_GetLogPriority".}
proc SDL_ResetLogPriorities*(): void {.cdecl, importc: "SDL_ResetLogPriorities".}
proc SDL_SetLogPriorityPrefix*(priority: SDL_LogPriority; prefix: cstring): bool {.
    cdecl, importc: "SDL_SetLogPriorityPrefix".}
proc SDL_Log_proc*(fmt: cstring): void {.cdecl, varargs, importc: "SDL_Log".}
proc SDL_LogTrace*(category: cint; fmt: cstring): void {.cdecl, varargs,
    importc: "SDL_LogTrace".}
proc SDL_LogVerbose*(category: cint; fmt: cstring): void {.cdecl, varargs,
    importc: "SDL_LogVerbose".}
proc SDL_LogDebug*(category: cint; fmt: cstring): void {.cdecl, varargs,
    importc: "SDL_LogDebug".}
proc SDL_LogInfo*(category: cint; fmt: cstring): void {.cdecl, varargs,
    importc: "SDL_LogInfo".}
proc SDL_LogWarn*(category: cint; fmt: cstring): void {.cdecl, varargs,
    importc: "SDL_LogWarn".}
proc SDL_LogError*(category: cint; fmt: cstring): void {.cdecl, varargs,
    importc: "SDL_LogError".}
proc SDL_LogCritical*(category: cint; fmt: cstring): void {.cdecl, varargs,
    importc: "SDL_LogCritical".}
proc SDL_LogMessage*(category: cint; priority: SDL_LogPriority; fmt: cstring): void {.
    cdecl, varargs, importc: "SDL_LogMessage".}
proc SDL_LogMessageV*(category: cint; priority: SDL_LogPriority; fmt: cstring): void {.
    cdecl, varargs, importc: "SDL_LogMessageV".}
proc SDL_GetDefaultLogOutputFunction*(): SDL_LogOutputFunction {.cdecl,
    importc: "SDL_GetDefaultLogOutputFunction".}
proc SDL_GetLogOutputFunction*(callback: SDL_LogOutputFunction;
                               userdata: ptr pointer): void {.cdecl,
    importc: "SDL_GetLogOutputFunction".}
proc SDL_SetLogOutputFunction*(callback: SDL_LogOutputFunction;
                               userdata: pointer): void {.cdecl,
    importc: "SDL_SetLogOutputFunction".}
proc SDL_ShowMessageBox*(messageboxdata: ptr SDL_MessageBoxData;
                         buttonid: ptr cint): bool {.cdecl,
    importc: "SDL_ShowMessageBox".}
proc SDL_ShowSimpleMessageBox*(flags: SDL_MessageBoxFlags; title: cstring;
                               message: cstring; window: ptr SDL_Window): bool {.
    cdecl, importc: "SDL_ShowSimpleMessageBox".}
proc SDL_Metal_CreateView*(window: ptr SDL_Window): SDL_MetalView {.cdecl,
    importc: "SDL_Metal_CreateView".}
proc SDL_Metal_DestroyView*(view: SDL_MetalView): void {.cdecl,
    importc: "SDL_Metal_DestroyView".}
proc SDL_Metal_GetLayer*(view: SDL_MetalView): pointer {.cdecl,
    importc: "SDL_Metal_GetLayer".}
proc SDL_OpenURL*(url: cstring): bool {.cdecl, importc: "SDL_OpenURL".}
proc SDL_GetPlatform*(): cstring {.cdecl, importc: "SDL_GetPlatform".}
proc SDL_CreateProcess*(args: ptr cstring; pipe_stdio: bool): ptr SDL_Process {.
    cdecl, importc: "SDL_CreateProcess".}
proc SDL_CreateProcessWithProperties*(props: SDL_PropertiesID): ptr SDL_Process {.
    cdecl, importc: "SDL_CreateProcessWithProperties".}
proc SDL_GetProcessProperties*(process: ptr SDL_Process): SDL_PropertiesID {.
    cdecl, importc: "SDL_GetProcessProperties".}
proc SDL_ReadProcess*(process: ptr SDL_Process; datasize: ptr csize_t;
                      exitcode: ptr cint): pointer {.cdecl,
    importc: "SDL_ReadProcess".}
proc SDL_GetProcessInput*(process: ptr SDL_Process): ptr SDL_IOStream {.cdecl,
    importc: "SDL_GetProcessInput".}
proc SDL_GetProcessOutput*(process: ptr SDL_Process): ptr SDL_IOStream {.cdecl,
    importc: "SDL_GetProcessOutput".}
proc SDL_KillProcess*(process: ptr SDL_Process; force: bool): bool {.cdecl,
    importc: "SDL_KillProcess".}
proc SDL_WaitProcess*(process: ptr SDL_Process; block_arg: bool;
                      exitcode: ptr cint): bool {.cdecl,
    importc: "SDL_WaitProcess".}
proc SDL_DestroyProcess*(process: ptr SDL_Process): void {.cdecl,
    importc: "SDL_DestroyProcess".}
proc SDL_GetNumRenderDrivers*(): cint {.cdecl,
                                        importc: "SDL_GetNumRenderDrivers".}
proc SDL_GetRenderDriver*(index: cint): cstring {.cdecl,
    importc: "SDL_GetRenderDriver".}
proc SDL_CreateWindowAndRenderer*(title: cstring; width: cint; height: cint;
                                  window_flags: SDL_WindowFlags;
                                  window: ptr ptr SDL_Window;
                                  renderer: ptr ptr SDL_Renderer): bool {.cdecl,
    importc: "SDL_CreateWindowAndRenderer".}
proc SDL_CreateRenderer*(window: ptr SDL_Window; name: cstring): ptr SDL_Renderer {.
    cdecl, importc: "SDL_CreateRenderer".}
proc SDL_CreateRendererWithProperties*(props: SDL_PropertiesID): ptr SDL_Renderer {.
    cdecl, importc: "SDL_CreateRendererWithProperties".}
proc SDL_CreateSoftwareRenderer*(surface: ptr SDL_Surface): ptr SDL_Renderer {.
    cdecl, importc: "SDL_CreateSoftwareRenderer".}
proc SDL_GetRenderer*(window: ptr SDL_Window): ptr SDL_Renderer {.cdecl,
    importc: "SDL_GetRenderer".}
proc SDL_GetRenderWindow*(renderer: ptr SDL_Renderer): ptr SDL_Window {.cdecl,
    importc: "SDL_GetRenderWindow".}
proc SDL_GetRendererName*(renderer: ptr SDL_Renderer): cstring {.cdecl,
    importc: "SDL_GetRendererName".}
proc SDL_GetRendererProperties*(renderer: ptr SDL_Renderer): SDL_PropertiesID {.
    cdecl, importc: "SDL_GetRendererProperties".}
proc SDL_GetRenderOutputSize*(renderer: ptr SDL_Renderer; w: ptr cint;
                              h: ptr cint): bool {.cdecl,
    importc: "SDL_GetRenderOutputSize".}
proc SDL_GetCurrentRenderOutputSize*(renderer: ptr SDL_Renderer; w: ptr cint;
                                     h: ptr cint): bool {.cdecl,
    importc: "SDL_GetCurrentRenderOutputSize".}
proc SDL_CreateTexture*(renderer: ptr SDL_Renderer; format: SDL_PixelFormat;
                        access: SDL_TextureAccess; w: cint; h: cint): ptr SDL_Texture {.
    cdecl, importc: "SDL_CreateTexture".}
proc SDL_CreateTextureFromSurface*(renderer: ptr SDL_Renderer;
                                   surface: ptr SDL_Surface): ptr SDL_Texture {.
    cdecl, importc: "SDL_CreateTextureFromSurface".}
proc SDL_CreateTextureWithProperties*(renderer: ptr SDL_Renderer;
                                      props: SDL_PropertiesID): ptr SDL_Texture {.
    cdecl, importc: "SDL_CreateTextureWithProperties".}
proc SDL_GetTextureProperties*(texture: ptr SDL_Texture): SDL_PropertiesID {.
    cdecl, importc: "SDL_GetTextureProperties".}
proc SDL_GetRendererFromTexture*(texture: ptr SDL_Texture): ptr SDL_Renderer {.
    cdecl, importc: "SDL_GetRendererFromTexture".}
proc SDL_GetTextureSize*(texture: ptr SDL_Texture; w: ptr cfloat; h: ptr cfloat): bool {.
    cdecl, importc: "SDL_GetTextureSize".}
proc SDL_SetTextureColorMod*(texture: ptr SDL_Texture; r: Uint8; g: Uint8;
                             b: Uint8): bool {.cdecl,
    importc: "SDL_SetTextureColorMod".}
proc SDL_SetTextureColorModFloat*(texture: ptr SDL_Texture; r: cfloat;
                                  g: cfloat; b: cfloat): bool {.cdecl,
    importc: "SDL_SetTextureColorModFloat".}
proc SDL_GetTextureColorMod*(texture: ptr SDL_Texture; r: ptr Uint8;
                             g: ptr Uint8; b: ptr Uint8): bool {.cdecl,
    importc: "SDL_GetTextureColorMod".}
proc SDL_GetTextureColorModFloat*(texture: ptr SDL_Texture; r: ptr cfloat;
                                  g: ptr cfloat; b: ptr cfloat): bool {.cdecl,
    importc: "SDL_GetTextureColorModFloat".}
proc SDL_SetTextureAlphaMod*(texture: ptr SDL_Texture; alpha: Uint8): bool {.
    cdecl, importc: "SDL_SetTextureAlphaMod".}
proc SDL_SetTextureAlphaModFloat*(texture: ptr SDL_Texture; alpha: cfloat): bool {.
    cdecl, importc: "SDL_SetTextureAlphaModFloat".}
proc SDL_GetTextureAlphaMod*(texture: ptr SDL_Texture; alpha: ptr Uint8): bool {.
    cdecl, importc: "SDL_GetTextureAlphaMod".}
proc SDL_GetTextureAlphaModFloat*(texture: ptr SDL_Texture; alpha: ptr cfloat): bool {.
    cdecl, importc: "SDL_GetTextureAlphaModFloat".}
proc SDL_SetTextureBlendMode*(texture: ptr SDL_Texture; blendMode: SDL_BlendMode): bool {.
    cdecl, importc: "SDL_SetTextureBlendMode".}
proc SDL_GetTextureBlendMode*(texture: ptr SDL_Texture;
                              blendMode: ptr SDL_BlendMode): bool {.cdecl,
    importc: "SDL_GetTextureBlendMode".}
proc SDL_SetTextureScaleMode*(texture: ptr SDL_Texture; scaleMode: SDL_ScaleMode): bool {.
    cdecl, importc: "SDL_SetTextureScaleMode".}
proc SDL_GetTextureScaleMode*(texture: ptr SDL_Texture;
                              scaleMode: ptr SDL_ScaleMode): bool {.cdecl,
    importc: "SDL_GetTextureScaleMode".}
proc SDL_UpdateTexture*(texture: ptr SDL_Texture; rect: ptr SDL_Rect;
                        pixels: pointer; pitch: cint): bool {.cdecl,
    importc: "SDL_UpdateTexture".}
proc SDL_UpdateYUVTexture*(texture: ptr SDL_Texture; rect: ptr SDL_Rect;
                           Yplane: ptr Uint8; Ypitch: cint; Uplane: ptr Uint8;
                           Upitch: cint; Vplane: ptr Uint8; Vpitch: cint): bool {.
    cdecl, importc: "SDL_UpdateYUVTexture".}
proc SDL_UpdateNVTexture*(texture: ptr SDL_Texture; rect: ptr SDL_Rect;
                          Yplane: ptr Uint8; Ypitch: cint; UVplane: ptr Uint8;
                          UVpitch: cint): bool {.cdecl,
    importc: "SDL_UpdateNVTexture".}
proc SDL_LockTexture*(texture: ptr SDL_Texture; rect: ptr SDL_Rect;
                      pixels: ptr pointer; pitch: ptr cint): bool {.cdecl,
    importc: "SDL_LockTexture".}
proc SDL_LockTextureToSurface*(texture: ptr SDL_Texture; rect: ptr SDL_Rect;
                               surface: ptr ptr SDL_Surface): bool {.cdecl,
    importc: "SDL_LockTextureToSurface".}
proc SDL_UnlockTexture*(texture: ptr SDL_Texture): void {.cdecl,
    importc: "SDL_UnlockTexture".}
proc SDL_SetRenderTarget*(renderer: ptr SDL_Renderer; texture: ptr SDL_Texture): bool {.
    cdecl, importc: "SDL_SetRenderTarget".}
proc SDL_GetRenderTarget*(renderer: ptr SDL_Renderer): ptr SDL_Texture {.cdecl,
    importc: "SDL_GetRenderTarget".}
proc SDL_SetRenderLogicalPresentation*(renderer: ptr SDL_Renderer; w: cint;
                                       h: cint;
                                       mode: SDL_RendererLogicalPresentation): bool {.
    cdecl, importc: "SDL_SetRenderLogicalPresentation".}
proc SDL_GetRenderLogicalPresentation*(renderer: ptr SDL_Renderer; w: ptr cint;
                                       h: ptr cint; mode: ptr SDL_RendererLogicalPresentation): bool {.
    cdecl, importc: "SDL_GetRenderLogicalPresentation".}
proc SDL_GetRenderLogicalPresentationRect*(renderer: ptr SDL_Renderer;
    rect: ptr SDL_FRect): bool {.cdecl, importc: "SDL_GetRenderLogicalPresentationRect".}
proc SDL_RenderCoordinatesFromWindow*(renderer: ptr SDL_Renderer;
                                      window_x: cfloat; window_y: cfloat;
                                      x: ptr cfloat; y: ptr cfloat): bool {.
    cdecl, importc: "SDL_RenderCoordinatesFromWindow".}
proc SDL_RenderCoordinatesToWindow*(renderer: ptr SDL_Renderer; x: cfloat;
                                    y: cfloat; window_x: ptr cfloat;
                                    window_y: ptr cfloat): bool {.cdecl,
    importc: "SDL_RenderCoordinatesToWindow".}
proc SDL_ConvertEventToRenderCoordinates*(renderer: ptr SDL_Renderer;
    event: ptr SDL_Event): bool {.cdecl, importc: "SDL_ConvertEventToRenderCoordinates".}
proc SDL_SetRenderViewport*(renderer: ptr SDL_Renderer; rect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_SetRenderViewport".}
proc SDL_GetRenderViewport*(renderer: ptr SDL_Renderer; rect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_GetRenderViewport".}
proc SDL_RenderViewportSet*(renderer: ptr SDL_Renderer): bool {.cdecl,
    importc: "SDL_RenderViewportSet".}
proc SDL_GetRenderSafeArea*(renderer: ptr SDL_Renderer; rect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_GetRenderSafeArea".}
proc SDL_SetRenderClipRect*(renderer: ptr SDL_Renderer; rect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_SetRenderClipRect".}
proc SDL_GetRenderClipRect*(renderer: ptr SDL_Renderer; rect: ptr SDL_Rect): bool {.
    cdecl, importc: "SDL_GetRenderClipRect".}
proc SDL_RenderClipEnabled*(renderer: ptr SDL_Renderer): bool {.cdecl,
    importc: "SDL_RenderClipEnabled".}
proc SDL_SetRenderScale*(renderer: ptr SDL_Renderer; scaleX: cfloat;
                         scaleY: cfloat): bool {.cdecl,
    importc: "SDL_SetRenderScale".}
proc SDL_GetRenderScale*(renderer: ptr SDL_Renderer; scaleX: ptr cfloat;
                         scaleY: ptr cfloat): bool {.cdecl,
    importc: "SDL_GetRenderScale".}
proc SDL_SetRenderDrawColor*(renderer: ptr SDL_Renderer; r: Uint8; g: Uint8;
                             b: Uint8; a: Uint8): bool {.cdecl,
    importc: "SDL_SetRenderDrawColor".}
proc SDL_SetRenderDrawColorFloat*(renderer: ptr SDL_Renderer; r: cfloat;
                                  g: cfloat; b: cfloat; a: cfloat): bool {.
    cdecl, importc: "SDL_SetRenderDrawColorFloat".}
proc SDL_GetRenderDrawColor*(renderer: ptr SDL_Renderer; r: ptr Uint8;
                             g: ptr Uint8; b: ptr Uint8; a: ptr Uint8): bool {.
    cdecl, importc: "SDL_GetRenderDrawColor".}
proc SDL_GetRenderDrawColorFloat*(renderer: ptr SDL_Renderer; r: ptr cfloat;
                                  g: ptr cfloat; b: ptr cfloat; a: ptr cfloat): bool {.
    cdecl, importc: "SDL_GetRenderDrawColorFloat".}
proc SDL_SetRenderColorScale*(renderer: ptr SDL_Renderer; scale: cfloat): bool {.
    cdecl, importc: "SDL_SetRenderColorScale".}
proc SDL_GetRenderColorScale*(renderer: ptr SDL_Renderer; scale: ptr cfloat): bool {.
    cdecl, importc: "SDL_GetRenderColorScale".}
proc SDL_SetRenderDrawBlendMode*(renderer: ptr SDL_Renderer;
                                 blendMode: SDL_BlendMode): bool {.cdecl,
    importc: "SDL_SetRenderDrawBlendMode".}
proc SDL_GetRenderDrawBlendMode*(renderer: ptr SDL_Renderer;
                                 blendMode: ptr SDL_BlendMode): bool {.cdecl,
    importc: "SDL_GetRenderDrawBlendMode".}
proc SDL_RenderClear*(renderer: ptr SDL_Renderer): bool {.cdecl,
    importc: "SDL_RenderClear".}
proc SDL_RenderPoint*(renderer: ptr SDL_Renderer; x: cfloat; y: cfloat): bool {.
    cdecl, importc: "SDL_RenderPoint".}
proc SDL_RenderPoints*(renderer: ptr SDL_Renderer; points: ptr SDL_FPoint;
                       count: cint): bool {.cdecl, importc: "SDL_RenderPoints".}
proc SDL_RenderLine*(renderer: ptr SDL_Renderer; x1: cfloat; y1: cfloat;
                     x2: cfloat; y2: cfloat): bool {.cdecl,
    importc: "SDL_RenderLine".}
proc SDL_RenderLines*(renderer: ptr SDL_Renderer; points: ptr SDL_FPoint;
                      count: cint): bool {.cdecl, importc: "SDL_RenderLines".}
proc SDL_RenderRect*(renderer: ptr SDL_Renderer; rect: ptr SDL_FRect): bool {.
    cdecl, importc: "SDL_RenderRect".}
proc SDL_RenderRects*(renderer: ptr SDL_Renderer; rects: ptr SDL_FRect;
                      count: cint): bool {.cdecl, importc: "SDL_RenderRects".}
proc SDL_RenderFillRect*(renderer: ptr SDL_Renderer; rect: ptr SDL_FRect): bool {.
    cdecl, importc: "SDL_RenderFillRect".}
proc SDL_RenderFillRects*(renderer: ptr SDL_Renderer; rects: ptr SDL_FRect;
                          count: cint): bool {.cdecl,
    importc: "SDL_RenderFillRects".}
proc SDL_RenderTexture*(renderer: ptr SDL_Renderer; texture: ptr SDL_Texture;
                        srcrect: ptr SDL_FRect; dstrect: ptr SDL_FRect): bool {.
    cdecl, importc: "SDL_RenderTexture".}
proc SDL_RenderTextureRotated*(renderer: ptr SDL_Renderer;
                               texture: ptr SDL_Texture; srcrect: ptr SDL_FRect;
                               dstrect: ptr SDL_FRect; angle: cdouble;
                               center: ptr SDL_FPoint; flip: SDL_FlipMode): bool {.
    cdecl, importc: "SDL_RenderTextureRotated".}
proc SDL_RenderTextureTiled*(renderer: ptr SDL_Renderer;
                             texture: ptr SDL_Texture; srcrect: ptr SDL_FRect;
                             scale: cfloat; dstrect: ptr SDL_FRect): bool {.
    cdecl, importc: "SDL_RenderTextureTiled".}
proc SDL_RenderTexture9Grid*(renderer: ptr SDL_Renderer;
                             texture: ptr SDL_Texture; srcrect: ptr SDL_FRect;
                             left_width: cfloat; right_width: cfloat;
                             top_height: cfloat; bottom_height: cfloat;
                             scale: cfloat; dstrect: ptr SDL_FRect): bool {.
    cdecl, importc: "SDL_RenderTexture9Grid".}
proc SDL_RenderGeometry*(renderer: ptr SDL_Renderer; texture: ptr SDL_Texture;
                         vertices: ptr SDL_Vertex; num_vertices: cint;
                         indices: ptr cint; num_indices: cint): bool {.cdecl,
    importc: "SDL_RenderGeometry".}
proc SDL_RenderGeometryRaw*(renderer: ptr SDL_Renderer;
                            texture: ptr SDL_Texture; xy: ptr cfloat;
                            xy_stride: cint; color: ptr SDL_FColor;
                            color_stride: cint; uv: ptr cfloat; uv_stride: cint;
                            num_vertices: cint; indices: pointer;
                            num_indices: cint; size_indices: cint): bool {.
    cdecl, importc: "SDL_RenderGeometryRaw".}
proc SDL_RenderReadPixels*(renderer: ptr SDL_Renderer; rect: ptr SDL_Rect): ptr SDL_Surface {.
    cdecl, importc: "SDL_RenderReadPixels".}
proc SDL_RenderPresent*(renderer: ptr SDL_Renderer): bool {.cdecl,
    importc: "SDL_RenderPresent".}
proc SDL_DestroyTexture*(texture: ptr SDL_Texture): void {.cdecl,
    importc: "SDL_DestroyTexture".}
proc SDL_DestroyRenderer*(renderer: ptr SDL_Renderer): void {.cdecl,
    importc: "SDL_DestroyRenderer".}
proc SDL_FlushRenderer*(renderer: ptr SDL_Renderer): bool {.cdecl,
    importc: "SDL_FlushRenderer".}
proc SDL_GetRenderMetalLayer*(renderer: ptr SDL_Renderer): pointer {.cdecl,
    importc: "SDL_GetRenderMetalLayer".}
proc SDL_GetRenderMetalCommandEncoder*(renderer: ptr SDL_Renderer): pointer {.
    cdecl, importc: "SDL_GetRenderMetalCommandEncoder".}
proc SDL_AddVulkanRenderSemaphores*(renderer: ptr SDL_Renderer;
                                    wait_stage_mask: Uint32;
                                    wait_semaphore: Sint64;
                                    signal_semaphore: Sint64): bool {.cdecl,
    importc: "SDL_AddVulkanRenderSemaphores".}
proc SDL_SetRenderVSync*(renderer: ptr SDL_Renderer; vsync: cint): bool {.cdecl,
    importc: "SDL_SetRenderVSync".}
proc SDL_GetRenderVSync*(renderer: ptr SDL_Renderer; vsync: ptr cint): bool {.
    cdecl, importc: "SDL_GetRenderVSync".}
proc SDL_RenderDebugText*(renderer: ptr SDL_Renderer; x: cfloat; y: cfloat;
                          str: cstring): bool {.cdecl,
    importc: "SDL_RenderDebugText".}
proc SDL_OpenTitleStorage*(override: cstring; props: SDL_PropertiesID): ptr SDL_Storage {.
    cdecl, importc: "SDL_OpenTitleStorage".}
proc SDL_OpenUserStorage*(org: cstring; app: cstring; props: SDL_PropertiesID): ptr SDL_Storage {.
    cdecl, importc: "SDL_OpenUserStorage".}
proc SDL_OpenFileStorage*(path: cstring): ptr SDL_Storage {.cdecl,
    importc: "SDL_OpenFileStorage".}
proc SDL_OpenStorage*(iface: ptr SDL_StorageInterface; userdata: pointer): ptr SDL_Storage {.
    cdecl, importc: "SDL_OpenStorage".}
proc SDL_CloseStorage*(storage: ptr SDL_Storage): bool {.cdecl,
    importc: "SDL_CloseStorage".}
proc SDL_StorageReady*(storage: ptr SDL_Storage): bool {.cdecl,
    importc: "SDL_StorageReady".}
proc SDL_GetStorageFileSize*(storage: ptr SDL_Storage; path: cstring;
                             length: ptr Uint64): bool {.cdecl,
    importc: "SDL_GetStorageFileSize".}
proc SDL_ReadStorageFile*(storage: ptr SDL_Storage; path: cstring;
                          destination: pointer; length: Uint64): bool {.cdecl,
    importc: "SDL_ReadStorageFile".}
proc SDL_WriteStorageFile*(storage: ptr SDL_Storage; path: cstring;
                           source: pointer; length: Uint64): bool {.cdecl,
    importc: "SDL_WriteStorageFile".}
proc SDL_CreateStorageDirectory*(storage: ptr SDL_Storage; path: cstring): bool {.
    cdecl, importc: "SDL_CreateStorageDirectory".}
proc SDL_EnumerateStorageDirectory*(storage: ptr SDL_Storage; path: cstring;
                                    callback: SDL_EnumerateDirectoryCallback;
                                    userdata: pointer): bool {.cdecl,
    importc: "SDL_EnumerateStorageDirectory".}
proc SDL_RemoveStoragePath*(storage: ptr SDL_Storage; path: cstring): bool {.
    cdecl, importc: "SDL_RemoveStoragePath".}
proc SDL_RenameStoragePath*(storage: ptr SDL_Storage; oldpath: cstring;
                            newpath: cstring): bool {.cdecl,
    importc: "SDL_RenameStoragePath".}
proc SDL_CopyStorageFile*(storage: ptr SDL_Storage; oldpath: cstring;
                          newpath: cstring): bool {.cdecl,
    importc: "SDL_CopyStorageFile".}
proc SDL_GetStoragePathInfo*(storage: ptr SDL_Storage; path: cstring;
                             info: ptr SDL_PathInfo): bool {.cdecl,
    importc: "SDL_GetStoragePathInfo".}
proc SDL_GetStorageSpaceRemaining*(storage: ptr SDL_Storage): Uint64 {.cdecl,
    importc: "SDL_GetStorageSpaceRemaining".}
proc SDL_GlobStorageDirectory*(storage: ptr SDL_Storage; path: cstring;
                               pattern: cstring; flags: SDL_GlobFlags;
                               count: ptr cint): ptr cstring {.cdecl,
    importc: "SDL_GlobStorageDirectory".}
proc SDL_SetWindowsMessageHook*(callback: SDL_WindowsMessageHook;
                                userdata: pointer): void {.cdecl,
    importc: "SDL_SetWindowsMessageHook".}
proc SDL_GetDirect3D9AdapterIndex*(displayID: SDL_DisplayID): cint {.cdecl,
    importc: "SDL_GetDirect3D9AdapterIndex".}
proc SDL_GetDXGIOutputInfo*(displayID: SDL_DisplayID; adapterIndex: ptr cint;
                            outputIndex: ptr cint): bool {.cdecl,
    importc: "SDL_GetDXGIOutputInfo".}
proc SDL_SetX11EventHook*(callback: SDL_X11EventHook; userdata: pointer): void {.
    cdecl, importc: "SDL_SetX11EventHook".}
proc SDL_IsTablet*(): bool {.cdecl, importc: "SDL_IsTablet".}
proc SDL_IsTV*(): bool {.cdecl, importc: "SDL_IsTV".}
proc SDL_GetSandbox*(): SDL_Sandbox {.cdecl, importc: "SDL_GetSandbox".}
proc SDL_OnApplicationWillTerminate*(): void {.cdecl,
    importc: "SDL_OnApplicationWillTerminate".}
proc SDL_OnApplicationDidReceiveMemoryWarning*(): void {.cdecl,
    importc: "SDL_OnApplicationDidReceiveMemoryWarning".}
proc SDL_OnApplicationWillEnterBackground*(): void {.cdecl,
    importc: "SDL_OnApplicationWillEnterBackground".}
proc SDL_OnApplicationDidEnterBackground*(): void {.cdecl,
    importc: "SDL_OnApplicationDidEnterBackground".}
proc SDL_OnApplicationWillEnterForeground*(): void {.cdecl,
    importc: "SDL_OnApplicationWillEnterForeground".}
proc SDL_OnApplicationDidEnterForeground*(): void {.cdecl,
    importc: "SDL_OnApplicationDidEnterForeground".}
proc SDL_GetDateTimeLocalePreferences*(dateFormat: ptr SDL_DateFormat;
                                       timeFormat: ptr SDL_TimeFormat): bool {.
    cdecl, importc: "SDL_GetDateTimeLocalePreferences".}
proc SDL_GetCurrentTime*(ticks: ptr SDL_Time): bool {.cdecl,
    importc: "SDL_GetCurrentTime".}
proc SDL_TimeToDateTime*(ticks: SDL_Time; dt: ptr SDL_DateTime; localTime: bool): bool {.
    cdecl, importc: "SDL_TimeToDateTime".}
proc SDL_DateTimeToTime*(dt: ptr SDL_DateTime; ticks: ptr SDL_Time): bool {.
    cdecl, importc: "SDL_DateTimeToTime".}
proc SDL_TimeToWindows*(ticks: SDL_Time; dwLowDateTime: ptr Uint32;
                        dwHighDateTime: ptr Uint32): void {.cdecl,
    importc: "SDL_TimeToWindows".}
proc SDL_TimeFromWindows*(dwLowDateTime: Uint32; dwHighDateTime: Uint32): SDL_Time {.
    cdecl, importc: "SDL_TimeFromWindows".}
proc SDL_GetDaysInMonth*(year: cint; month: cint): cint {.cdecl,
    importc: "SDL_GetDaysInMonth".}
proc SDL_GetDayOfYear*(year: cint; month: cint; day: cint): cint {.cdecl,
    importc: "SDL_GetDayOfYear".}
proc SDL_GetDayOfWeek*(year: cint; month: cint; day: cint): cint {.cdecl,
    importc: "SDL_GetDayOfWeek".}
proc SDL_GetTicks*(): Uint64 {.cdecl, importc: "SDL_GetTicks".}
proc SDL_GetTicksNS*(): Uint64 {.cdecl, importc: "SDL_GetTicksNS".}
proc SDL_GetPerformanceCounter*(): Uint64 {.cdecl,
    importc: "SDL_GetPerformanceCounter".}
proc SDL_GetPerformanceFrequency*(): Uint64 {.cdecl,
    importc: "SDL_GetPerformanceFrequency".}
proc SDL_Delay*(ms: Uint32): void {.cdecl, importc: "SDL_Delay".}
proc SDL_DelayNS*(ns: Uint64): void {.cdecl, importc: "SDL_DelayNS".}
proc SDL_DelayPrecise*(ns: Uint64): void {.cdecl, importc: "SDL_DelayPrecise".}
proc SDL_AddTimer*(interval: Uint32; callback: SDL_TimerCallback;
                   userdata: pointer): SDL_TimerID {.cdecl,
    importc: "SDL_AddTimer".}
proc SDL_AddTimerNS*(interval: Uint64; callback: SDL_NSTimerCallback;
                     userdata: pointer): SDL_TimerID {.cdecl,
    importc: "SDL_AddTimerNS".}
proc SDL_RemoveTimer*(id: SDL_TimerID): bool {.cdecl, importc: "SDL_RemoveTimer".}
proc SDL_GetVersion*(): cint {.cdecl, importc: "SDL_GetVersion".}
proc SDL_GetRevision*(): cstring {.cdecl, importc: "SDL_GetRevision".}
when cast[culonglong](-1'i64) is static:
  const
    UINT64_MAX* = cast[culonglong](-1'i64) 
else:
  let UINT64_MAX* = cast[culonglong](-1'i64) 
